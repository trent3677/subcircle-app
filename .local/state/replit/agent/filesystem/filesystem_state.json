{"file_contents":{"src/components/ui/menubar.tsx":{"content":"import * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst MenubarMenu = MenubarPrimitive.Menu\n\nconst MenubarGroup = MenubarPrimitive.Group\n\nconst MenubarPortal = MenubarPrimitive.Portal\n\nconst MenubarSub = MenubarPrimitive.Sub\n\nconst MenubarRadioGroup = MenubarPrimitive.RadioGroup\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":7974},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react-swc\";\nimport path from \"path\";\nimport { componentTagger } from \"lovable-tagger\";\n\nexport default defineConfig(({ mode }) => ({\n  server: {\n    host: \"::\",\n    port: Number(process.env.PORT) || 8080,\n    // 👇 allow your dynamic Replit URL(s)\n    allowedHosts: [\".replit.dev\"], // permits any subdomain of replit.dev\n    // If HMR struggles on Replit proxies, you can also try:\n    // hmr: { clientPort: 443, protocol: \"wss\" }\n  },\n  plugins: [\n    react(),\n    mode === \"development\" && componentTagger(),\n  ].filter(Boolean),\n  resolve: {\n    alias: {\n      \"@\": path.resolve(__dirname, \"./src\"),\n    },\n  },\n  build: {\n    // Optimize for deployment\n    rollupOptions: {\n      output: {\n        manualChunks: {\n          // Split vendor libs into separate chunks for better caching\n          vendor: ['react', 'react-dom'],\n          ui: ['@radix-ui/react-dialog', '@radix-ui/react-dropdown-menu', '@radix-ui/react-select'],\n        },\n      },\n    },\n    // Increase chunk size limit to reduce warnings\n    chunkSizeWarningLimit: 800,\n    // Use esbuild for faster builds (default minifier)\n    minify: mode === 'production' ? 'esbuild' : false,\n  },\n}));\n","size_bytes":1238},"src/components/ui/notification-settings.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Switch } from '@/components/ui/switch';\nimport { Label } from '@/components/ui/label';\nimport { Separator } from '@/components/ui/separator';\nimport { Badge } from '@/components/ui/badge';\nimport { useToast } from '@/hooks/use-toast';\nimport { \n  Bell, \n  Mail, \n  Smartphone, \n  Users, \n  CreditCard, \n  Shield, \n  Settings2,\n  Check,\n  TestTube,\n  AlertTriangle\n} from 'lucide-react';\nimport { usePushNotifications } from '@/hooks/use-push-notifications';\n\ninterface NotificationPreferences {\n  id?: string;\n  user_id: string;\n  email_enabled: boolean;\n  push_enabled: boolean;\n  partner_notifications: boolean;\n  subscription_notifications: boolean;\n  security_notifications: boolean;\n  system_notifications: boolean;\n  email_frequency: 'instant' | 'daily' | 'weekly';\n  quiet_hours_enabled: boolean;\n  quiet_hours_start: string;\n  quiet_hours_end: string;\n  created_at?: string;\n  updated_at?: string;\n}\n\nconst defaultPreferences: Partial<NotificationPreferences> = {\n  email_enabled: true,\n  push_enabled: true,\n  partner_notifications: true,\n  subscription_notifications: true,\n  security_notifications: true,\n  system_notifications: false,\n  email_frequency: 'instant',\n  quiet_hours_enabled: false,\n  quiet_hours_start: '22:00',\n  quiet_hours_end: '08:00'\n};\n\nexport const NotificationSettings = () => {\n  const [preferences, setPreferences] = useState<Partial<NotificationPreferences>>(defaultPreferences);\n  const [loading, setLoading] = useState(true);\n  const [saving, setSaving] = useState(false);\n  const { toast } = useToast();\n  const { \n    isSupported: pushSupported, \n    isSubscribed: pushSubscribed,\n    isLoading: pushLoading,\n    vapidPublicKey,\n    subscribeToPushNotifications,\n    unsubscribeFromPushNotifications,\n    sendTestPushNotification \n  } = usePushNotifications();\n\n  useEffect(() => {\n    loadPreferences();\n  }, []);\n\n  const loadPreferences = async () => {\n    try {\n      // TODO: Replace with actual backend API call\n      // For now, just use default preferences to get app working\n      \n      setPreferences(defaultPreferences);\n    } catch (error) {\n      console.error('Error loading preferences:', error);\n      setPreferences(defaultPreferences);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const savePreferences = async () => {\n    setSaving(true);\n    try {\n      // TODO: Replace with actual backend API call\n      // For now, just show success message to test UI\n      \n      toast({\n        title: \"Settings saved\",\n        description: \"Your notification preferences have been updated (mock).\",\n      });\n    } catch (error) {\n      console.error('Error saving preferences:', error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to save notification preferences\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  const handlePushToggle = async (checked: boolean) => {\n    if (checked) {\n      if (Notification.permission !== 'granted') {\n        const subscription = await subscribeToPushNotifications();\n        if (subscription) {\n          updatePreference('push_enabled', true);\n        }\n      } else {\n        updatePreference('push_enabled', true);\n      }\n    } else {\n      await unsubscribeFromPushNotifications();\n      updatePreference('push_enabled', false);\n    }\n  };\n\n  const updatePreference = (key: keyof NotificationPreferences, value: any) => {\n    setPreferences(prev => ({ ...prev, [key]: value }));\n  };\n\n  if (loading) {\n    return (\n      <div className=\"space-y-4 animate-pulse\">\n        {[...Array(3)].map((_, i) => (\n          <Card key={i}>\n            <CardHeader>\n              <div className=\"h-4 bg-muted rounded w-1/3\"></div>\n              <div className=\"h-3 bg-muted rounded w-2/3\"></div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                <div className=\"h-4 bg-muted rounded\"></div>\n                <div className=\"h-4 bg-muted rounded\"></div>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6 max-w-2xl mx-auto\">\n      <div className=\"text-center\">\n        <h2 className=\"text-2xl font-bold mb-2\">Notification Settings</h2>\n        <p className=\"text-muted-foreground\">\n          Customize how and when you receive notifications\n        </p>\n      </div>\n\n      {/* Delivery Methods */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Bell className=\"h-5 w-5\" />\n            Delivery Methods\n          </CardTitle>\n          <CardDescription>\n            Choose how you want to receive notifications\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-3\">\n              <Mail className=\"h-4 w-4 text-muted-foreground\" />\n              <div>\n                <Label className=\"font-medium\">Email Notifications</Label>\n                <p className=\"text-sm text-muted-foreground\">Receive notifications via email</p>\n              </div>\n            </div>\n            <Switch\n              checked={preferences.email_enabled}\n              onCheckedChange={(checked) => updatePreference('email_enabled', checked)}\n            />\n          </div>\n\n          <Separator />\n\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-3\">\n              <Smartphone className=\"h-4 w-4 text-muted-foreground\" />\n              <div>\n                <Label className=\"font-medium\">Push Notifications</Label>\n                <p className=\"text-sm text-muted-foreground\">\n                  Instant notifications in your browser\n                </p>\n                {!pushSupported && (\n                  <Badge variant=\"secondary\" className=\"mt-1\">Not supported</Badge>\n                )}\n                {pushSupported && !vapidPublicKey && (\n                  <Badge variant=\"destructive\" className=\"mt-1\">Configuration needed</Badge>\n                )}\n              </div>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <Switch\n                checked={preferences.push_enabled && pushSupported && pushSubscribed}\n                onCheckedChange={handlePushToggle}\n                disabled={!pushSupported || !vapidPublicKey || pushLoading}\n              />\n              {pushSupported && pushSubscribed && (\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={sendTestPushNotification}\n                  disabled={pushLoading}\n                >\n                  {pushLoading ? (\n                    <div className=\"h-4 w-4 animate-spin rounded-full border-2 border-background border-t-foreground mr-1\" />\n                  ) : (\n                    <TestTube className=\"h-4 w-4 mr-1\" />\n                  )}\n                  Test\n                </Button>\n              )}\n            </div>\n          </div>\n          \n          {/* Show instructions when notifications are blocked */}\n          {pushSupported && !pushSubscribed && vapidPublicKey && (\n            <div className=\"rounded-lg border border-orange-200 bg-orange-50 p-4 dark:border-orange-800 dark:bg-orange-950\">\n              <div className=\"flex items-start gap-2\">\n                <AlertTriangle className=\"h-5 w-5 text-orange-600 dark:text-orange-400 mt-0.5 flex-shrink-0\" />\n                <div className=\"space-y-2 flex-1\">\n                  <h4 className=\"font-medium text-orange-800 dark:text-orange-200\">\n                    Notifications May Be Blocked\n                  </h4>\n                  <p className=\"text-sm text-orange-700 dark:text-orange-300\">\n                    If push notifications aren't working, try these steps:\n                  </p>\n                  <ol className=\"text-sm text-orange-700 dark:text-orange-300 list-decimal list-inside space-y-1 ml-2\">\n                    <li>Look for the 🔒 or notification icon in your browser's address bar</li>\n                    <li>Click on it and change notifications from \"Block\" to \"Allow\"</li>\n                    <li>Or go to browser Settings → Privacy & Security → Site Settings → Notifications</li>\n                    <li>Refresh this page and toggle the switch above again</li>\n                  </ol>\n                </div>\n              </div>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Notification Categories */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Settings2 className=\"h-5 w-5\" />\n            Notification Categories\n          </CardTitle>\n          <CardDescription>\n            Control which types of notifications you receive\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-3\">\n              <Users className=\"h-4 w-4 text-primary\" />\n              <div>\n                <Label className=\"font-medium\">Partner Activities</Label>\n                <p className=\"text-sm text-muted-foreground\">\n                  Connection requests, acceptances, credential sharing\n                </p>\n              </div>\n            </div>\n            <Switch\n              checked={preferences.partner_notifications}\n              onCheckedChange={(checked) => updatePreference('partner_notifications', checked)}\n            />\n          </div>\n\n          <Separator />\n\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-3\">\n              <CreditCard className=\"h-4 w-4 text-subcircle-indigo\" />\n              <div>\n                <Label className=\"font-medium\">Subscription Updates</Label>\n                <p className=\"text-sm text-muted-foreground\">\n                  Renewal reminders, cost changes, recommendations\n                </p>\n              </div>\n            </div>\n            <Switch\n              checked={preferences.subscription_notifications}\n              onCheckedChange={(checked) => updatePreference('subscription_notifications', checked)}\n            />\n          </div>\n\n          <Separator />\n\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-3\">\n              <Shield className=\"h-4 w-4 text-subcircle-error\" />\n              <div>\n                <Label className=\"font-medium\">Security Alerts</Label>\n                <p className=\"text-sm text-muted-foreground\">\n                  Account security, credential access, suspicious activity\n                </p>\n                <Badge className=\"bg-subcircle-error text-white mt-1\">Always enabled</Badge>\n              </div>\n            </div>\n            <Switch\n              checked={true}\n              disabled={true}\n            />\n          </div>\n\n          <Separator />\n\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-3\">\n              <Bell className=\"h-4 w-4 text-muted-foreground\" />\n              <div>\n                <Label className=\"font-medium\">System Updates</Label>\n                <p className=\"text-sm text-muted-foreground\">\n                  App updates, maintenance, new features\n                </p>\n              </div>\n            </div>\n            <Switch\n              checked={preferences.system_notifications}\n              onCheckedChange={(checked) => updatePreference('system_notifications', checked)}\n            />\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Email Frequency */}\n      {preferences.email_enabled && (\n        <Card>\n          <CardHeader>\n            <CardTitle>Email Frequency</CardTitle>\n            <CardDescription>\n              How often should we send email notifications?\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-3\">\n              {[\n                { value: 'instant', label: 'Instant', description: 'As they happen' },\n                { value: 'daily', label: 'Daily', description: 'Once per day' },\n                { value: 'weekly', label: 'Weekly', description: 'Once per week' }\n              ].map((option) => (\n                <Button\n                  key={option.value}\n                  variant={preferences.email_frequency === option.value ? \"default\" : \"outline\"}\n                  className=\"h-auto p-4 flex flex-col items-center gap-2\"\n                  onClick={() => updatePreference('email_frequency', option.value)}\n                >\n                  {preferences.email_frequency === option.value && (\n                    <Check className=\"h-4 w-4\" />\n                  )}\n                  <div className=\"text-center\">\n                    <div className=\"font-medium\">{option.label}</div>\n                    <div className=\"text-xs text-muted-foreground\">{option.description}</div>\n                  </div>\n                </Button>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Save Button */}\n      <div className=\"flex justify-center\">\n        <Button \n          onClick={savePreferences} \n          disabled={saving}\n          className=\"min-w-32\"\n        >\n          {saving ? \"Saving...\" : \"Save Preferences\"}\n        </Button>\n      </div>\n    </div>\n  );\n};","size_bytes":13800},"src/main.tsx":{"content":"import { createRoot } from 'react-dom/client'\nimport App from './App.tsx'\nimport './index.css'\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":158},"replit.md":{"content":"# Overview\n\nSubCircle is a mobile-first web application for managing and sharing streaming service subscriptions. It provides a secure platform where users can track their subscriptions, share credentials with trusted partners, and receive notifications about renewals and partner connections. The app features local-only credential storage with client-side encryption for maximum security.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n- **Framework**: React 18 with TypeScript for type safety and modern development\n- **Build Tool**: Vite for fast development and optimized builds\n- **UI Framework**: shadcn/ui components built on Radix UI primitives for accessible, customizable components\n- **Styling**: Tailwind CSS with custom design system variables for consistent theming\n- **State Management**: React Query (TanStack Query) for server state management with built-in caching\n- **Routing**: React Router for client-side navigation with mobile-first page structure\n- **Mobile Support**: Capacitor integration for native mobile app deployment\n\n## Backend Architecture\n- **Runtime**: Node.js with Express.js server framework\n- **Database**: Drizzle ORM with Neon Database (PostgreSQL-compatible serverless database)\n- **Authentication**: Replit Auth (OpenID Connect) for user management with Google OAuth support\n- **API Structure**: RESTful API endpoints for notifications and push notification management\n\n## Data Storage\n- **Primary Database**: PostgreSQL via Neon Database for user profiles, subscriptions, partner connections, and notifications\n- **Local Storage**: Browser localStorage for credential encryption keys and user preferences\n- **Credential Security**: Client-side AES-GCM encryption using Web Crypto API with user-specific PBKDF2 key derivation\n\n## Authentication & Authorization\n- **Authentication Provider**: Replit Auth (OpenID Connect) with Google, GitHub, X, Apple, and email/password support\n- **Session Management**: Express sessions with PostgreSQL storage using connect-pg-simple\n- **Security Model**: Passport.js authentication middleware with token refresh\n- **Credential Protection**: Master password system for local credential encryption/decryption\n\n# External Dependencies\n\n## Core Services\n- **Replit Auth**: OpenID Connect authentication provider with OAuth support\n- **Neon Database**: Serverless PostgreSQL database for production data storage\n- **Web Push Protocol**: Native browser push notifications with VAPID keys\n\n## Development & Build Tools\n- **Replit Platform**: Primary development and deployment platform\n- **Capacitor**: Cross-platform mobile app development framework\n- **Vite**: Modern build tool and development server\n\n## UI & Styling Libraries\n- **Radix UI**: Headless UI components for accessibility and customization\n- **Tailwind CSS**: Utility-first CSS framework for responsive design\n- **Lucide React**: Icon library for consistent iconography\n\n## External APIs & Services\n- **SeekLogo CDN**: Primary service logo provider for reliable logo delivery\n- **Icon.horse**: Fallback service logo resolution from domain names when SeekLogo unavailable\n- **Service Worker**: Browser API for background push notification handling\n\n# Deployment Configuration\n\n## Production Deployment (Autoscale)\n- **Deployment Type**: Autoscale (automatic scaling based on traffic)\n- **Build Command**: `npm run build` (compiles React frontend with Vite)\n- **Run Command**: `npm start` (starts Express server with tsx)\n- **Server Port**: Automatically configured by Replit platform\n- **Environment**: Production environment variables (DATABASE_URL, VAPID keys) synced automatically\n\n## How to Deploy\n1. Click the \"Publish\" button in Replit workspace header\n2. Select \"Autoscale\" deployment type\n3. Click \"Set up your published app\"\n4. Your app will be live at `<app-name>.replit.app` within minutes\n5. Optionally add a custom domain in deployment settings\n\n# Recent Changes (October 2025)\n\n## Fixed Static Asset Serving Bug (October 19, 2025)\n- **Critical Bug Fixed**: Catch-all SPA route was intercepting `/assets/*.js` and `/assets/*.css` requests\n- **Root Cause**: Express middleware ordering - catch-all was responding before static files could be served\n- **Solution**: Modified catch-all to only handle GET requests and rely on express.static middleware priority\n- **Result**: JavaScript and CSS files now serve correctly (HTTP 200 with proper content type)\n- **Deployment Status**: Successfully deployed and verified working at https://subcircle.replit.app\n\n## Successful Autoscale Deployment (October 19, 2025)\n- **Deployment Status**: Successfully deployed to Replit Autoscale\n- **Build Configuration**: Simplified to `npm run build` for frontend compilation\n- **Run Configuration**: `npm start` with Express server on PORT environment variable\n- **Port Configuration**: Server uses PORT env var (provided by Replit in production)\n- **Database Connection**: Neon database auto-wakes on first connection (~500ms)\n- **Known Issue**: Neon free tier auto-suspends after 5 minutes of inactivity - database wakes automatically when accessed\n\n## Database Migration (October 19, 2025)\n- **Migrated to Sydney Region**: Successfully moved from US East to Sydney (ap-southeast-2) Neon Database\n- **New Endpoint**: `ep-wild-violet-a7wghesh-pooler.ap-southeast-2.aws.neon.tech`\n- **Database Version**: PostgreSQL 17 on Neon serverless platform\n- **Schema Status**: All tables created and synchronized (users, subscriptions, partners, notifications, push_subscriptions)\n- **Performance**: Reduced latency for Asia-Pacific users with regional database placement\n\n## Logo System Improvements\n- **Migrated to SeekLogo CDN**: Replaced Wikipedia Commons URLs with reliable SeekLogo CDN for better logo availability\n- **Fixed Missing Service Icons**: Corrected broken logos for Kayo Sports, Crunchyroll, and Shudder\n- **Service Name Corrections**: Fixed \"Shutter\" → \"Shudder\" (horror streaming service)\n- **Fallback System**: Maintains Icon.horse as backup with colored initial fallback for missing logos\n\n## UI Improvements\n- **Simplified Catalog Interface**: Removed category filter tabs (streaming/music) for cleaner user experience\n- **Savings Display**: Added total monthly savings calculation showing money saved from partner-shared subscriptions\n- **Responsive Design**: Maintained mobile-first approach with theme-adaptive styling\n\n## Code Cleanup\n- **Removed Test Components**: Deleted NotificationDemo and TestNotificationCreator from production build\n- **Streamlined Notifications Page**: Reduced to two tabs (Notification Center and Settings)\n- **File Organization**: Removed unused service-logos.ts file\n\n## Demo Testing Features\n- **Demo Partner Codes**: DEMO-YOU (user), DEMO-SAR, DEMO-ALE, DEMO-MIK (partners) for testing connections\n- **Self-Connection Prevention**: System prevents users from connecting with themselves","size_bytes":6949},"src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport { Sheet, SheetContent } from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar:state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContext = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContext | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContext>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden md:block text-sidebar-foreground\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"duration-200 relative h-svh w-[--sidebar-width] bg-transparent transition-[width] ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"duration-200 fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex min-h-svh flex-1 flex-col bg-background\",\n        \"peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"duration-200 flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground select-none pointer-events-none\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"rounded-md h-8 flex gap-2 px-2 items-center\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 flex-1 max-w-[--skeleton-width]\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23367},"src/pages/mobile/Compare.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { MobileLayout } from \"@/components/mobile/MobileLayout\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Share2, Users, Smartphone, DollarSign, RefreshCw } from \"lucide-react\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useNavigate } from \"react-router-dom\";\nimport { cn } from \"@/lib/utils\";\n\ninterface ComparisonData {\n  bothHave: ServiceItem[];\n  onlyYou: ServiceItem[];\n  onlyPartner: ServiceItem[];\n  totalSavings: number;\n  partnerName?: string;\n}\n\ninterface ServiceItem {\n  id: string;\n  name: string;\n  logo_url?: string;\n  monthly_price?: number;\n  category?: string;\n}\n\ninterface UserSubscriptionWithService {\n  id: string;\n  service_id: string;\n  is_active: boolean;\n  streaming_services: {\n    id: string;\n    name: string;\n    logo_url?: string;\n    monthly_price?: number;\n    category?: string;\n  };\n}\n\n// Demo data for showcasing comparison features\nconst demoUserSubscriptions: ServiceItem[] = [\n  {\n    id: 'netflix',\n    name: 'Netflix',\n    logo_url: 'https://upload.wikimedia.org/wikipedia/commons/thumb/0/08/Netflix_2015_logo.svg/1920px-Netflix_2015_logo.svg.png',\n    monthly_price: 15.99,\n    category: 'Streaming Video'\n  },\n  {\n    id: 'spotify',\n    name: 'Spotify Premium',\n    logo_url: 'https://upload.wikimedia.org/wikipedia/commons/thumb/1/19/Spotify_logo_without_text.svg/2048px-Spotify_logo_without_text.svg.png',\n    monthly_price: 9.99,\n    category: 'Music'\n  },\n  {\n    id: 'hulu',\n    name: 'Hulu',\n    logo_url: 'https://variety.com/wp-content/uploads/2019/10/hulu2.png',\n    monthly_price: 5.99,\n    category: 'Streaming Video'\n  },\n  {\n    id: 'disney',\n    name: 'Disney+',\n    logo_url: 'https://cnbl-cdn.bamgrid.com/assets/7ecc8bcb60ad77193058d63e321bd21cbac2fc67281dcc5ba08f162c30902633/original',\n    monthly_price: 7.99,\n    category: 'Streaming Video'\n  }\n];\n\nconst demoPartnerSubscriptions: ServiceItem[] = [\n  {\n    id: 'netflix',\n    name: 'Netflix',\n    logo_url: 'https://upload.wikimedia.org/wikipedia/commons/thumb/0/08/Netflix_2015_logo.svg/1920px-Netflix_2015_logo.svg.png',\n    monthly_price: 15.99,\n    category: 'Streaming Video'\n  },\n  {\n    id: 'apple-music',\n    name: 'Apple Music',\n    logo_url: 'https://upload.wikimedia.org/wikipedia/commons/thumb/5/5f/Apple_Music_icon.svg/2048px-Apple_Music_icon.svg.png',\n    monthly_price: 9.99,\n    category: 'Music'\n  },\n  {\n    id: 'hbo-max',\n    name: 'HBO Max',\n    logo_url: 'https://upload.wikimedia.org/wikipedia/commons/1/17/HBO_Max_Logo.svg',\n    monthly_price: 14.99,\n    category: 'Streaming Video'\n  },\n  {\n    id: 'youtube-premium',\n    name: 'YouTube Premium',\n    logo_url: 'https://upload.wikimedia.org/wikipedia/commons/thumb/0/09/YouTube_full-color_icon_%282017%29.svg/2560px-YouTube_full-color_icon_%282017%29.svg.png',\n    monthly_price: 11.99,\n    category: 'Video & Music'\n  }\n];\n\nexport default function Compare() {\n  const [comparison, setComparison] = useState<ComparisonData | null>(null);\n  const [userSubscriptions, setUserSubscriptions] = useState<ServiceItem[]>([]);\n  const [partnerSubscriptions, setPartnerSubscriptions] = useState<ServiceItem[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [hasPartnerConnection, setHasPartnerConnection] = useState(false);\n  const { user, isDemoMode } = useAuth();\n  const { toast } = useToast();\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    if (user) {\n      loadUserData();\n    } else {\n      setLoading(false);\n    }\n  }, [user]);\n\n  const loadUserData = async () => {\n    try {\n      // Load user's subscriptions\n      await fetchUserSubscriptions();\n      \n      // Check for partner connections\n      await checkPartnerConnections();\n    } catch (error) {\n      console.error(\"Error loading user data:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to load comparison data\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const fetchUserSubscriptions = async () => {\n    if (!user) return;\n\n    try {\n      if (isDemoMode) {\n        // Use demo data to showcase features\n        setUserSubscriptions(demoUserSubscriptions);\n        setPartnerSubscriptions(demoPartnerSubscriptions);\n      } else {\n        // TODO: Replace with backend API call\n        // For now, use empty array to get app working\n        setUserSubscriptions([]);\n      }\n    } catch (error) {\n      console.error(\"Error fetching user subscriptions:\", error);\n    }\n  };\n\n  const checkPartnerConnections = async () => {\n    if (!user) return;\n\n    try {\n      if (isDemoMode) {\n        // In demo mode, simulate having partner connections\n        setHasPartnerConnection(true);\n        \n        // Generate realistic comparison data\n        const bothHave = demoUserSubscriptions.filter(userSub => \n          demoPartnerSubscriptions.some(partnerSub => partnerSub.id === userSub.id)\n        );\n        \n        const onlyYou = demoUserSubscriptions.filter(userSub => \n          !demoPartnerSubscriptions.some(partnerSub => partnerSub.id === userSub.id)\n        );\n        \n        const onlyPartner = demoPartnerSubscriptions.filter(partnerSub => \n          !demoUserSubscriptions.some(userSub => userSub.id === partnerSub.id)\n        );\n        \n        const totalSavings = bothHave.reduce((total, service) => \n          total + (service.monthly_price || 0), 0\n        );\n        \n        setTimeout(() => {\n          setComparison({\n            bothHave,\n            onlyYou,\n            onlyPartner,\n            totalSavings,\n            partnerName: 'Sarah Johnson'\n          });\n        }, 1200); // Simulate analysis time\n      } else {\n        // TODO: Replace with backend API call\n        // For now, just set no partner connections\n        setHasPartnerConnection(false);\n      }\n    } catch (error) {\n      console.error(\"Error checking partner connections:\", error);\n    }\n  };\n\n  const generateRealComparison = async (partnerId: string, partnerName: string) => {\n    try {\n      // TODO: Replace with backend API call\n      // For now, just set empty comparison\n      setComparison({\n        bothHave: [],\n        onlyYou: [],\n        onlyPartner: [],\n        totalSavings: 0,\n        partnerName\n      });\n    } catch (error) {\n      console.error(\"Error generating real comparison:\", error);\n    }\n  };\n\n  const shareComparison = async () => {\n    if (!comparison) return;\n    \n    const shareText = `💰 SubCircle Comparison Results:\n• Both have: ${comparison.bothHave.length} services\n• Potential savings: $${comparison.totalSavings.toFixed(2)}/month\n• Total duplicate cost: $${comparison.totalSavings.toFixed(2)}/month\n\nDownload SubCircle to optimize your subscriptions!`;\n\n    try {\n      if (navigator.share) {\n        await navigator.share({\n          title: \"SubCircle Comparison\",\n          text: shareText,\n        });\n      } else {\n        await navigator.clipboard.writeText(shareText);\n        toast({\n          title: \"Copied!\",\n          description: \"Comparison results copied to clipboard\",\n        });\n      }\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to share comparison\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  if (!user) {\n    return (\n      <MobileLayout>\n        <div className=\"p-mobile-padding\">\n          <div className=\"text-center py-12 space-y-4\">\n            <Users className=\"w-16 h-16 mx-auto text-muted-foreground\" />\n            <div className=\"space-y-2\">\n              <h2 className=\"text-xl font-semibold\">Compare Subscriptions</h2>\n              <p className=\"text-muted-foreground\">\n                Please sign in to compare subscriptions with partners\n              </p>\n            </div>\n            <Button onClick={() => navigate(\"/onboarding\")} className=\"bg-primary text-primary-foreground\">\n              Sign In\n            </Button>\n          </div>\n        </div>\n      </MobileLayout>\n    );\n  }\n\n  if (loading) {\n    return (\n      <MobileLayout>\n        <div className=\"p-mobile-padding\">\n          <div className=\"flex items-center justify-center h-64\">\n            <div className=\"animate-pulse text-muted-foreground\">Loading comparison...</div>\n          </div>\n        </div>\n      </MobileLayout>\n    );\n  }\n\n  if (!comparison && hasPartnerConnection) {\n    return (\n      <MobileLayout>\n        <div className=\"p-mobile-padding\">\n          <div className=\"text-center py-12 space-y-4\">\n            <RefreshCw className=\"w-16 h-16 mx-auto text-muted-foreground animate-spin\" />\n            <div className=\"space-y-2\">\n              <h2 className=\"text-xl font-semibold\">Loading Comparison</h2>\n              <p className=\"text-muted-foreground\">\n                Analyzing your subscriptions...\n              </p>\n            </div>\n          </div>\n        </div>\n      </MobileLayout>\n    );\n  }\n\n  if (!hasPartnerConnection) {\n    return (\n      <MobileLayout>\n        <div className=\"p-mobile-padding\">\n          <div className=\"text-center py-12 space-y-4\">\n            <Users className=\"w-16 h-16 mx-auto text-muted-foreground\" />\n            <div className=\"space-y-2\">\n              <h2 className=\"text-xl font-semibold\">No Partner Connected</h2>\n              <p className=\"text-muted-foreground\">\n                Connect with a partner to start comparing subscriptions and find savings\n              </p>\n            </div>\n            <div className=\"space-y-3\">\n              <Button onClick={() => navigate(\"/link\")} className=\"bg-primary text-primary-foreground\">\n                Connect Partner\n              </Button>\n              <div className=\"pt-4\">\n                <h3 className=\"font-medium mb-3 text-foreground\">Your Current Subscriptions:</h3>\n                {userSubscriptions.length > 0 ? (\n                  <div className=\"space-y-2\">\n                    {userSubscriptions.map((service) => (\n                      <Card key={service.id} className=\"bg-gradient-card\">\n                        <CardContent className=\"p-3\">\n                          <div className=\"flex items-center justify-between\">\n                            <div className=\"flex items-center gap-3\">\n                              <div className=\"w-8 h-8 bg-white dark:bg-white rounded-lg flex items-center justify-center p-1 shadow-sm\">\n                                {service.logo_url ? (\n                                  <img \n                                    src={service.logo_url} \n                                    alt={`${service.name} logo`} \n                                    className=\"w-full h-full object-contain\"\n                                    onError={(e) => {\n                                      const target = e.target as HTMLImageElement;\n                                      target.style.display = 'none';\n                                      const parent = target.parentElement;\n                                      if (parent) {\n                                        parent.innerHTML = `<div class=\"w-full h-full bg-gradient-primary rounded flex items-center justify-center text-xs font-bold text-white\">${service.name.charAt(0)}</div>`;\n                                      }\n                                    }}\n                                  />\n                                ) : (\n                                  <div className=\"w-full h-full bg-gradient-primary rounded flex items-center justify-center text-xs font-bold text-white\">\n                                    {service.name.charAt(0)}\n                                  </div>\n                                )}\n                              </div>\n                              <span className=\"font-medium text-sm\">{service.name}</span>\n                            </div>\n                            {service.monthly_price && (\n                              <Badge variant=\"outline\" className=\"text-xs\">\n                                ${service.monthly_price}/mo\n                              </Badge>\n                            )}\n                          </div>\n                        </CardContent>\n                      </Card>\n                    ))}\n                  </div>\n                ) : (\n                  <p className=\"text-muted-foreground text-sm\">No active subscriptions</p>\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n      </MobileLayout>\n    );\n  }\n\n  return (\n    <MobileLayout>\n      <div className=\"p-mobile-padding space-y-6\">\n        {/* Header */}\n        <div className=\"space-y-4 animate-fade-in\">\n          <h1 className=\"text-2xl font-bold text-foreground\">Compare Subscriptions</h1>\n          <p className=\"text-muted-foreground text-sm\">\n            Comparing with {comparison.partnerName || \"your partner\"}\n          </p>\n        </div>\n\n        {/* Savings Summary */}\n        <Card className=\"bg-gradient-primary text-white\">\n          <CardContent className=\"p-4 text-center space-y-2\">\n            <DollarSign className=\"w-8 h-8 mx-auto mb-2\" />\n            <div>\n              <p className=\"text-white/80 text-sm\">Potential Monthly Savings</p>\n              <p className=\"text-3xl font-bold\">${comparison.totalSavings.toFixed(2)}</p>\n            </div>\n            <p className=\"text-white/80 text-xs\">\n              By sharing {comparison.bothHave.length} duplicate services\n            </p>\n          </CardContent>\n        </Card>\n\n        {/* Comparison Columns */}\n        <div className=\"space-y-4\">\n          {/* Both Have */}\n          <div className=\"space-y-3\">\n            <div className=\"flex items-center justify-between\">\n              <h2 className=\"text-lg font-semibold text-foreground\">Both Have</h2>\n              <Badge variant=\"destructive\" className=\"bg-subcircle-error\">\n                {comparison.bothHave.length} duplicates\n              </Badge>\n            </div>\n            \n            {comparison.bothHave.length > 0 ? (\n              <div className=\"space-y-2\">\n                {comparison.bothHave.map((service) => (\n                  <Card key={service.id} className=\"border-subcircle-error/20\">\n                    <CardContent className=\"p-3\">\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center gap-3\">\n                          <div className=\"w-10 h-10 bg-white dark:bg-white rounded-lg flex items-center justify-center p-1.5 shadow-service\">\n                            {service.logo_url ? (\n                              <img \n                                src={service.logo_url} \n                                alt={`${service.name} logo`} \n                                className=\"w-full h-full object-contain\"\n                                onError={(e) => {\n                                  const target = e.target as HTMLImageElement;\n                                  target.style.display = 'none';\n                                  const parent = target.parentElement;\n                                  if (parent) {\n                                    parent.innerHTML = `<div class=\"w-full h-full bg-gradient-primary rounded-lg flex items-center justify-center text-sm font-bold text-white\">${service.name.charAt(0)}</div>`;\n                                  }\n                                }}\n                              />\n                            ) : (\n                              <div className=\"w-full h-full bg-gradient-primary rounded-lg flex items-center justify-center text-sm font-bold text-white\">\n                                {service.name.charAt(0)}\n                              </div>\n                            )}\n                          </div>\n                          <div>\n                            <span className=\"font-semibold text-sm\">{service.name}</span>\n                            {service.category && (\n                              <p className=\"text-xs text-muted-foreground\">{service.category}</p>\n                            )}\n                          </div>\n                        </div>\n                        {service.monthly_price && (\n                          <Badge variant=\"outline\" className=\"text-xs\">\n                            ${service.monthly_price}/mo\n                          </Badge>\n                        )}\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            ) : (\n              <Card>\n                <CardContent className=\"p-4 text-center text-muted-foreground\">\n                  <p className=\"text-sm\">No shared subscriptions</p>\n                </CardContent>\n              </Card>\n            )}\n          </div>\n\n          {/* Only You */}\n          <div className=\"space-y-3\">\n            <div className=\"flex items-center justify-between\">\n              <h2 className=\"text-lg font-semibold text-foreground\">Only You</h2>\n              <Badge variant=\"secondary\">\n                {comparison.onlyYou.length} unique\n              </Badge>\n            </div>\n            \n            {comparison.onlyYou.length > 0 ? (\n              <div className=\"space-y-2\">\n                {comparison.onlyYou.map((service) => (\n                  <Card key={service.id}>\n                    <CardContent className=\"p-3\">\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center gap-3\">\n                          <div className=\"w-10 h-10 bg-white dark:bg-white rounded-lg flex items-center justify-center p-1.5 shadow-service\">\n                            {service.logo_url ? (\n                              <img \n                                src={service.logo_url} \n                                alt={`${service.name} logo`} \n                                className=\"w-full h-full object-contain\"\n                                onError={(e) => {\n                                  const target = e.target as HTMLImageElement;\n                                  target.style.display = 'none';\n                                  const parent = target.parentElement;\n                                  if (parent) {\n                                    parent.innerHTML = `<div class=\"w-full h-full bg-gradient-primary rounded-lg flex items-center justify-center text-sm font-bold text-white\">${service.name.charAt(0)}</div>`;\n                                  }\n                                }}\n                              />\n                            ) : (\n                              <div className=\"w-full h-full bg-gradient-primary rounded-lg flex items-center justify-center text-sm font-bold text-white\">\n                                {service.name.charAt(0)}\n                              </div>\n                            )}\n                          </div>\n                          <div>\n                            <span className=\"font-semibold text-sm\">{service.name}</span>\n                            {service.category && (\n                              <p className=\"text-xs text-muted-foreground\">{service.category}</p>\n                            )}\n                          </div>\n                        </div>\n                        {service.monthly_price && (\n                          <Badge variant=\"outline\" className=\"text-xs\">\n                            ${service.monthly_price}/mo\n                          </Badge>\n                        )}\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            ) : (\n              <Card>\n                <CardContent className=\"p-4 text-center text-muted-foreground\">\n                  <p className=\"text-sm\">No unique subscriptions</p>\n                </CardContent>\n              </Card>\n            )}\n          </div>\n\n          {/* Only Partner */}\n          <div className=\"space-y-3\">\n            <div className=\"flex items-center justify-between\">\n              <h2 className=\"text-lg font-semibold text-foreground\">Only Partner</h2>\n              <Badge variant=\"secondary\">\n                {comparison.onlyPartner.length} unique\n              </Badge>\n            </div>\n            \n            {comparison.onlyPartner.length > 0 ? (\n              <div className=\"space-y-2\">\n                {comparison.onlyPartner.map((service) => (\n                  <Card key={service.id}>\n                    <CardContent className=\"p-3\">\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center gap-3\">\n                          <div className=\"w-10 h-10 bg-white dark:bg-white rounded-lg flex items-center justify-center p-1.5 shadow-service\">\n                            {service.logo_url ? (\n                              <img \n                                src={service.logo_url} \n                                alt={`${service.name} logo`} \n                                className=\"w-full h-full object-contain\"\n                                onError={(e) => {\n                                  const target = e.target as HTMLImageElement;\n                                  target.style.display = 'none';\n                                  const parent = target.parentElement;\n                                  if (parent) {\n                                    parent.innerHTML = `<div class=\"w-full h-full bg-gradient-primary rounded-lg flex items-center justify-center text-sm font-bold text-white\">${service.name.charAt(0)}</div>`;\n                                  }\n                                }}\n                              />\n                            ) : (\n                              <div className=\"w-full h-full bg-gradient-primary rounded-lg flex items-center justify-center text-sm font-bold text-white\">\n                                {service.name.charAt(0)}\n                              </div>\n                            )}\n                          </div>\n                          <div>\n                            <span className=\"font-semibold text-sm\">{service.name}</span>\n                            {service.category && (\n                              <p className=\"text-xs text-muted-foreground\">{service.category}</p>\n                            )}\n                          </div>\n                        </div>\n                        {service.monthly_price && (\n                          <Badge variant=\"outline\" className=\"text-xs\">\n                            ${service.monthly_price}/mo\n                          </Badge>\n                        )}\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            ) : (\n              <Card>\n                <CardContent className=\"p-4 text-center text-muted-foreground\">\n                  <p className=\"text-sm\">No unique subscriptions</p>\n                </CardContent>\n              </Card>\n            )}\n          </div>\n        </div>\n\n        {/* Share Button */}\n        <Button\n          onClick={shareComparison}\n          className=\"w-full bg-accent text-accent-foreground py-6 text-base font-semibold\"\n          size=\"lg\"\n        >\n          <Share2 className=\"w-5 h-5 mr-2\" />\n          Share via SMS\n        </Button>\n\n        {/* Tips */}\n        <Card className=\"border-subcircle-cyan/20 bg-subcircle-cyan/5\">\n          <CardContent className=\"p-4\">\n            <div className=\"space-y-2\">\n              <h4 className=\"font-medium text-sm\">💡 Money-saving tips</h4>\n              <ul className=\"text-xs text-muted-foreground space-y-1\">\n                <li>• Cancel duplicate subscriptions you both have</li>\n                <li>• Share family plans to split costs</li>\n                <li>• Take turns paying for different services</li>\n                <li>• Try free trials before committing</li>\n              </ul>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </MobileLayout>\n  );\n}","size_bytes":24209},"src/components/ui/dialog.tsx":{"content":"import * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3835},"src/components/ui/drawer.tsx":{"content":"import * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3007},"src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\n\nexport function useAuth() {\n  const { data: user, isLoading } = useQuery({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n  };\n}","size_bytes":256},"src/pages/Index.tsx":{"content":"import { useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { Smartphone, Shield, Users, Zap } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { ThemeToggle } from '@/components/ThemeToggle';\n\nconst Index = () => {\n  const { user, loading } = useAuth();\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    if (!loading && user) {\n      // User is authenticated, redirect to dashboard\n      navigate('/dashboard');\n    }\n  }, [user, loading, navigate]);\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gradient-subtle\">\n        <div className=\"text-center space-y-4\">\n          <div className=\"w-16 h-16 bg-white dark:bg-white rounded-2xl mx-auto flex items-center justify-center shadow-elegant animate-pulse p-2\">\n            <img \n              src=\"/lovable-uploads/105cee16-9e7f-45ba-9b51-01a7a6f35377.png\" \n              alt=\"SubCircle Logo\" \n              className=\"w-full h-full object-contain\"\n            />\n          </div>\n          <p className=\"text-muted-foreground\">Loading SubCircle...</p>\n        </div>\n      </div>\n    );\n  }\n\n\n  return (\n    <div className=\"min-h-screen bg-gradient-subtle\">\n      {/* Theme Toggle */}\n      <div className=\"absolute top-4 left-4 z-10\">\n        <ThemeToggle />\n      </div>\n      \n      {/* Hero Section */}\n      <div className=\"container mx-auto px-4 py-16\">\n        <div className=\"text-center space-y-8\">\n          <div className=\"space-y-4\">\n            <div className=\"w-20 h-20 bg-white dark:bg-white rounded-3xl mx-auto flex items-center justify-center shadow-elegant p-3\">\n              <img \n                src=\"/lovable-uploads/105cee16-9e7f-45ba-9b51-01a7a6f35377.png\" \n                alt=\"SubCircle Logo\" \n                className=\"w-full h-full object-contain\"\n              />\n            </div>\n            <h1 className=\"text-5xl font-bold bg-gradient-primary bg-clip-text text-transparent\">\n              SubCircle\n            </h1>\n            <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto\">\n              Manage your streaming services securely and share subscriptions with friends and family - \n              all while keeping your credentials private.\n            </p>\n          </div>\n\n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n            <Button \n              size=\"lg\" \n              onClick={() => navigate('/auth')}\n              className=\"text-lg px-8 py-6\"\n            >\n              Get Started\n            </Button>\n            <Button \n              variant=\"outline\" \n              size=\"lg\"\n              onClick={() => navigate('/auth')}\n              className=\"text-lg px-8 py-6\"\n            >\n              Sign In\n            </Button>\n          </div>\n        </div>\n\n        {/* Features Grid */}\n        <div className=\"grid md:grid-cols-3 gap-6 mt-16\">\n          <Card className=\"shadow-card border-trust-blue/20\">\n            <CardHeader className=\"text-center\">\n              <div className=\"w-12 h-12 bg-trust-blue/10 rounded-xl mx-auto flex items-center justify-center mb-4\">\n                <Shield className=\"w-6 h-6 text-trust-blue\" />\n              </div>\n              <CardTitle>Privacy First</CardTitle>\n              <CardDescription>\n                Your streaming passwords never leave your device. Everything is encrypted locally.\n              </CardDescription>\n            </CardHeader>\n          </Card>\n\n          <Card className=\"shadow-card border-accent/20\">\n            <CardHeader className=\"text-center\">\n              <div className=\"w-12 h-12 bg-accent/10 rounded-xl mx-auto flex items-center justify-center mb-4\">\n                <Users className=\"w-6 h-6 text-accent\" />\n              </div>\n              <CardTitle>Share & Compare</CardTitle>\n              <CardDescription>\n                Connect with partners to see which services you both have and avoid duplicate subscriptions.\n              </CardDescription>\n            </CardHeader>\n          </Card>\n\n          <Card className=\"shadow-card border-primary/20\">\n            <CardHeader className=\"text-center\">\n              <div className=\"w-12 h-12 bg-primary/10 rounded-xl mx-auto flex items-center justify-center mb-4\">\n                <Zap className=\"w-6 h-6 text-primary\" />\n              </div>\n              <CardTitle>Smart Management</CardTitle>\n              <CardDescription>\n                Track all your streaming subscriptions in one place with easy management tools.\n              </CardDescription>\n            </CardHeader>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Index;\n","size_bytes":4842},"src/components/ui/hover-card.tsx":{"content":"import * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1184},"src/vite-env.d.ts":{"content":"/// <reference types=\"vite/client\" />\n","size_bytes":38},"src/components/ui/collapsible.tsx":{"content":"import * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":315},"src/components/mobile/BottomNavigation.tsx":{"content":"import { Grid3X3, Vault, Link, BarChart3, Settings, Plus, LogOut } from \"lucide-react\";\nimport { NavLink, useLocation, useNavigate } from \"react-router-dom\";\nimport { cn } from \"@/lib/utils\";\nimport { useAuth } from \"@/contexts/AuthContext\";\n\nconst navItems = [\n  { icon: Grid3X3, label: \"Catalog\", path: \"/\" },\n  { icon: Vault, label: \"Vault\", path: \"/vault\" },\n  { icon: Plus, label: \"Add\", path: \"/subscriptions/add\" },\n  { icon: BarChart3, label: \"Compare\", path: \"/compare\" },\n  { icon: Settings, label: \"Settings\", path: \"/settings\" },\n];\n\nexport const BottomNavigation = () => {\n  const location = useLocation();\n  const navigate = useNavigate();\n  const { isDemoMode, exitDemoMode } = useAuth();\n\n  const handleExitDemo = () => {\n    exitDemoMode();\n    navigate('/onboarding');\n  };\n\n  return (\n    <nav className=\"fixed bottom-0 left-0 right-0 bg-card border-t border-border shadow-card z-50\">\n      <div className=\"flex justify-around items-center py-2 px-4 max-w-md mx-auto\">\n        {navItems.map(({ icon: Icon, label, path }) => {\n          const isActive = location.pathname === path;\n          \n          return (\n            <NavLink\n              key={path}\n              to={path}\n              className={cn(\n                \"flex flex-col items-center gap-1 py-2 px-3 rounded-lg relative\",\n                \"min-w-0 flex-1 transition-all duration-200 ease-smooth\",\n                \"transform active:scale-95 hover:scale-105\",\n                isActive \n                  ? \"text-primary bg-primary/10 shadow-service scale-105\" \n                  : \"text-muted-foreground hover:text-foreground hover:bg-muted/50\"\n              )}\n            >\n              <div className=\"relative\">\n                <Icon className=\"w-5 h-5 shrink-0\" />\n              </div>\n              <span className=\"text-xs font-medium truncate\">{label}</span>\n            </NavLink>\n          );\n        })}\n        \n        {/* Exit Demo button - only shows in demo mode */}\n        {isDemoMode && (\n          <button\n            onClick={handleExitDemo}\n            className={cn(\n              \"flex flex-col items-center gap-1 py-2 px-3 rounded-lg relative\",\n              \"min-w-0 flex-1 transition-all duration-200 ease-smooth\",\n              \"transform active:scale-95 hover:scale-105\",\n              \"text-orange-600 hover:text-orange-700 hover:bg-orange-50 dark:text-orange-400 dark:hover:text-orange-300 dark:hover:bg-orange-950/50\"\n            )}\n          >\n            <div className=\"relative\">\n              <LogOut className=\"w-5 h-5 shrink-0\" />\n            </div>\n            <span className=\"text-xs font-medium truncate\">Exit Demo</span>\n          </button>\n        )}\n      </div>\n    </nav>\n  );\n};","size_bytes":2714},"src/hooks/use-subscription-sharing.ts":{"content":"import { useState } from \"react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport interface ShareSettings {\n  shared_with_partners: boolean;\n  share_credentials: boolean;\n}\n\nexport const useSubscriptionSharing = () => {\n  const [loading, setLoading] = useState(false);\n  const { toast } = useToast();\n\n  const updateSharingSettings = async (\n    subscriptionId: string, \n    settings: ShareSettings\n  ) => {\n    setLoading(true);\n    try {\n      // TODO: Replace with backend API call\n      // For now, just show success message\n      \n      toast({\n        title: \"Sharing Updated\",\n        description: settings.shared_with_partners \n          ? \"Subscription is now shared with partners (mock)\"\n          : \"Subscription sharing disabled (mock)\",\n      });\n\n      return { success: true };\n    } catch (error) {\n      console.error(\"Error updating sharing settings:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to update sharing settings\",\n        variant: \"destructive\",\n      });\n      return { success: false };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const getPartnerSubscriptions = async (partnerId: string) => {\n    try {\n      // TODO: Replace with backend API call\n      // For now, return empty array\n      return { data: [], error: null };\n    } catch (error) {\n      console.error(\"Error fetching partner subscriptions:\", error);\n      return { data: null, error };\n    }\n  };\n\n  return {\n    loading,\n    updateSharingSettings,\n    getPartnerSubscriptions,\n  };\n};","size_bytes":1532},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"../shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":485},"src/components/ThemeToggle.tsx":{"content":"import { Moon, Sun, Monitor } from \"lucide-react\"\nimport { Button } from \"@/components/ui/button\"\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\"\nimport { useTheme } from \"@/contexts/ThemeProvider\"\n\nexport function ThemeToggle() {\n  const { theme, setTheme } = useTheme()\n\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <Button variant=\"outline\" size=\"sm\" className=\"w-9 px-0\">\n          <Sun className=\"h-[1.2rem] w-[1.2rem] rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0\" />\n          <Moon className=\"absolute h-[1.2rem] w-[1.2rem] rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100\" />\n          <span className=\"sr-only\">Toggle theme</span>\n        </Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent align=\"end\">\n        <DropdownMenuItem onClick={() => setTheme(\"light\")} className=\"cursor-pointer\">\n          <Sun className=\"mr-2 h-4 w-4\" />\n          <span>Light</span>\n        </DropdownMenuItem>\n        <DropdownMenuItem onClick={() => setTheme(\"dark\")} className=\"cursor-pointer\">\n          <Moon className=\"mr-2 h-4 w-4\" />\n          <span>Dark</span>\n        </DropdownMenuItem>\n        <DropdownMenuItem onClick={() => setTheme(\"system\")} className=\"cursor-pointer\">\n          <Monitor className=\"mr-2 h-4 w-4\" />\n          <span>System</span>\n        </DropdownMenuItem>\n      </DropdownMenuContent>\n    </DropdownMenu>\n  )\n}","size_bytes":1492},"src/components/ui/avatar.tsx":{"content":"import * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1405},"src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h3\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <p\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1877},"src/components/ui/resizable.tsx":{"content":"import { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1709},"start-production.sh":{"content":"#!/bin/bash\n\n# Production startup script optimized for autoscale deployment\n# Skips build step since deployment should use pre-built assets\n\n# Use PORT environment variable or default to 8080 for autoscale deployment\nPORT=${PORT:-8080}\n\necho \"🚀 Starting Express server in production mode...\"\necho \"📱 Frontend: http://0.0.0.0:$PORT\"\necho \"🛠️  API: http://0.0.0.0:$PORT/api\"\necho \"🔗 Health check: http://0.0.0.0:$PORT/health\"\necho \"\"\n\n# Set production environment\nexport NODE_ENV=production\n\n# Start server directly without building (deployment should have pre-built assets)\ntsx server/index.ts","size_bytes":606},"src/hooks/use-notifications.ts":{"content":"import { useState, useEffect } from 'react';\nimport { useToast } from '@/hooks/use-toast';\n\nexport interface Notification {\n  id: string;\n  type: 'partner_request' | 'partner_accepted' | 'partner_rejected' | 'partner_connected' | 'credential_shared' | 'credential_accessed' | 'subscription_renewal' | 'subscription_cost_change' | 'system' | 'security';\n  title: string;\n  message: string;\n  data?: any;\n  read: boolean;\n  created_at: string;\n  priority?: 'low' | 'medium' | 'high' | 'urgent';\n  category?: 'partner' | 'subscription' | 'security' | 'system';\n  action_url?: string;\n}\n\nexport const useNotifications = () => {\n  const [notifications, setNotifications] = useState<Notification[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [unreadCount, setUnreadCount] = useState(0);\n  const [filter, setFilter] = useState<string>('all');\n  const { toast } = useToast();\n\n  const fetchNotifications = async () => {\n    try {\n      // TODO: Replace with backend API call\n      // For now, use empty array to get app working\n      setNotifications([]);\n      setUnreadCount(0);\n    } catch (error) {\n      console.error('Error fetching notifications:', error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to load notifications\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const markAsRead = async (id: string) => {\n    try {\n      // TODO: Replace with backend API call\n      // For now, just update local state\n      setNotifications(prev => \n        prev.map(n => n.id === id ? { ...n, read: true } : n)\n      );\n      setUnreadCount(prev => Math.max(0, prev - 1));\n    } catch (error) {\n      console.error('Error marking notification as read:', error);\n    }\n  };\n\n  const markAllAsRead = async () => {\n    try {\n      // TODO: Replace with backend API call\n      // For now, just update local state\n      setNotifications(prev => prev.map(n => ({ ...n, read: true })));\n      setUnreadCount(0);\n    } catch (error) {\n      console.error('Error marking all notifications as read:', error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to mark notifications as read\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  useEffect(() => {\n    fetchNotifications();\n    // TODO: Add real-time subscriptions when backend is ready\n  }, [toast]);\n\n  const filteredNotifications = filter === 'all' \n    ? notifications \n    : notifications.filter(n => n.category === filter);\n\n  const deleteNotification = async (id: string) => {\n    try {\n      // TODO: Replace with backend API call\n      // For now, just update local state\n      setNotifications(prev => prev.filter(n => n.id !== id));\n      if (notifications.find(n => n.id === id && !n.read)) {\n        setUnreadCount(prev => Math.max(0, prev - 1));\n      }\n    } catch (error) {\n      console.error('Error deleting notification:', error);\n    }\n  };\n\n  const clearAllNotifications = async () => {\n    try {\n      // TODO: Replace with backend API call\n      // For now, just update local state\n      setNotifications([]);\n      setUnreadCount(0);\n    } catch (error) {\n      console.error('Error clearing notifications:', error);\n    }\n  };\n\n  return {\n    notifications: filteredNotifications,\n    allNotifications: notifications,\n    loading,\n    unreadCount,\n    filter,\n    setFilter,\n    markAsRead,\n    markAllAsRead,\n    deleteNotification,\n    clearAllNotifications,\n    fetchNotifications\n  };\n};","size_bytes":3475},"src/components/ui/chart.tsx":{"content":"import * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([_, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item.dataKey || item.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10466},"src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"src/components/ui/calendar.tsx":{"content":"import * as React from \"react\";\nimport { ChevronLeft, ChevronRight } from \"lucide-react\";\nimport { DayPicker } from \"react-day-picker\";\n\nimport { cn } from \"@/lib/utils\";\nimport { buttonVariants } from \"@/components/ui/button\";\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>;\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground opacity-50 aria-selected:bg-accent/50 aria-selected:text-muted-foreground aria-selected:opacity-30\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ ..._props }) => <ChevronLeft className=\"h-4 w-4\" />,\n        IconRight: ({ ..._props }) => <ChevronRight className=\"h-4 w-4\" />,\n      }}\n      {...props}\n    />\n  );\n}\nCalendar.displayName = \"Calendar\";\n\nexport { Calendar };\n","size_bytes":2620},"src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"src/components/ui/select.tsx":{"content":"import * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5615},"src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"server/routes/notifications.ts":{"content":"import { Router, Request, Response } from 'express';\nimport { db } from '../db';\nimport { notifications, notificationPreferences } from '../../shared/schema';\nimport { eq } from 'drizzle-orm';\n\nconst router = Router();\n\n// Send notification email (simplified version)\nrouter.post('/send-email', async (req: Request, res: Response) => {\n  try {\n    const { to, type, title, message, priority, user_id } = req.body;\n    \n    if (!to || !title || !message) {\n      return res.status(400).json({ error: \"Missing required fields: to, title, message\" });\n    }\n\n    // If user_id is provided, check their preferences\n    if (user_id) {\n      const preferences = await db.select()\n        .from(notificationPreferences)\n        .where(eq(notificationPreferences.userId, user_id))\n        .limit(1);\n\n      if (preferences.length > 0 && !preferences[0].emailEnabled) {\n        console.log('Email notifications disabled for user, skipping...');\n        return res.json({ \n          success: true, \n          skipped: true,\n          reason: 'Email notifications disabled'\n        });\n      }\n    }\n\n    // For now, just log the email that would be sent\n    console.log(\"Would send notification email:\", { to, type, title, priority });\n\n    res.json({ \n      success: true, \n      message: \"Email notification logged (not actually sent in demo)\" \n    });\n  } catch (error: any) {\n    console.error(\"Error in send-notification-email:\", error);\n    res.status(500).json({ error: error.message });\n  }\n});\n\n// Get user notifications\nrouter.get('/:userId', async (req: Request, res: Response) => {\n  try {\n    const { userId } = req.params;\n\n    const userNotifications = await db.select()\n      .from(notifications)\n      .where(eq(notifications.userId, userId))\n      .orderBy(notifications.createdAt);\n\n    res.json({ success: true, notifications: userNotifications });\n  } catch (error: any) {\n    console.error(\"Error getting notifications:\", error);\n    res.status(500).json({ error: error.message });\n  }\n});\n\n// Create notification\nrouter.post('/', async (req: Request, res: Response) => {\n  try {\n    const { userId, type, title, message, data, priority, category, actionUrl } = req.body;\n\n    if (!userId || !type || !title || !message) {\n      return res.status(400).json({ error: \"Missing required fields\" });\n    }\n\n    const result = await db.insert(notifications)\n      .values({\n        userId,\n        type,\n        title,\n        message,\n        data: data || null,\n        priority: priority || 'low',\n        category: category || 'system',\n        actionUrl: actionUrl || null,\n      })\n      .returning();\n\n    res.json({ success: true, notification: result[0] });\n  } catch (error: any) {\n    console.error(\"Error creating notification:\", error);\n    res.status(500).json({ error: error.message });\n  }\n});\n\nexport default router;","size_bytes":2840},"server/replitAuth.ts":{"content":"// Blueprint: javascript_log_in_with_replit - Official Replit Auth implementation\nimport * as client from \"openid-client\";\n// @ts-ignore\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: true,\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env.REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};","size_bytes":4311},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nexport default defineConfig({\n  out: \"./drizzle\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL!,\n  },\n});\n","size_bytes":216},"eslint.config.js":{"content":"import js from \"@eslint/js\";\nimport globals from \"globals\";\nimport reactHooks from \"eslint-plugin-react-hooks\";\nimport reactRefresh from \"eslint-plugin-react-refresh\";\nimport tseslint from \"typescript-eslint\";\n\nexport default tseslint.config(\n  { ignores: [\"dist\"] },\n  {\n    extends: [js.configs.recommended, ...tseslint.configs.recommended],\n    files: [\"**/*.{ts,tsx}\"],\n    languageOptions: {\n      ecmaVersion: 2020,\n      globals: globals.browser,\n    },\n    plugins: {\n      \"react-hooks\": reactHooks,\n      \"react-refresh\": reactRefresh,\n    },\n    rules: {\n      ...reactHooks.configs.recommended.rules,\n      \"react-refresh/only-export-components\": [\n        \"warn\",\n        { allowConstantExport: true },\n      ],\n      \"@typescript-eslint/no-unused-vars\": \"off\",\n    },\n  }\n);\n","size_bytes":789},"src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"src/pages/mobile/Onboarding.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useEffect } from \"react\";\nimport { Eye, Shield } from \"lucide-react\";\n\nexport default function Onboarding() {\n  const { user, signInWithGoogle, signInWithReplit, enterDemoMode } = useAuth();\n  const navigate = useNavigate();\n\n  // Redirect if already authenticated\n  useEffect(() => {\n    if (user) {\n      navigate(\"/\");\n    }\n  }, [user, navigate]);\n\n  const handleReplitSignIn = async () => {\n    try {\n      signInWithReplit();\n    } catch (error) {\n      console.error(\"Replit sign in failed:\", error);\n    }\n  };\n\n  const handleGoogleSignIn = async () => {\n    try {\n      signInWithGoogle();\n    } catch (error) {\n      console.error(\"Google sign in failed:\", error);\n    }\n  };\n\n  const handleDemoMode = () => {\n    enterDemoMode();\n    navigate(\"/\");\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-primary flex flex-col justify-center items-center p-mobile-padding text-center\">\n      {/* Logo and branding */}\n      <div className=\"mb-8 space-y-4\">\n        <div className=\"w-24 h-24 bg-white rounded-full mx-auto flex items-center justify-center shadow-elegant p-3\">\n          <img \n            src=\"/lovable-uploads/105cee16-9e7f-45ba-9b51-01a7a6f35377.png\" \n            alt=\"SubCircle Logo\" \n            className=\"w-full h-full object-contain\"\n          />\n        </div>\n        \n        <div className=\"space-y-2\">\n          <h1 className=\"text-4xl font-bold text-white\">SubCircle</h1>\n          <p className=\"text-lg text-white/90 font-medium\">Track. Share. Never double-pay.</p>\n        </div>\n      </div>\n\n      {/* Subheadline */}\n      <p className=\"text-white/80 text-base mb-12 max-w-sm leading-relaxed px-4\">\n        Keep your streaming subscriptions in sync with friends or family.\n      </p>\n\n      {/* Authentication Options */}\n      <div className=\"w-full max-w-sm space-y-4\">\n        {/* Primary: Replit Auth */}\n        <Button\n          onClick={handleReplitSignIn}\n          className=\"w-full bg-white text-black hover:bg-gray-100 shadow-card py-6 text-base font-semibold rounded-lg border-2 border-white/20\"\n          size=\"lg\"\n          data-testid=\"button-replit-signin\"\n        >\n          <svg className=\"w-5 h-5 mr-3\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n            <path d=\"M7.27 2.75v7.5h7.5v-7.5h-7.5zM16.73 2.75V12H7.27v7.25h7.5V24h1.96V2.75h-1.96z\" fill=\"#F26207\"/>\n          </svg>\n          Continue with Replit\n        </Button>\n        \n        {/* Secondary: Google Auth */}\n        <Button\n          onClick={handleGoogleSignIn}\n          variant=\"outline\"\n          className=\"w-full border-white/30 text-white hover:bg-white/10 hover:text-white py-6 text-base font-medium rounded-lg\"\n          size=\"lg\"\n          data-testid=\"button-google-signin\"\n        >\n          <svg className=\"w-4 h-4 mr-3\" viewBox=\"0 0 24 24\">\n            <path fill=\"#4285F4\" d=\"M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z\"/>\n            <path fill=\"#34A853\" d=\"M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z\"/>\n            <path fill=\"#FBBC05\" d=\"M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z\"/>\n            <path fill=\"#EA4335\" d=\"M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z\"/>\n          </svg>\n          Sign in with Google\n        </Button>\n        \n        {/* Demo Mode */}\n        <div className=\"flex items-center gap-4 text-white/60 text-sm\">\n          <div className=\"flex-1 h-px bg-white/20\"></div>\n          <span>or explore features</span>\n          <div className=\"flex-1 h-px bg-white/20\"></div>\n        </div>\n        \n        <Button\n          onClick={handleDemoMode}\n          variant=\"outline\"\n          className=\"w-full border-white/30 text-white hover:bg-white/10 hover:text-white py-6 text-base font-medium rounded-lg\"\n          size=\"lg\"\n          data-testid=\"button-demo-mode\"\n        >\n          <Eye className=\"w-4 h-4 mr-3\" />\n          Try Demo Mode\n        </Button>\n      </div>\n\n      {/* Footer */}\n      <div className=\"mt-12 text-white/60 text-sm text-center space-y-2\">\n        <p>By continuing, you agree to our</p>\n        <div className=\"space-x-4\">\n          <a href=\"#\" className=\"underline hover:text-white\">Terms of Service</a>\n          <a href=\"#\" className=\"underline hover:text-white\">Privacy Policy</a>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":4734},"server/storage.ts":{"content":"import {\n  users,\n  type User,\n  type UpsertUser,\n} from \"../shared/schema\";\nimport { db } from \"./db\";\nimport { eq } from \"drizzle-orm\";\n\n// Interface for storage operations\nexport interface IStorage {\n  // User operations\n  // (IMPORTANT) these user operations are mandatory for Replit Auth.\n  getUser(id: string): Promise<User | undefined>;\n  upsertUser(user: UpsertUser): Promise<User>;\n  // Other operations\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations\n  // (IMPORTANT) these user operations are mandatory for Replit Auth.\n\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .onConflictDoUpdate({\n        target: users.id,\n        set: {\n          ...userData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return user;\n  }\n\n  // Other operations\n}\n\nexport const storage = new DatabaseStorage();","size_bytes":1100},"src/components/ui/notification-list.tsx":{"content":"import { formatDistanceToNow } from 'date-fns';\nimport { Button } from '@/components/ui/button';\nimport { ScrollArea } from '@/components/ui/scroll-area';\nimport { Badge } from '@/components/ui/badge';\nimport { useNotifications } from '@/hooks/use-notifications';\nimport { \n  CheckCheck, \n  Users, \n  UserX, \n  UserCheck, \n  Shield, \n  Key, \n  Calendar, \n  TrendingUp, \n  Bell,\n  AlertTriangle \n} from 'lucide-react';\n\nconst getNotificationIcon = (type: string, priority?: string) => {\n  const baseClass = \"h-4 w-4\";\n  const urgentClass = priority === 'urgent' ? \"animate-pulse\" : \"\";\n  \n  switch (type) {\n    case 'partner_accepted':\n      return <UserCheck className={`${baseClass} text-emerald-500 ${urgentClass}`} />;\n    case 'partner_connected':\n      return <Users className={`${baseClass} text-primary ${urgentClass}`} />;\n    case 'partner_rejected':\n      return <UserX className={`${baseClass} text-destructive ${urgentClass}`} />;\n    case 'partner_request':\n      return <Users className={`${baseClass} text-subcircle-indigo ${urgentClass}`} />;\n    case 'credential_shared':\n      return <Key className={`${baseClass} text-subcircle-cyan ${urgentClass}`} />;\n    case 'credential_accessed':\n      return <Shield className={`${baseClass} text-subcircle-teal ${urgentClass}`} />;\n    case 'subscription_renewal':\n      return <Calendar className={`${baseClass} text-amber-500 ${urgentClass}`} />;\n    case 'subscription_cost_change':\n      return <TrendingUp className={`${baseClass} text-orange-500 ${urgentClass}`} />;\n    case 'security':\n      return <Shield className={`${baseClass} text-subcircle-error ${urgentClass}`} />;\n    case 'system':\n      return <Bell className={`${baseClass} text-subcircle-indigo ${urgentClass}`} />;\n    default:\n      return <Bell className={`${baseClass} text-muted-foreground ${urgentClass}`} />;\n  }\n};\n\nexport const NotificationList = () => {\n  const { notifications, loading, unreadCount, markAsRead, markAllAsRead } = useNotifications();\n\n  if (loading) {\n    return (\n      <div className=\"p-4 text-center text-muted-foreground\">\n        Loading notifications...\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"w-full\">\n      <div className=\"flex items-center justify-between p-4 border-b\">\n        <h3 className=\"font-semibold\">Notifications</h3>\n        {unreadCount > 0 && (\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={markAllAsRead}\n            className=\"text-xs\"\n          >\n            <CheckCheck className=\"h-3 w-3 mr-1\" />\n            Mark all read\n          </Button>\n        )}\n      </div>\n\n      <ScrollArea className=\"h-96\">\n        {notifications.length === 0 ? (\n          <div className=\"p-4 text-center text-muted-foreground\">\n            No notifications yet\n          </div>\n        ) : (\n          <div className=\"divide-y\">\n            {notifications.map((notification) => (\n              <div\n                key={notification.id}\n                className={`p-4 hover:bg-accent/50 cursor-pointer transition-colors ${\n                  !notification.read ? 'bg-accent/20' : ''\n                }`}\n                onClick={() => !notification.read && markAsRead(notification.id)}\n              >\n                <div className=\"flex items-start gap-3\">\n                  <div className=\"mt-0.5\">\n                    {getNotificationIcon(notification.type, notification.priority)}\n                  </div>\n                  <div className=\"flex-1 min-w-0\">\n                    <div className=\"flex items-center gap-2 mb-1\">\n                      <p className=\"font-medium text-sm truncate\">\n                        {notification.title}\n                      </p>\n                      {!notification.read && (\n                        <Badge variant=\"secondary\" className=\"h-5 px-1.5 text-xs\">\n                          New\n                        </Badge>\n                      )}\n                      {notification.priority === 'urgent' && (\n                        <Badge className=\"bg-subcircle-error text-white h-5 px-1.5 text-xs animate-pulse\">\n                          <AlertTriangle className=\"h-3 w-3 mr-1\" />\n                          Urgent\n                        </Badge>\n                      )}\n                      {notification.priority === 'high' && (\n                        <Badge className=\"bg-orange-500 text-white h-5 px-1.5 text-xs\">\n                          High\n                        </Badge>\n                      )}\n                    </div>\n                    <p className=\"text-sm text-muted-foreground mb-2\">\n                      {notification.message}\n                    </p>\n                    <p className=\"text-xs text-muted-foreground\">\n                      {formatDistanceToNow(new Date(notification.created_at), { addSuffix: true })}\n                    </p>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        )}\n      </ScrollArea>\n    </div>\n  );\n};","size_bytes":4990},"src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* Definition of the design system. All colors, gradients, fonts, etc should be defined here. \nAll colors MUST be HSL.\n*/\n\n@layer base {\n  :root {\n    /* SubCircle Design System */\n    --background: 0 0% 100%;\n    --foreground: 223 47% 11%;\n\n    --card: 0 0% 100%;\n    --card-foreground: 223 47% 11%;\n\n    --popover: 0 0% 100%;\n    --popover-foreground: 223 47% 11%;\n\n    /* Primary: Teal #0F8B8D */\n    --primary: 182 82% 31%;\n    --primary-foreground: 0 0% 100%;\n\n    /* Secondary: Light gray for cards */\n    --secondary: 220 13% 95%;\n    --secondary-foreground: 223 47% 11%;\n\n    --muted: 220 13% 95%;\n    --muted-foreground: 215 16% 47%;\n\n    /* Accent: Indigo #6366F1 for primary buttons */\n    --accent: 239 84% 67%;\n    --accent-foreground: 0 0% 100%;\n\n    /* SubCircle brand colors */\n    --subcircle-teal: 182 82% 31%;\n    --subcircle-teal-foreground: 0 0% 100%;\n    \n    --subcircle-indigo: 239 84% 67%;\n    --subcircle-indigo-foreground: 0 0% 100%;\n    \n    --subcircle-cyan: 188 95% 43%;\n    --subcircle-cyan-foreground: 0 0% 100%;\n    \n    --subcircle-error: 359 70% 55%;\n    --subcircle-error-foreground: 0 0% 100%;\n    \n    /* Enhanced Gradients */\n    --gradient-primary: linear-gradient(135deg, hsl(182 82% 31%), hsl(182 82% 25%));\n    --gradient-accent: linear-gradient(135deg, hsl(239 84% 67%), hsl(239 84% 57%));\n    --gradient-subtle: linear-gradient(180deg, hsl(0 0% 100%), hsl(220 13% 98%));\n    --gradient-success: linear-gradient(135deg, hsl(142 76% 36%), hsl(142 76% 30%));\n    --gradient-card: linear-gradient(145deg, hsl(0 0% 100%), hsl(220 13% 99%));\n    \n    /* Enhanced Shadows */\n    --shadow-elegant: 0 10px 30px -10px hsl(182 82% 31% / 0.2);\n    --shadow-card: 0 4px 20px -4px hsl(223 47% 11% / 0.08);\n    --shadow-card-hover: 0 8px 30px -8px hsl(223 47% 11% / 0.15);\n    --shadow-glow: 0 0 40px hsl(239 84% 67% / 0.3);\n    --shadow-service: 0 2px 12px -2px hsl(182 82% 31% / 0.12);\n    --shadow-vault: 0 4px 16px -4px hsl(239 84% 67% / 0.15);\n    \n    /* Enhanced Transitions */\n    --transition-smooth: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n    --transition-bounce: all 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275);\n    --transition-fast: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);\n\n    /* Error states */\n    --destructive: 359 70% 55%;\n    --destructive-foreground: 0 0% 100%;\n\n    /* Borders - light gray #E3E6EA */\n    --border: 220 13% 91%;\n    --input: 220 13% 91%;\n    --ring: 182 82% 31%;\n\n    /* 6px rounded corners */\n    --radius: 0.375rem;\n\n    --sidebar-background: 0 0% 98%;\n\n    --sidebar-foreground: 240 5.3% 26.1%;\n\n    --sidebar-primary: 240 5.9% 10%;\n\n    --sidebar-primary-foreground: 0 0% 98%;\n\n    --sidebar-accent: 240 4.8% 95.9%;\n\n    --sidebar-accent-foreground: 240 5.9% 10%;\n\n    --sidebar-border: 220 13% 91%;\n\n    --sidebar-ring: 217.2 91.2% 59.8%;\n  }\n\n  .dark {\n    /* Enhanced dark mode with better contrast ratios */\n    --background: 220 15% 8%;\n    --foreground: 0 0% 95%;\n\n    /* Improved card colors for better contrast */\n    --card: 220 15% 12%;\n    --card-foreground: 0 0% 95%;\n\n    --popover: 220 15% 12%;\n    --popover-foreground: 0 0% 95%;\n\n    /* Keep teal primary in dark mode */\n    --primary: 182 82% 35%;\n    --primary-foreground: 0 0% 100%;\n\n    /* Better secondary colors */\n    --secondary: 220 15% 18%;\n    --secondary-foreground: 0 0% 90%;\n\n    /* Improved muted colors for better readability */\n    --muted: 220 15% 16%;\n    --muted-foreground: 0 0% 75%;\n\n    /* Brighter accent for better visibility */\n    --accent: 239 84% 72%;\n    --accent-foreground: 220 15% 8%;\n\n    /* Enhanced SubCircle brand colors for dark mode */\n    --subcircle-teal: 182 82% 35%;\n    --subcircle-teal-foreground: 0 0% 100%;\n    \n    --subcircle-indigo: 239 84% 72%;\n    --subcircle-indigo-foreground: 220 15% 8%;\n    \n    --subcircle-cyan: 188 95% 50%;\n    --subcircle-cyan-foreground: 220 15% 8%;\n    \n    --subcircle-error: 359 70% 60%;\n    --subcircle-error-foreground: 0 0% 100%;\n\n    /* Enhanced dark mode gradients */\n    --gradient-primary: linear-gradient(135deg, hsl(182 82% 35%), hsl(182 82% 30%));\n    --gradient-accent: linear-gradient(135deg, hsl(239 84% 72%), hsl(239 84% 62%));\n    --gradient-subtle: linear-gradient(180deg, hsl(220 15% 12%), hsl(220 15% 10%));\n    --gradient-success: linear-gradient(135deg, hsl(142 76% 40%), hsl(142 76% 35%));\n    --gradient-card: linear-gradient(145deg, hsl(220 15% 12%), hsl(220 15% 10%));\n    \n    /* Enhanced dark mode shadows */\n    --shadow-elegant: 0 10px 30px -10px hsl(0 0% 0% / 0.5);\n    --shadow-card: 0 4px 20px -4px hsl(0 0% 0% / 0.3);\n    --shadow-card-hover: 0 8px 30px -8px hsl(0 0% 0% / 0.4);\n    --shadow-glow: 0 0 40px hsl(239 84% 72% / 0.4);\n    --shadow-service: 0 2px 12px -2px hsl(0 0% 0% / 0.25);\n    --shadow-vault: 0 4px 16px -4px hsl(239 84% 72% / 0.25);\n\n    --destructive: 359 70% 60%;\n    --destructive-foreground: 0 0% 100%;\n\n    /* Improved border colors */\n    --border: 220 15% 22%;\n    --input: 220 15% 22%;\n    --ring: 182 82% 35%;\n    \n    --sidebar-background: 220 15% 10%;\n    --sidebar-foreground: 0 0% 90%;\n    --sidebar-primary: 239 84% 72%;\n    --sidebar-primary-foreground: 220 15% 8%;\n    --sidebar-accent: 220 15% 16%;\n    --sidebar-accent-foreground: 0 0% 90%;\n    --sidebar-border: 220 15% 22%;\n    --sidebar-ring: 182 82% 35%;\n  }\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply bg-background text-foreground;\n  }\n}","size_bytes":5470},"src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"start-server.sh":{"content":"#!/bin/bash\n\n# Full-stack application startup script for DEVELOPMENT\n# Builds the React frontend and starts the Express server on port 5000\n# Deployment uses npm start instead, which defaults to 8080\n\nexport PORT=5000\n\necho \"🔧 Building React frontend...\"\nnpm run build\n\nif [ $? -eq 0 ]; then\n  echo \"✅ Frontend build successful!\"\n  echo \"🚀 Starting Express server on port $PORT...\"\n  echo \"📱 Frontend: http://0.0.0.0:$PORT\"\n  echo \"🛠️  API: http://0.0.0.0:$PORT/api\"\n  echo \"🔗 Health check: http://0.0.0.0:$PORT/health\"\n  echo \"\"\n  tsx server/index.ts\nelse\n  echo \"❌ Frontend build failed!\"\n  exit 1\nfi","size_bytes":623},"src/components/ui/progress.tsx":{"content":"import * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":777},"src/pages/Auth.tsx":{"content":"import React, { useState } from 'react';\nimport { Shield } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\n\nconst AuthPage = () => {\n  const [loading, setLoading] = useState(false);\n\n  const handleGoogleSignIn = () => {\n    setLoading(true);\n    // Break out of Replit preview iframe and redirect to login endpoint\n    const url = '/api/login';\n    if (window.top && window.top !== window.self) {\n      // We're in an iframe (Replit preview), redirect the top window\n      window.top.location.href = url;\n    } else {\n      // Normal window, redirect normally\n      window.location.href = url;\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-subtle flex items-center justify-center p-4\">\n      <div className=\"w-full max-w-md space-y-6\">\n        {/* App branding */}\n        <div className=\"text-center space-y-2\">\n          <div className=\"w-16 h-16 bg-white dark:bg-white rounded-2xl mx-auto flex items-center justify-center shadow-elegant p-3\">\n            <img \n              src=\"/lovable-uploads/105cee16-9e7f-45ba-9b51-01a7a6f35377.png\" \n              alt=\"SubCircle Logo\" \n              className=\"w-full h-full object-contain\"\n            />\n          </div>\n          <h1 className=\"text-3xl font-bold text-foreground\">SubCircle</h1>\n          <p className=\"text-muted-foreground\">Your secure streaming vault</p>\n        </div>\n\n        {/* Privacy notice */}\n        <Card className=\"border-trust-blue/20 bg-trust-blue/5\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-start space-x-3\">\n              <Shield className=\"w-5 h-5 text-trust-blue mt-0.5\" />\n              <div className=\"space-y-1\">\n                <p className=\"text-sm font-medium text-trust-blue\">Privacy First</p>\n                <p className=\"text-xs text-trust-blue/80\">\n                  Your streaming credentials are stored locally on your device and never uploaded to the cloud.\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Auth form */}\n        <Card className=\"shadow-card\">\n          <CardHeader className=\"space-y-1 text-center\">\n            <CardTitle>Welcome to SubCircle</CardTitle>\n            <CardDescription>\n              Sign in with your Google account to get started\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <Button\n              data-testid=\"button-google-signin\"\n              onClick={handleGoogleSignIn}\n              disabled={loading}\n              className=\"w-full\"\n              size=\"lg\"\n              asChild\n            >\n              <a href=\"/api/login\" target=\"_blank\" rel=\"noopener noreferrer\">\n              <svg className=\"mr-2 h-4 w-4\" viewBox=\"0 0 24 24\">\n                <path\n                  d=\"M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z\"\n                  fill=\"#4285F4\"\n                />\n                <path\n                  d=\"M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z\"\n                  fill=\"#34A853\"\n                />\n                <path\n                  d=\"M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z\"\n                  fill=\"#FBBC05\"\n                />\n                <path\n                  d=\"M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z\"\n                  fill=\"#EA4335\"\n                />\n              </svg>\n                {loading ? 'Signing in...' : 'Continue with Google'}\n              </a>\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n};\n\nexport default AuthPage;","size_bytes":4017},"src/App.css":{"content":"#root {\n  max-width: 1280px;\n  margin: 0 auto;\n  padding: 2rem;\n  text-align: center;\n}\n\n.logo {\n  height: 6em;\n  padding: 1.5em;\n  will-change: filter;\n  transition: filter 300ms;\n}\n.logo:hover {\n  filter: drop-shadow(0 0 2em #646cffaa);\n}\n.logo.react:hover {\n  filter: drop-shadow(0 0 2em #61dafbaa);\n}\n\n@keyframes logo-spin {\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n}\n\n@media (prefers-reduced-motion: no-preference) {\n  a:nth-of-type(2) .logo {\n    animation: logo-spin infinite 20s linear;\n  }\n}\n\n.card {\n  padding: 2em;\n}\n\n.read-the-docs {\n  color: #888;\n}\n","size_bytes":606},"src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7246},"src/components/ui/toggle-group.tsx":{"content":"import * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1739},"src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"server/index.ts":{"content":"import express from 'express';\nimport cors from 'cors';\nimport morgan from 'morgan';\nimport path from 'path';\nimport { db } from './db';\nimport apiRoutes from './routes/api';\nimport { setupAuth } from './replitAuth';\n\nconst app = express();\nconst PORT = Number(process.env.PORT) || 8080;\n\napp.use(cors({\n  origin: true,\n  credentials: true\n}));\n\napp.use(morgan('combined') as any);\napp.use(express.json());\n\n// Health check endpoint\napp.get('/health', (req, res) => {\n  res.json({ status: 'ok', timestamp: new Date().toISOString() });\n});\n\n// Serve static files from the public directory\napp.use(express.static(path.join(process.cwd(), 'public')));\n\nasync function setupServer() {\n  // Setup Replit Auth middleware\n  await setupAuth(app);\n  \n  // API routes\n  app.use('/api', apiRoutes);\n\n  // Serve static files from dist directory (build output)\n  const distPath = path.join(process.cwd(), 'dist');\n  app.use(express.static(distPath));\n  console.log('✅ Serving static files from:', distPath);\n  \n  // Add a basic GET handler for /api to respond to health checks\n  app.get('/api', (req, res) => {\n    res.json({ \n      status: 'ok', \n      message: 'API is running',\n      endpoints: ['/api/push/*', '/api/notifications/*'],\n      timestamp: new Date().toISOString()\n    });\n  });\n\n  // Catch-all handler for SPA routes - ONLY serve index.html for GET requests to HTML pages\n  // This must come AFTER express.static so static files are served first\n  app.use((req, res, next) => {\n    // Only handle GET requests (not POST, PUT, DELETE, etc.)\n    if (req.method !== 'GET') {\n      return next();\n    }\n    \n    // express.static will have already handled actual files before this runs\n    // This only runs for GET requests that didn't match any file or API route\n    const indexPath = path.join(distPath, 'index.html');\n    res.sendFile(indexPath);\n  });\n\n  // Start the server AFTER all middleware is set up\n  app.listen(PORT, '0.0.0.0', () => {\n    console.log(`🚀 Server running on http://0.0.0.0:${PORT}`);\n    console.log(`📁 Environment: ${process.env.NODE_ENV || 'development'}`);\n    console.log(`🔗 Health check: http://0.0.0.0:${PORT}/health`);\n    console.log(`🛠️  API routes: http://0.0.0.0:${PORT}/api`);\n  });\n}\n\n// Start the server\nsetupServer().catch((error) => {\n  console.error('❌ Failed to start server:', error);\n  process.exit(1);\n});\n\nexport default app;","size_bytes":2393},"src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:size-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2701},"src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"src/components/mobile/MobileLayout.tsx":{"content":"import { ReactNode } from \"react\";\nimport { BottomNavigation } from \"./BottomNavigation\";\nimport { cn } from \"@/lib/utils\";\n\ninterface MobileLayoutProps {\n  children: ReactNode;\n  showBottomNav?: boolean;\n  showHeader?: boolean;\n}\n\nexport const MobileLayout = ({ children, showBottomNav = true, showHeader = true }: MobileLayoutProps) => {\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* App Header with Logo */}\n      {showHeader && (\n        <header className=\"fixed top-0 left-0 right-0 bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60 border-b border-border z-40\">\n          <div className=\"flex items-center justify-between px-4 py-3\">\n            <div className=\"flex items-center gap-3\">\n              <div className=\"w-8 h-8 bg-white rounded-full flex items-center justify-center shadow-sm\">\n                <img \n                  src=\"/lovable-uploads/105cee16-9e7f-45ba-9b51-01a7a6f35377.png\" \n                  alt=\"SubCircle\" \n                  className=\"w-6 h-6 object-contain\"\n                />\n              </div>\n              <span className=\"font-semibold text-foreground\">SubCircle</span>\n            </div>\n          </div>\n        </header>\n      )}\n      \n      {/* Main content with spacing for header and bottom nav */}\n      <main className={cn(\"\", showHeader && \"pt-16\", showBottomNav && \"pb-20\")}>\n        {children}\n      </main>\n      \n      {/* Bottom navigation */}\n      {showBottomNav && <BottomNavigation />}\n    </div>\n  );\n};\n\n","size_bytes":1515},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n\tdarkMode: [\"class\"],\n\tcontent: [\n\t\t\"./pages/**/*.{ts,tsx}\",\n\t\t\"./components/**/*.{ts,tsx}\",\n\t\t\"./app/**/*.{ts,tsx}\",\n\t\t\"./src/**/*.{ts,tsx}\",\n\t],\n\tprefix: \"\",\n\ttheme: {\n\t\tcontainer: {\n\t\t\tcenter: true,\n\t\t\tpadding: '2rem',\n\t\t\tscreens: {\n\t\t\t\t'2xl': '1400px'\n\t\t\t}\n\t\t},\n\t\textend: {\n\t\t\tcolors: {\n\t\t\t\tborder: 'hsl(var(--border))',\n\t\t\t\tinput: 'hsl(var(--input))',\n\t\t\t\tring: 'hsl(var(--ring))',\n\t\t\t\tbackground: 'hsl(var(--background))',\n\t\t\t\tforeground: 'hsl(var(--foreground))',\n\t\t\t\tprimary: {\n\t\t\t\t\tDEFAULT: 'hsl(var(--primary))',\n\t\t\t\t\tforeground: 'hsl(var(--primary-foreground))'\n\t\t\t\t},\n\t\t\t\tsecondary: {\n\t\t\t\t\tDEFAULT: 'hsl(var(--secondary))',\n\t\t\t\t\tforeground: 'hsl(var(--secondary-foreground))'\n\t\t\t\t},\n\t\t\t\tdestructive: {\n\t\t\t\t\tDEFAULT: 'hsl(var(--destructive))',\n\t\t\t\t\tforeground: 'hsl(var(--destructive-foreground))'\n\t\t\t\t},\n\t\t\t\tmuted: {\n\t\t\t\t\tDEFAULT: 'hsl(var(--muted))',\n\t\t\t\t\tforeground: 'hsl(var(--muted-foreground))'\n\t\t\t\t},\n\t\t\t\taccent: {\n\t\t\t\t\tDEFAULT: 'hsl(var(--accent))',\n\t\t\t\t\tforeground: 'hsl(var(--accent-foreground))'\n\t\t\t\t},\n\t\t\t\tpopover: {\n\t\t\t\t\tDEFAULT: 'hsl(var(--popover))',\n\t\t\t\t\tforeground: 'hsl(var(--popover-foreground))'\n\t\t\t\t},\n\t\t\t\tcard: {\n\t\t\t\t\tDEFAULT: 'hsl(var(--card))',\n\t\t\t\t\tforeground: 'hsl(var(--card-foreground))'\n\t\t\t\t},\n\t\t\t\tsidebar: {\n\t\t\t\t\tDEFAULT: 'hsl(var(--sidebar-background))',\n\t\t\t\t\tforeground: 'hsl(var(--sidebar-foreground))',\n\t\t\t\t\tprimary: 'hsl(var(--sidebar-primary))',\n\t\t\t\t\t'primary-foreground': 'hsl(var(--sidebar-primary-foreground))',\n\t\t\t\t\taccent: 'hsl(var(--sidebar-accent))',\n\t\t\t\t\t'accent-foreground': 'hsl(var(--sidebar-accent-foreground))',\n\t\t\t\t\tborder: 'hsl(var(--sidebar-border))',\n\t\t\t\t\tring: 'hsl(var(--sidebar-ring))'\n\t\t\t\t},\n\t\t\t\t'subcircle-teal': {\n\t\t\t\t\tDEFAULT: 'hsl(var(--subcircle-teal))',\n\t\t\t\t\tforeground: 'hsl(var(--subcircle-teal-foreground))'\n\t\t\t\t},\n\t\t\t\t'subcircle-indigo': {\n\t\t\t\t\tDEFAULT: 'hsl(var(--subcircle-indigo))',\n\t\t\t\t\tforeground: 'hsl(var(--subcircle-indigo-foreground))'\n\t\t\t\t},\n\t\t\t\t'subcircle-cyan': {\n\t\t\t\t\tDEFAULT: 'hsl(var(--subcircle-cyan))',\n\t\t\t\t\tforeground: 'hsl(var(--subcircle-cyan-foreground))'\n\t\t\t\t},\n\t\t\t\t'subcircle-error': {\n\t\t\t\t\tDEFAULT: 'hsl(var(--subcircle-error))',\n\t\t\t\t\tforeground: 'hsl(var(--subcircle-error-foreground))'\n\t\t\t\t}\n\t\t\t},\n\t\t\tborderRadius: {\n\t\t\t\tlg: 'var(--radius)',\n\t\t\t\tmd: 'calc(var(--radius) - 2px)',\n\t\t\t\tsm: 'calc(var(--radius) - 4px)'\n\t\t\t},\n\t\t\tbackgroundImage: {\n\t\t\t\t'gradient-primary': 'var(--gradient-primary)',\n\t\t\t\t'gradient-accent': 'var(--gradient-accent)',\n\t\t\t\t'gradient-subtle': 'var(--gradient-subtle)',\n\t\t\t\t'gradient-success': 'var(--gradient-success)',\n\t\t\t\t'gradient-card': 'var(--gradient-card)'\n\t\t\t},\n\t\t\tspacing: {\n\t\t\t\t'mobile-padding': '1.25rem', // 20px\n\t\t\t\t'mobile-gutter': '1rem', // 16px\n\t\t\t\t'mobile-safe': '3rem', // 48px for safe areas\n\t\t\t},\n\t\t\tboxShadow: {\n\t\t\t\t'elegant': 'var(--shadow-elegant)',\n\t\t\t\t'card': 'var(--shadow-card)',\n\t\t\t\t'card-hover': 'var(--shadow-card-hover)',\n\t\t\t\t'glow': 'var(--shadow-glow)',\n\t\t\t\t'service': 'var(--shadow-service)',\n\t\t\t\t'vault': 'var(--shadow-vault)'\n\t\t\t},\n\t\t\ttransitionTimingFunction: {\n\t\t\t\t'smooth': 'var(--transition-smooth)',\n\t\t\t\t'bounce': 'var(--transition-bounce)',\n\t\t\t\t'fast': 'var(--transition-fast)'\n\t\t\t},\n\t\t\tkeyframes: {\n\t\t\t\t'accordion-down': {\n\t\t\t\t\tfrom: { height: '0' },\n\t\t\t\t\tto: { height: 'var(--radix-accordion-content-height)' }\n\t\t\t\t},\n\t\t\t\t'accordion-up': {\n\t\t\t\t\tfrom: { height: 'var(--radix-accordion-content-height)' },\n\t\t\t\t\tto: { height: '0' }\n\t\t\t\t},\n\t\t\t\t'fade-in': {\n\t\t\t\t\t'0%': { opacity: '0', transform: 'translateY(10px)' },\n\t\t\t\t\t'100%': { opacity: '1', transform: 'translateY(0)' }\n\t\t\t\t},\n\t\t\t\t'scale-in': {\n\t\t\t\t\t'0%': { transform: 'scale(0.95)', opacity: '0' },\n\t\t\t\t\t'100%': { transform: 'scale(1)', opacity: '1' }\n\t\t\t\t},\n\t\t\t\t'slide-up': {\n\t\t\t\t\t'0%': { transform: 'translateY(20px)', opacity: '0' },\n\t\t\t\t\t'100%': { transform: 'translateY(0)', opacity: '1' }\n\t\t\t\t},\n\t\t\t\t'bounce-in': {\n\t\t\t\t\t'0%': { transform: 'scale(0.3)', opacity: '0' },\n\t\t\t\t\t'50%': { transform: 'scale(1.05)' },\n\t\t\t\t\t'70%': { transform: 'scale(0.9)' },\n\t\t\t\t\t'100%': { transform: 'scale(1)', opacity: '1' }\n\t\t\t\t},\n\t\t\t\t'shimmer': {\n\t\t\t\t\t'0%': { backgroundPosition: '-200px 0' },\n\t\t\t\t\t'100%': { backgroundPosition: 'calc(200px + 100%) 0' }\n\t\t\t\t}\n\t\t\t},\n\t\t\tanimation: {\n\t\t\t\t'accordion-down': 'accordion-down 0.2s ease-out',\n\t\t\t\t'accordion-up': 'accordion-up 0.2s ease-out',\n\t\t\t\t'fade-in': 'fade-in 0.3s ease-out',\n\t\t\t\t'scale-in': 'scale-in 0.2s ease-out',\n\t\t\t\t'slide-up': 'slide-up 0.4s ease-out',\n\t\t\t\t'bounce-in': 'bounce-in 0.6s cubic-bezier(0.175, 0.885, 0.32, 1.275)',\n\t\t\t\t'shimmer': 'shimmer 2s linear infinite'\n\t\t\t}\n\t\t}\n\t},\n\tplugins: [require(\"tailwindcss-animate\")],\n} satisfies Config;\n","size_bytes":4679},"src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"src/components/ui/credential-input-dialog.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Shield, Key, Eye, EyeOff, Trash2 } from \"lucide-react\";\nimport { useCredentialManagement, CredentialData, StoredCredentials } from \"@/hooks/use-credential-management\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\n\ninterface CredentialInputDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  subscriptionId: string;\n  serviceName: string;\n  onCredentialsSaved?: () => void;\n}\n\nexport const CredentialInputDialog = ({\n  open,\n  onOpenChange,\n  subscriptionId,\n  serviceName,\n  onCredentialsSaved\n}: CredentialInputDialogProps) => {\n  const [formData, setFormData] = useState<CredentialData>({\n    username: \"\",\n    password: \"\",\n    notes: \"\",\n    keyHint: \"\",\n  });\n  const [masterPassword, setMasterPassword] = useState(\"\");\n  const [showPassword, setShowPassword] = useState(false);\n  const [showMasterPassword, setShowMasterPassword] = useState(false);\n  const [existingCredentials, setExistingCredentials] = useState<StoredCredentials | null>(null);\n  const [isEditing, setIsEditing] = useState(false);\n\n  const { loading, saveCredentials, getCredentials, decryptCredentials, deleteCredentials } = useCredentialManagement();\n\n  useEffect(() => {\n    if (open) {\n      loadExistingCredentials();\n    } else {\n      resetForm();\n    }\n  }, [open]);\n\n  const loadExistingCredentials = async () => {\n    const stored = await getCredentials(subscriptionId);\n    if (stored) {\n      setExistingCredentials(stored);\n      setFormData(prev => ({\n        ...prev,\n        keyHint: stored.encryption_key_hint || \"\",\n      }));\n    }\n  };\n\n  const resetForm = () => {\n    setFormData({\n      username: \"\",\n      password: \"\",\n      notes: \"\",\n      keyHint: \"\",\n    });\n    setMasterPassword(\"\");\n    setShowPassword(false);\n    setShowMasterPassword(false);\n    setExistingCredentials(null);\n    setIsEditing(false);\n  };\n\n  const handleSave = async () => {\n    if (!formData.username || !formData.password || !masterPassword) {\n      return;\n    }\n\n    const result = await saveCredentials(subscriptionId, formData, masterPassword);\n    if (result.success) {\n      onOpenChange(false);\n      onCredentialsSaved?.();\n    }\n  };\n\n  const handleDecrypt = async () => {\n    if (!existingCredentials || !masterPassword) return;\n\n    const decrypted = await decryptCredentials(existingCredentials, masterPassword);\n    if (decrypted) {\n      setFormData(decrypted);\n      setIsEditing(true);\n    }\n  };\n\n  const handleDelete = async () => {\n    if (!existingCredentials) return;\n\n    const result = await deleteCredentials(subscriptionId);\n    if (result.success) {\n      onOpenChange(false);\n      onCredentialsSaved?.();\n    }\n  };\n\n  const hasCredentials = !!existingCredentials;\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-md\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            <Key className=\"w-5 h-5 text-subcircle-cyan\" />\n            {hasCredentials && !isEditing ? \"View\" : hasCredentials ? \"Edit\" : \"Add\"} Credentials\n          </DialogTitle>\n          <DialogDescription>\n            {hasCredentials && !isEditing \n              ? `Enter your master password to view ${serviceName} credentials`\n              : `${hasCredentials ? \"Update\" : \"Store\"} encrypted login credentials for ${serviceName}`\n            }\n          </DialogDescription>\n        </DialogHeader>\n\n        <div className=\"space-y-4\">\n          {/* Security Notice */}\n          <Alert>\n            <Shield className=\"h-4 w-4\" />\n            <AlertDescription>\n              Your credentials are encrypted with your master password and stored securely.\n              {!hasCredentials && \" Choose a strong master password you'll remember.\"}\n            </AlertDescription>\n          </Alert>\n\n          {/* Master Password */}\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"master-password\">Master Password</Label>\n            <div className=\"relative\">\n              <Input\n                id=\"master-password\"\n                type={showMasterPassword ? \"text\" : \"password\"}\n                value={masterPassword}\n                onChange={(e) => setMasterPassword(e.target.value)}\n                placeholder=\"Enter your master password\"\n                className=\"pr-10\"\n              />\n              <Button\n                type=\"button\"\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                onClick={() => setShowMasterPassword(!showMasterPassword)}\n              >\n                {showMasterPassword ? (\n                  <EyeOff className=\"h-4 w-4\" />\n                ) : (\n                  <Eye className=\"h-4 w-4\" />\n                )}\n              </Button>\n            </div>\n          </div>\n\n          {/* Key Hint */}\n          {!hasCredentials && (\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"key-hint\">Password Hint (Optional)</Label>\n              <Input\n                id=\"key-hint\"\n                value={formData.keyHint}\n                onChange={(e) => setFormData(prev => ({ ...prev, keyHint: e.target.value }))}\n                placeholder=\"Reminder to help you remember your master password\"\n              />\n            </div>\n          )}\n\n          {/* Show hint if exists and not editing */}\n          {hasCredentials && !isEditing && existingCredentials?.encryption_key_hint && (\n            <div className=\"bg-muted/50 p-3 rounded-md\">\n              <p className=\"text-sm text-muted-foreground\">\n                <strong>Password Hint:</strong> {existingCredentials.encryption_key_hint}\n              </p>\n            </div>\n          )}\n\n          {/* Credential Fields (only shown when editing or adding new) */}\n          {(!hasCredentials || isEditing) && (\n            <>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"username\">Username/Email</Label>\n                <Input\n                  id=\"username\"\n                  value={formData.username}\n                  onChange={(e) => setFormData(prev => ({ ...prev, username: e.target.value }))}\n                  placeholder=\"Enter username or email\"\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"password\">Password</Label>\n                <div className=\"relative\">\n                  <Input\n                    id=\"password\"\n                    type={showPassword ? \"text\" : \"password\"}\n                    value={formData.password}\n                    onChange={(e) => setFormData(prev => ({ ...prev, password: e.target.value }))}\n                    placeholder=\"Enter password\"\n                    className=\"pr-10\"\n                  />\n                  <Button\n                    type=\"button\"\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                    onClick={() => setShowPassword(!showPassword)}\n                  >\n                    {showPassword ? (\n                      <EyeOff className=\"h-4 w-4\" />\n                    ) : (\n                      <Eye className=\"h-4 w-4\" />\n                    )}\n                  </Button>\n                </div>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"notes\">Notes (Optional)</Label>\n                <Textarea\n                  id=\"notes\"\n                  value={formData.notes}\n                  onChange={(e) => setFormData(prev => ({ ...prev, notes: e.target.value }))}\n                  placeholder=\"Additional notes or instructions\"\n                  rows={3}\n                />\n              </div>\n            </>\n          )}\n\n          {/* Action Buttons */}\n          <div className=\"flex justify-between gap-2\">\n            <div className=\"flex gap-2\">\n              <Button \n                variant=\"outline\" \n                onClick={() => onOpenChange(false)}\n                disabled={loading}\n              >\n                Cancel\n              </Button>\n              \n              {hasCredentials && !isEditing && (\n                <Button\n                  variant=\"destructive\"\n                  size=\"sm\"\n                  onClick={handleDelete}\n                  disabled={loading}\n                >\n                  <Trash2 className=\"w-4 h-4 mr-1\" />\n                  Delete\n                </Button>\n              )}\n            </div>\n\n            <div className=\"flex gap-2\">\n              {hasCredentials && !isEditing ? (\n                <Button \n                  onClick={handleDecrypt}\n                  disabled={loading || !masterPassword}\n                  className=\"bg-subcircle-cyan text-subcircle-cyan-foreground hover:bg-subcircle-cyan/90\"\n                >\n                  {loading ? \"Decrypting...\" : \"View Credentials\"}\n                </Button>\n              ) : (\n                <Button \n                  onClick={handleSave}\n                  disabled={loading || !formData.username || !formData.password || !masterPassword}\n                  className=\"bg-primary text-primary-foreground hover:bg-primary/90\"\n                >\n                  {loading ? \"Saving...\" : hasCredentials ? \"Update\" : \"Save\"} Credentials\n                </Button>\n              )}\n            </div>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n};","size_bytes":9875},"src/pages/Dashboard.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Plus, Users, Tv, Shield, Settings } from 'lucide-react';\nimport { useNavigate } from 'react-router-dom';\nimport { toast } from '@/hooks/use-toast';\nimport { ThemeToggle } from '@/components/ThemeToggle';\nimport { NotificationBell } from '@/components/ui/notification-bell';\nimport { getServiceLogo, handleLogoError, hasServiceLogo } from '@/lib/logo-utils';\n\ninterface Subscription {\n  id: string;\n  service_id: string;\n  is_active: boolean;\n  streaming_services: {\n    name: string;\n    logo_url: string | null;\n    monthly_price: number | null;\n    category: string | null;\n    website_url: string | null;\n  };\n}\n\ninterface PartnerConnection {\n  id: string;\n  partner_id: string;\n  status: string;\n  profiles: {\n    display_name: string | null;\n  } | null;\n}\n\n// Logo handling moved to centralized utility\n\nconst Dashboard = () => {\n  const { user, signOut } = useAuth();\n  const navigate = useNavigate();\n  const [subscriptions, setSubscriptions] = useState<Subscription[]>([]);\n  const [partnerConnections, setPartnerConnections] = useState<PartnerConnection[]>([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    if (user) {\n      fetchSubscriptions();\n      fetchPartnerConnections();\n    }\n  }, [user]);\n\n  const fetchSubscriptions = async () => {\n    try {\n      // TODO: Replace with backend API call\n      // For now, use empty array to get app working\n      setSubscriptions([]);\n    } catch (error) {\n      console.error('Error fetching subscriptions:', error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to load subscriptions\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  const fetchPartnerConnections = async () => {\n    try {\n      // TODO: Replace with backend API call\n      // For now, use empty array to get app working\n      setPartnerConnections([]);\n    } catch (error) {\n      console.error('Error fetching partner connections:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleSignOut = async () => {\n    const { error } = await signOut();\n    if (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to sign out\",\n        variant: \"destructive\"\n      });\n    } else {\n      navigate('/');\n    }\n  };\n\n  const totalActiveSubscriptions = subscriptions.filter(sub => sub.is_active).length;\n  const totalMonthlySpend = subscriptions\n    .filter(sub => sub.is_active)\n    .reduce((sum, sub) => sum + (sub.streaming_services.monthly_price || 0), 0);\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gradient-subtle\">\n        <div className=\"text-center space-y-4\">\n          <div className=\"w-16 h-16 bg-gradient-primary rounded-2xl mx-auto flex items-center justify-center shadow-elegant animate-pulse\">\n            <Tv className=\"w-8 h-8 text-white\" />\n          </div>\n          <p className=\"text-muted-foreground\">Loading your subscriptions...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-subtle\">\n      {/* Header */}\n      <header className=\"border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60\">\n        <div className=\"container mx-auto px-4 py-4 flex items-center justify-between\">\n          <div className=\"flex items-center space-x-3\">\n            <ThemeToggle />\n            <div className=\"w-8 h-8 bg-gradient-primary rounded-lg flex items-center justify-center\">\n              <Tv className=\"w-4 h-4 text-white\" />\n            </div>\n            <h1 className=\"text-xl font-bold\">SubCircle</h1>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <NotificationBell />\n            <Button variant=\"ghost\" size=\"sm\" onClick={() => navigate('/settings')}>\n              <Settings className=\"w-4 h-4\" />\n            </Button>\n            <Button variant=\"ghost\" size=\"sm\" onClick={handleSignOut}>\n              Sign Out\n            </Button>\n          </div>\n        </div>\n      </header>\n\n      <main className=\"container mx-auto px-4 py-6 space-y-6\">\n        {/* Welcome Section */}\n        <div className=\"text-center space-y-2\">\n          <h2 className=\"text-2xl font-bold\">Welcome back!</h2>\n          <p className=\"text-muted-foreground\">Manage your streaming subscriptions</p>\n        </div>\n\n        {/* Stats Cards */}\n        <div className=\"grid grid-cols-2 gap-4\">\n          <Card>\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Active Services</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">{totalActiveSubscriptions}</div>\n              <p className=\"text-xs text-muted-foreground\">Subscriptions</p>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Monthly Spend</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">${totalMonthlySpend.toFixed(2)}</div>\n              <p className=\"text-xs text-muted-foreground\">Per month</p>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Quick Actions */}\n        <div className=\"grid grid-cols-2 gap-4\">\n          <Button \n            onClick={() => navigate('/subscriptions/add')}\n            className=\"h-20 flex-col space-y-2\"\n          >\n            <Plus className=\"w-6 h-6\" />\n            <span>Add Service</span>\n          </Button>\n          <Button \n            variant=\"outline\"\n            onClick={() => navigate('/partners')}\n            className=\"h-20 flex-col space-y-2\"\n          >\n            <Users className=\"w-6 h-6\" />\n            <span>Connect Partner</span>\n          </Button>\n        </div>\n\n        {/* Subscriptions */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2\">\n              <Tv className=\"w-5 h-5\" />\n              <span>Your Subscriptions</span>\n            </CardTitle>\n            <CardDescription>\n              {subscriptions.length === 0 \n                ? \"No subscriptions added yet\" \n                : `${subscriptions.length} subscription${subscriptions.length !== 1 ? 's' : ''}`\n              }\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-3\">\n            {subscriptions.length === 0 ? (\n              <div className=\"text-center py-8 space-y-4\">\n                <Tv className=\"w-12 h-12 text-muted-foreground mx-auto\" />\n                <div>\n                  <p className=\"text-muted-foreground\">No subscriptions yet</p>\n                  <Button \n                    variant=\"link\" \n                    onClick={() => navigate('/subscriptions/add')}\n                    className=\"mt-2\"\n                  >\n                    Add your first subscription\n                  </Button>\n                </div>\n              </div>\n            ) : (\n              subscriptions.map((subscription) => (\n                <div key={subscription.id} className=\"flex items-center justify-between p-3 bg-muted/50 rounded-lg\">\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"w-10 h-10 bg-white dark:bg-white border border-border p-1.5 rounded-lg flex items-center justify-center overflow-hidden shadow-sm\">\n                      {hasServiceLogo(subscription.streaming_services) ? (\n                        <img \n                          src={getServiceLogo(subscription.streaming_services)}\n                          alt={`${subscription.streaming_services.name} logo`}\n                          className=\"w-full h-full object-contain\"\n                          loading=\"lazy\"\n                          referrerPolicy=\"no-referrer\"\n                          onError={(e) => handleLogoError(e, subscription.streaming_services)}\n                        />\n                      ) : null}\n                      <Tv className={`w-5 h-5 text-muted-foreground ${hasServiceLogo(subscription.streaming_services) ? 'hidden' : ''}`} />\n                    </div>\n                    <div>\n                      <p className=\"font-medium\">{subscription.streaming_services.name}</p>\n                      <p className=\"text-sm text-muted-foreground\">\n                        ${subscription.streaming_services.monthly_price || 0}/month\n                      </p>\n                    </div>\n                  </div>\n                  <Badge variant={subscription.is_active ? \"default\" : \"secondary\"}>\n                    {subscription.is_active ? \"Active\" : \"Inactive\"}\n                  </Badge>\n                </div>\n              ))\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Partner Connections */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2\">\n              <Users className=\"w-5 h-5\" />\n              <span>Partner Connections</span>\n            </CardTitle>\n            <CardDescription>\n              Share subscriptions with family & friends\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            {partnerConnections.length === 0 ? (\n              <div className=\"text-center py-8 space-y-4\">\n                <Users className=\"w-12 h-12 text-muted-foreground mx-auto\" />\n                <div>\n                  <p className=\"text-muted-foreground\">No partner connections</p>\n                  <Button \n                    variant=\"link\"\n                    onClick={() => navigate('/partners')}\n                    className=\"mt-2\"\n                  >\n                    Connect with a partner\n                  </Button>\n                </div>\n              </div>\n            ) : (\n              <div className=\"space-y-3\">\n                {partnerConnections.map((connection) => (\n                  <div key={connection.id} className=\"flex items-center justify-between p-3 bg-muted/50 rounded-lg\">\n                    <div className=\"flex items-center space-x-3\">\n                      <div className=\"w-10 h-10 bg-gradient-primary rounded-lg flex items-center justify-center\">\n                        <Users className=\"w-5 h-5 text-white\" />\n                      </div>\n                      <div>\n                        <p className=\"font-medium\">\n                          {connection.profiles?.display_name || 'Partner'}\n                        </p>\n                        <p className=\"text-sm text-muted-foreground\">\n                          Connection Status\n                        </p>\n                      </div>\n                    </div>\n                    <Badge variant={connection.status === 'accepted' ? \"default\" : \"secondary\"}>\n                      {connection.status}\n                    </Badge>\n                  </div>\n                ))}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Privacy Notice */}\n        <Card className=\"border-trust-blue/20\">\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-start space-x-3\">\n              <Shield className=\"w-5 h-5 text-trust-blue mt-0.5\" />\n              <div>\n                <p className=\"text-sm font-medium text-trust-blue\">Privacy Protected</p>\n                <p className=\"text-xs text-muted-foreground mt-1\">\n                  Your subscription credentials are encrypted and stored locally on your device only.\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </main>\n    </div>\n  );\n};\n\nexport default Dashboard;","size_bytes":11927},"public/sw.js":{"content":"// Service Worker for Push Notifications\nconsole.log('Service Worker: Loading...');\n\nself.addEventListener('install', (event) => {\n  console.log('Service Worker: Installed');\n  self.skipWaiting();\n});\n\nself.addEventListener('activate', (event) => {\n  console.log('Service Worker: Activated');\n  event.waitUntil(self.clients.claim());\n});\n\n// Handle push notifications\nself.addEventListener('push', (event) => {\n  console.log('Service Worker: Push notification received', event);\n  \n  if (!event.data) {\n    console.log('Service Worker: No data in push event');\n    return;\n  }\n\n  let data;\n  try {\n    data = event.data.json();\n  } catch (error) {\n    console.log('Service Worker: Failed to parse push data as JSON, using text');\n    data = {\n      title: 'SubCircle Notification',\n      message: event.data.text() || 'You have a new notification',\n    };\n  }\n\n  console.log('Service Worker: Push data processed', data);\n\n  const title = data.title || 'SubCircle Notification';\n  const options = {\n    body: data.message || 'You have a new notification',\n    icon: data.icon || '/favicon.ico',\n    badge: data.badge || '/favicon.ico',\n    image: data.image,\n    vibrate: data.vibrate || [200, 100, 200],\n    data: {\n      url: data.url || data.action_url || '/notifications',\n      notificationId: data.id || `notification-${Date.now()}`,\n      timestamp: Date.now(),\n      ...data\n    },\n    actions: [\n      {\n        action: 'view',\n        title: 'View',\n        icon: '/favicon.ico'\n      },\n      {\n        action: 'dismiss',\n        title: 'Dismiss'\n      }\n    ],\n    requireInteraction: data.priority === 'urgent',\n    silent: data.priority === 'low',\n    tag: data.tag || 'subcircle-notification',\n    renotify: true,\n    timestamp: Date.now()\n  };\n\n  console.log('Service Worker: Showing notification', title, options);\n\n  event.waitUntil(\n    self.registration.showNotification(title, options)\n      .then(() => {\n        console.log('Service Worker: Notification shown successfully');\n      })\n      .catch((error) => {\n        console.error('Service Worker: Failed to show notification', error);\n      })\n  );\n});\n\n// Handle notification click\nself.addEventListener('notificationclick', (event) => {\n  console.log('Service Worker: Notification clicked', event);\n  \n  event.notification.close();\n\n  if (event.action === 'dismiss') {\n    console.log('Service Worker: Notification dismissed');\n    return;\n  }\n\n  const urlToOpen = event.notification.data?.url || '/notifications';\n  console.log('Service Worker: Opening URL', urlToOpen);\n  \n  event.waitUntil(\n    self.clients.matchAll({ type: 'window', includeUncontrolled: true }).then((clients) => {\n      console.log('Service Worker: Found clients', clients.length);\n      \n      // Check if there's already a window/tab open with the target URL\n      for (const client of clients) {\n        if (client.url.includes(new URL(urlToOpen, self.location.origin).pathname) && 'focus' in client) {\n          console.log('Service Worker: Focusing existing client');\n          return client.focus();\n        }\n      }\n      \n      // If not, open a new window/tab with the URL\n      if (self.clients.openWindow) {\n        const fullUrl = new URL(urlToOpen, self.location.origin).href;\n        console.log('Service Worker: Opening new window', fullUrl);\n        return self.clients.openWindow(fullUrl);\n      }\n    }).catch((error) => {\n      console.error('Service Worker: Error handling notification click', error);\n    })\n  );\n});\n\n// Handle notification close\nself.addEventListener('notificationclose', (event) => {\n  console.log('Service Worker: Notification closed', event.notification.data);\n});\n\n// Handle background sync (for offline notification queuing)\nself.addEventListener('sync', (event) => {\n  console.log('Service Worker: Background sync triggered', event.tag);\n  \n  if (event.tag === 'notification-sync') {\n    event.waitUntil(syncNotifications());\n  }\n});\n\nasync function syncNotifications() {\n  try {\n    console.log('Service Worker: Syncing notifications...');\n    // This would sync any queued notifications when back online\n    // For now, we'll just log that sync happened\n    console.log('Service Worker: Notifications synced successfully');\n  } catch (error) {\n    console.error('Service Worker: Failed to sync notifications:', error);\n  }\n}\n\n// Handle message from main thread\nself.addEventListener('message', (event) => {\n  console.log('Service Worker: Received message', event.data);\n  \n  if (event.data && event.data.type === 'SKIP_WAITING') {\n    self.skipWaiting();\n  }\n});\n\n// Error handling\nself.addEventListener('error', (event) => {\n  console.error('Service Worker: Error', event.error);\n});\n\nself.addEventListener('unhandledrejection', (event) => {\n  console.error('Service Worker: Unhandled Promise Rejection', event.reason);\n});\n\nconsole.log('Service Worker: Setup complete');","size_bytes":4870},"src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115},"src/pages/NotFound.tsx":{"content":"import { useLocation } from \"react-router-dom\";\nimport { useEffect } from \"react\";\n\nconst NotFound = () => {\n  const location = useLocation();\n\n  useEffect(() => {\n    console.error(\n      \"404 Error: User attempted to access non-existent route:\",\n      location.pathname\n    );\n  }, [location.pathname]);\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gray-100\">\n      <div className=\"text-center\">\n        <h1 className=\"text-4xl font-bold mb-4\">404</h1>\n        <p className=\"text-xl text-gray-600 mb-4\">Oops! Page not found</p>\n        <a href=\"/\" className=\"text-blue-500 hover:text-blue-700 underline\">\n          Return to Home\n        </a>\n      </div>\n    </div>\n  );\n};\n\nexport default NotFound;\n","size_bytes":739},"src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"src/pages/Settings.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { ArrowLeft, User, Save, Shield } from 'lucide-react';\nimport { useNavigate } from 'react-router-dom';\nimport { toast } from '@/hooks/use-toast';\n\ninterface Profile {\n  display_name: string | null;\n  avatar_url: string | null;\n}\n\nconst Settings = () => {\n  const { user, signOut } = useAuth();\n  const navigate = useNavigate();\n  const [profile, setProfile] = useState<Profile>({ display_name: null, avatar_url: null });\n  const [loading, setLoading] = useState(true);\n  const [saving, setSaving] = useState(false);\n\n  useEffect(() => {\n    if (user) {\n      fetchProfile();\n    }\n  }, [user]);\n\n  const fetchProfile = async () => {\n    try {\n      // TODO: Replace with backend API call\n      // For now, use default values to get app working\n      setProfile({ display_name: user?.email?.split('@')[0] || null, avatar_url: null });\n    } catch (error) {\n      console.error('Error fetching profile:', error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to load profile\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleSaveProfile = async () => {\n    if (!user) return;\n    \n    setSaving(true);\n    try {\n      // TODO: Replace with backend API call\n      // For now, just show success message\n      \n      toast({\n        title: \"Success\",\n        description: \"Profile updated successfully (mock)\"\n      });\n    } catch (error) {\n      console.error('Error updating profile:', error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to update profile\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  const handleSignOut = async () => {\n    const { error } = await signOut();\n    if (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to sign out\",\n        variant: \"destructive\"\n      });\n    } else {\n      navigate('/');\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gradient-subtle\">\n        <div className=\"text-center space-y-4\">\n          <div className=\"w-16 h-16 bg-white dark:bg-white rounded-2xl mx-auto flex items-center justify-center shadow-elegant animate-pulse p-3\">\n            <img \n              src=\"/lovable-uploads/105cee16-9e7f-45ba-9b51-01a7a6f35377.png\" \n              alt=\"SubCircle Logo\" \n              className=\"w-full h-full object-contain\"\n            />\n          </div>\n          <p className=\"text-muted-foreground\">Loading settings...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-subtle\">\n      {/* Header */}\n      <header className=\"border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60\">\n        <div className=\"container mx-auto px-4 py-4 flex items-center justify-between\">\n          <div className=\"flex items-center space-x-3\">\n            <Button variant=\"ghost\" size=\"sm\" onClick={() => navigate('/dashboard')}>\n              <ArrowLeft className=\"w-4 h-4\" />\n            </Button>\n            <h1 className=\"text-xl font-bold\">Settings</h1>\n          </div>\n        </div>\n      </header>\n\n      <main className=\"container mx-auto px-4 py-6 space-y-6\">\n        {/* Profile Settings */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2\">\n              <User className=\"w-5 h-5\" />\n              <span>Profile Settings</span>\n            </CardTitle>\n            <CardDescription>\n              Manage your account information and preferences\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"email\">Email</Label>\n              <Input\n                id=\"email\"\n                type=\"email\"\n                value={user?.email || ''}\n                disabled\n                className=\"bg-muted\"\n              />\n              <p className=\"text-sm text-muted-foreground\">Email cannot be changed</p>\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"displayName\">Display Name</Label>\n              <Input\n                id=\"displayName\"\n                placeholder=\"Enter your display name\"\n                value={profile.display_name || ''}\n                onChange={(e) => setProfile(prev => ({ ...prev, display_name: e.target.value }))}\n              />\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"avatarUrl\">Avatar URL</Label>\n              <Input\n                id=\"avatarUrl\"\n                placeholder=\"Enter avatar URL (optional)\"\n                value={profile.avatar_url || ''}\n                onChange={(e) => setProfile(prev => ({ ...prev, avatar_url: e.target.value }))}\n              />\n            </div>\n            \n            <Button onClick={handleSaveProfile} disabled={saving}>\n              <Save className=\"w-4 h-4 mr-2\" />\n              {saving ? 'Saving...' : 'Save Profile'}\n            </Button>\n          </CardContent>\n        </Card>\n\n        {/* Privacy & Security */}\n        <Card className=\"border-trust-blue/20\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2\">\n              <Shield className=\"w-5 h-5 text-trust-blue\" />\n              <span>Privacy & Security</span>\n            </CardTitle>\n            <CardDescription>\n              Your data security and privacy information\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"p-4 bg-muted/50 rounded-lg\">\n              <h4 className=\"font-medium text-trust-blue mb-2\">Data Protection</h4>\n              <p className=\"text-sm text-muted-foreground mb-3\">\n                Your subscription credentials and personal information are encrypted and stored securely. \n                We never share your data with third parties without your explicit consent.\n              </p>\n              <ul className=\"text-sm text-muted-foreground space-y-1\">\n                <li>• End-to-end encryption for sensitive data</li>\n                <li>• Local device storage for credentials</li>\n                <li>• Secure authentication through Supabase</li>\n                <li>• Regular security audits and updates</li>\n              </ul>\n            </div>\n            \n            <div className=\"p-4 bg-muted/50 rounded-lg\">\n              <h4 className=\"font-medium text-trust-blue mb-2\">Data Control</h4>\n              <p className=\"text-sm text-muted-foreground\">\n                You have full control over your data. You can export, delete, or modify your information at any time.\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Account Actions */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Account Actions</CardTitle>\n            <CardDescription>\n              Manage your account settings and access\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <Button variant=\"destructive\" onClick={handleSignOut}>\n              Sign Out\n            </Button>\n          </CardContent>\n        </Card>\n      </main>\n    </div>\n  );\n};\n\nexport default Settings;\n","size_bytes":7664},"src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"README.md":{"content":"# Welcome to your Lovable project\n\n## Project info\n\n**URL**: https://lovable.dev/projects/b72833b5-4def-46e1-8b84-b2073fb5be53\n\n## How can I edit this code?\n\nThere are several ways of editing your application.\n\n**Use Lovable**\n\nSimply visit the [Lovable Project](https://lovable.dev/projects/b72833b5-4def-46e1-8b84-b2073fb5be53) and start prompting.\n\nChanges made via Lovable will be committed automatically to this repo.\n\n**Use your preferred IDE**\n\nIf you want to work locally using your own IDE, you can clone this repo and push changes. Pushed changes will also be reflected in Lovable.\n\nThe only requirement is having Node.js & npm installed - [install with nvm](https://github.com/nvm-sh/nvm#installing-and-updating)\n\nFollow these steps:\n\n```sh\n# Step 1: Clone the repository using the project's Git URL.\ngit clone <YOUR_GIT_URL>\n\n# Step 2: Navigate to the project directory.\ncd <YOUR_PROJECT_NAME>\n\n# Step 3: Install the necessary dependencies.\nnpm i\n\n# Step 4: Start the development server with auto-reloading and an instant preview.\nnpm run dev\n```\n\n**Edit a file directly in GitHub**\n\n- Navigate to the desired file(s).\n- Click the \"Edit\" button (pencil icon) at the top right of the file view.\n- Make your changes and commit the changes.\n\n**Use GitHub Codespaces**\n\n- Navigate to the main page of your repository.\n- Click on the \"Code\" button (green button) near the top right.\n- Select the \"Codespaces\" tab.\n- Click on \"New codespace\" to launch a new Codespace environment.\n- Edit files directly within the Codespace and commit and push your changes once you're done.\n\n## What technologies are used for this project?\n\nThis project is built with:\n\n- Vite\n- TypeScript\n- React\n- shadcn-ui\n- Tailwind CSS\n\n## How can I deploy this project?\n\nSimply open [Lovable](https://lovable.dev/projects/b72833b5-4def-46e1-8b84-b2073fb5be53) and click on Share -> Publish.\n\n## Can I connect a custom domain to my Lovable project?\n\nYes, you can!\n\nTo connect a domain, navigate to Project > Settings > Domains and click Connect Domain.\n\nRead more here: [Setting up a custom domain](https://docs.lovable.dev/tips-tricks/custom-domain#step-by-step-guide)\n","size_bytes":2149},"src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"src/hooks/use-credential-management.ts":{"content":"import { useState } from \"react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\n// Simple encryption/decryption using Web Crypto API\nclass SimpleEncryption {\n  private static async generateKey(password: string, userId: string): Promise<CryptoKey> {\n    const enc = new TextEncoder();\n    const keyMaterial = await crypto.subtle.importKey(\n      \"raw\",\n      enc.encode(password),\n      { name: \"PBKDF2\" },\n      false,\n      [\"deriveBits\", \"deriveKey\"]\n    );\n    \n    // Generate user-specific salt by combining fixed prefix with user ID\n    const userSalt = `subcircle-${userId}-2024`;\n    \n    return crypto.subtle.deriveKey(\n      {\n        name: \"PBKDF2\",\n        salt: enc.encode(userSalt),\n        iterations: 100000,\n        hash: \"SHA-256\",\n      },\n      keyMaterial,\n      { name: \"AES-GCM\", length: 256 },\n      false,\n      [\"encrypt\", \"decrypt\"]\n    );\n  }\n\n  static async encrypt(text: string, password: string, userId: string): Promise<string> {\n    const key = await this.generateKey(password, userId);\n    const enc = new TextEncoder();\n    const iv = crypto.getRandomValues(new Uint8Array(12));\n    \n    const encrypted = await crypto.subtle.encrypt(\n      { name: \"AES-GCM\", iv },\n      key,\n      enc.encode(text)\n    );\n    \n    const combined = new Uint8Array(iv.length + encrypted.byteLength);\n    combined.set(iv);\n    combined.set(new Uint8Array(encrypted), iv.length);\n    \n    return btoa(String.fromCharCode(...combined));\n  }\n\n  static async decrypt(encryptedData: string, password: string, userId: string): Promise<string> {\n    const key = await this.generateKey(password, userId);\n    const combined = new Uint8Array([...atob(encryptedData)].map(c => c.charCodeAt(0)));\n    \n    const iv = combined.slice(0, 12);\n    const data = combined.slice(12);\n    \n    const decrypted = await crypto.subtle.decrypt(\n      { name: \"AES-GCM\", iv },\n      key,\n      data\n    );\n    \n    return new TextDecoder().decode(decrypted);\n  }\n}\n\nexport interface CredentialData {\n  username: string;\n  password: string;\n  notes?: string;\n  keyHint: string;\n}\n\nexport interface StoredCredentials {\n  id: string;\n  subscription_id: string;\n  encrypted_username?: string;\n  encrypted_password?: string;\n  encrypted_notes?: string;\n  encryption_key_hint?: string;\n  created_at: string;\n  updated_at: string;\n}\n\nexport const useCredentialManagement = () => {\n  const [loading, setLoading] = useState(false);\n  const { toast } = useToast();\n\n  const saveCredentials = async (\n    subscriptionId: string,\n    credentials: CredentialData,\n    masterPassword: string\n  ) => {\n    setLoading(true);\n    try {\n      // TODO: Replace with backend API call\n      // For now, just show success message\n      \n      toast({\n        title: \"Credentials Saved\",\n        description: \"Login credentials saved (mock)\",\n      });\n\n      return { success: true, data: null };\n    } catch (error) {\n      console.error(\"Error saving credentials:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to save credentials\",\n        variant: \"destructive\",\n      });\n      return { success: false, error };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const getCredentials = async (subscriptionId: string): Promise<StoredCredentials | null> => {\n    try {\n      // TODO: Replace with backend API call\n      // For now, return null (no credentials)\n      return null;\n    } catch (error) {\n      console.error(\"Error fetching credentials:\", error);\n      return null;\n    }\n  };\n\n  const decryptCredentials = async (\n    storedCredentials: StoredCredentials,\n    masterPassword: string\n  ): Promise<CredentialData | null> => {\n    try {\n      // TODO: Replace with backend API call\n      // For now, return mock credentials\n      \n      return {\n        username: \"mock_user\",\n        password: \"mock_pass\",\n        notes: \"Mock credentials\",\n        keyHint: storedCredentials.encryption_key_hint || \"\",\n      };\n    } catch (error) {\n      toast({\n        title: \"Decryption Failed\",\n        description: \"Invalid master password or corrupted data\",\n        variant: \"destructive\",\n      });\n      return null;\n    }\n  };\n\n  const deleteCredentials = async (subscriptionId: string) => {\n    setLoading(true);\n    try {\n      // TODO: Replace with backend API call\n      // For now, just show success message\n      \n      toast({\n        title: \"Credentials Deleted\",\n        description: \"Login credentials deleted (mock)\",\n      });\n\n      return { success: true };\n    } catch (error) {\n      console.error(\"Error deleting credentials:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete credentials\",\n        variant: \"destructive\",\n      });\n      return { success: false, error };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return {\n    loading,\n    saveCredentials,\n    getCredentials,\n    decryptCredentials,\n    deleteCredentials,\n  };\n};","size_bytes":4916},"src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nexport interface TextareaProps\n  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}\n\nconst Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(\n  ({ className, ...props }, ref) => {\n    return (\n      <textarea\n        className={cn(\n          \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":772},"src/contexts/ThemeProvider.tsx":{"content":"import { createContext, useContext, useEffect, useState } from \"react\"\n\ntype Theme = \"dark\" | \"light\" | \"system\"\n\ntype ThemeProviderProps = {\n  children: React.ReactNode\n  defaultTheme?: Theme\n  storageKey?: string\n}\n\ntype ThemeProviderState = {\n  theme: Theme\n  setTheme: (theme: Theme) => void\n}\n\nconst initialState: ThemeProviderState = {\n  theme: \"system\",\n  setTheme: () => null,\n}\n\nconst ThemeProviderContext = createContext<ThemeProviderState>(initialState)\n\nexport function ThemeProvider({\n  children,\n  defaultTheme = \"system\",\n  storageKey = \"vite-ui-theme\",\n  ...props\n}: ThemeProviderProps) {\n  const [theme, setTheme] = useState<Theme>(\n    () => (localStorage.getItem(storageKey) as Theme) || defaultTheme\n  )\n\n  useEffect(() => {\n    const root = window.document.documentElement\n\n    root.classList.remove(\"light\", \"dark\")\n\n    if (theme === \"system\") {\n      const systemTheme = window.matchMedia(\"(prefers-color-scheme: dark)\")\n        .matches\n        ? \"dark\"\n        : \"light\"\n\n      root.classList.add(systemTheme)\n      return\n    }\n\n    root.classList.add(theme)\n  }, [theme])\n\n  const value = {\n    theme,\n    setTheme: (theme: Theme) => {\n      localStorage.setItem(storageKey, theme)\n      setTheme(theme)\n    },\n  }\n\n  return (\n    <ThemeProviderContext.Provider {...props} value={value}>\n      {children}\n    </ThemeProviderContext.Provider>\n  )\n}\n\nexport const useTheme = () => {\n  const context = useContext(ThemeProviderContext)\n\n  if (context === undefined)\n    throw new Error(\"useTheme must be used within a ThemeProvider\")\n\n  return context\n}","size_bytes":1577},"src/components/ui/notification-bell.tsx":{"content":"import { Bell } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from '@/components/ui/popover';\nimport { NotificationList } from './notification-list';\nimport { useNotifications } from '@/hooks/use-notifications';\n\nexport const NotificationBell = () => {\n  const { unreadCount } = useNotifications();\n\n  return (\n    <Popover>\n      <PopoverTrigger asChild>\n        <Button variant=\"ghost\" size=\"icon\" className=\"relative\">\n          <Bell className=\"h-5 w-5\" />\n          {unreadCount > 0 && (\n            <Badge \n              variant=\"destructive\" \n              className=\"absolute -top-1 -right-1 h-5 w-5 rounded-full p-0 flex items-center justify-center text-xs\"\n            >\n              {unreadCount > 99 ? '99+' : unreadCount}\n            </Badge>\n          )}\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent className=\"w-80 p-0\" align=\"end\">\n        <NotificationList />\n      </PopoverContent>\n    </Popover>\n  );\n};","size_bytes":1072},"src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"src/components/ui/use-toast.ts":{"content":"import { useToast, toast } from \"@/hooks/use-toast\";\n\nexport { useToast, toast };\n","size_bytes":82},"src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"src/components/ui/tooltip.tsx":{"content":"import * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1145},"src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"src/hooks/use-pull-refresh.tsx":{"content":"import { useState, useCallback } from 'react';\n\ninterface UsePullRefreshOptions {\n  onRefresh: () => Promise<void>;\n  threshold?: number;\n  disabled?: boolean;\n}\n\nexport function usePullRefresh({ onRefresh, threshold = 80, disabled = false }: UsePullRefreshOptions) {\n  const [isRefreshing, setIsRefreshing] = useState(false);\n  const [pullDistance, setPullDistance] = useState(0);\n\n  const handleTouchStart = useCallback((e: React.TouchEvent) => {\n    if (disabled || isRefreshing) return;\n    \n    // Only trigger if scrolled to top\n    if (window.scrollY > 0) return;\n    \n    const touch = e.touches[0];\n    return touch;\n  }, [disabled, isRefreshing]);\n\n  const handleTouchMove = useCallback((e: React.TouchEvent, startY: number) => {\n    if (disabled || isRefreshing) return;\n    \n    const touch = e.touches[0];\n    const distance = Math.max(0, touch.clientY - startY);\n    \n    if (distance > 0) {\n      e.preventDefault(); // Prevent scrolling\n      setPullDistance(Math.min(distance, threshold * 1.5));\n    }\n  }, [disabled, isRefreshing, threshold]);\n\n  const handleTouchEnd = useCallback(async () => {\n    if (disabled || isRefreshing) return;\n    \n    if (pullDistance >= threshold) {\n      setIsRefreshing(true);\n      try {\n        await onRefresh();\n      } catch (error) {\n        console.error('Refresh failed:', error);\n      } finally {\n        setIsRefreshing(false);\n      }\n    }\n    \n    setPullDistance(0);\n  }, [disabled, isRefreshing, pullDistance, threshold, onRefresh]);\n\n  const pullToRefreshProps = {\n    onTouchStart: (e: React.TouchEvent) => {\n      const startTouch = handleTouchStart(e);\n      if (startTouch) {\n        const startY = startTouch.clientY;\n        \n        const handleMove = (moveEvent: TouchEvent) => {\n          handleTouchMove(moveEvent as any, startY);\n        };\n        \n        const handleEnd = () => {\n          document.removeEventListener('touchmove', handleMove);\n          document.removeEventListener('touchend', handleEnd);\n          handleTouchEnd();\n        };\n        \n        document.addEventListener('touchmove', handleMove, { passive: false });\n        document.addEventListener('touchend', handleEnd);\n      }\n    },\n  };\n\n  return {\n    isRefreshing,\n    pullDistance,\n    pullToRefreshProps,\n  };\n}","size_bytes":2274},"src/pages/mobile/MobileSettings.tsx":{"content":"import { useState } from \"react\";\nimport { MobileLayout } from \"@/components/mobile/MobileLayout\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  Shield, \n  Download, \n  Trash2, \n  ExternalLink, \n  Mail, \n  User, \n  Moon, \n  Sun,\n  Smartphone,\n  FileText,\n  HelpCircle\n} from \"lucide-react\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { useTheme } from \"@/contexts/ThemeProvider\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useNavigate } from \"react-router-dom\";\n\nexport default function MobileSettings() {\n  const [requireBiometric, setRequireBiometric] = useState(false);\n  const [requirePin, setRequirePin] = useState(false);\n  const { user, signOut } = useAuth();\n  const { theme, setTheme } = useTheme();\n  const { toast } = useToast();\n  const navigate = useNavigate();\n\n  const handleSignOut = async () => {\n    try {\n      await signOut();\n      navigate(\"/onboarding\");\n      toast({\n        title: \"Signed out\",\n        description: \"You have been successfully signed out\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to sign out\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleExportVault = () => {\n    // TODO: Implement vault export\n    toast({\n      title: \"Coming Soon\",\n      description: \"Vault export will be available soon\",\n    });\n  };\n\n  const handleDeleteVault = () => {\n    // TODO: Implement vault deletion with confirmation\n    toast({\n      title: \"Coming Soon\",\n      description: \"Vault deletion will be available soon\",\n    });\n  };\n\n  const openLink = (url: string) => {\n    window.open(url, '_blank');\n  };\n\n  return (\n    <MobileLayout>\n      <div className=\"p-mobile-padding space-y-6\">\n        {/* Header */}\n        <div className=\"space-y-2\">\n          <h1 className=\"text-2xl font-bold text-foreground\">Settings</h1>\n          <p className=\"text-muted-foreground text-sm\">\n            Manage your account and preferences\n          </p>\n        </div>\n\n        {/* Profile Section */}\n        {user ? (\n          <Card>\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"text-lg flex items-center gap-2\">\n                <User className=\"w-5 h-5\" />\n                Account\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"flex items-center gap-3\">\n                <div className=\"w-12 h-12 bg-gradient-primary rounded-full flex items-center justify-center text-white font-semibold\">\n                  {user.email?.charAt(0).toUpperCase() || \"?\"}\n                </div>\n                <div className=\"flex-1 min-w-0\">\n                  <p className=\"font-medium truncate\">{user.email}</p>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Signed in with Google\n                  </p>\n                </div>\n                <Badge variant=\"outline\" className=\"text-xs\">\n                  Premium\n                </Badge>\n              </div>\n              \n              <Button\n                variant=\"outline\"\n                onClick={handleSignOut}\n                className=\"w-full\"\n              >\n                Sign Out\n              </Button>\n            </CardContent>\n          </Card>\n        ) : (\n          <Card>\n            <CardContent className=\"p-6 text-center space-y-3\">\n              <User className=\"w-12 h-12 mx-auto text-muted-foreground\" />\n              <div className=\"space-y-1\">\n                <h3 className=\"font-medium\">Not signed in</h3>\n                <p className=\"text-sm text-muted-foreground\">\n                  Sign in to access all features\n                </p>\n              </div>\n              <Button onClick={() => navigate(\"/onboarding\")} className=\"bg-primary text-primary-foreground\">\n                Sign In\n              </Button>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Security Settings */}\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-lg flex items-center gap-2\">\n              <Shield className=\"w-5 h-5\" />\n              Security\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"space-y-1\">\n                <p className=\"font-medium text-sm\">Require PIN for vault</p>\n                <p className=\"text-xs text-muted-foreground\">\n                  Add an extra layer of security\n                </p>\n              </div>\n              <Switch\n                checked={requirePin}\n                onCheckedChange={setRequirePin}\n              />\n            </div>\n            \n            <div className=\"flex items-center justify-between\">\n              <div className=\"space-y-1\">\n                <p className=\"font-medium text-sm\">Biometric unlock</p>\n                <p className=\"text-xs text-muted-foreground\">\n                  Use fingerprint or face unlock\n                </p>\n              </div>\n              <Switch\n                checked={requireBiometric}\n                onCheckedChange={setRequireBiometric}\n              />\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Appearance */}\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-lg flex items-center gap-2\">\n              {theme === 'dark' ? <Moon className=\"w-5 h-5\" /> : <Sun className=\"w-5 h-5\" />}\n              Appearance\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"flex items-center justify-between\">\n              <div className=\"space-y-1\">\n                <p className=\"font-medium text-sm\">Dark mode</p>\n                <p className=\"text-xs text-muted-foreground\">\n                  Toggle between light and dark themes\n                </p>\n              </div>\n              <Switch\n                checked={theme === 'dark'}\n                onCheckedChange={(checked) => setTheme(checked ? 'dark' : 'light')}\n              />\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Vault Management */}\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-lg flex items-center gap-2\">\n              <Smartphone className=\"w-5 h-5\" />\n              Vault Management\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-3\">\n            <Button\n              variant=\"outline\"\n              onClick={handleExportVault}\n              className=\"w-full justify-start\"\n            >\n              <Download className=\"w-4 h-4 mr-2\" />\n              Export Vault\n            </Button>\n            \n            <Button\n              variant=\"outline\"\n              onClick={handleDeleteVault}\n              className=\"w-full justify-start text-destructive hover:text-destructive\"\n            >\n              <Trash2 className=\"w-4 h-4 mr-2\" />\n              Delete Vault\n            </Button>\n          </CardContent>\n        </Card>\n\n        {/* Support & Legal */}\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-lg flex items-center gap-2\">\n              <HelpCircle className=\"w-5 h-5\" />\n              Support & Legal\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-3\">\n            <Button\n              variant=\"ghost\"\n              onClick={() => openLink(\"mailto:support@subcircle.app\")}\n              className=\"w-full justify-start\"\n            >\n              <Mail className=\"w-4 h-4 mr-2\" />\n              Support Email\n              <ExternalLink className=\"w-3 h-3 ml-auto\" />\n            </Button>\n            \n            <Button\n              variant=\"ghost\"\n              onClick={() => openLink(\"#\")}\n              className=\"w-full justify-start\"\n            >\n              <FileText className=\"w-4 h-4 mr-2\" />\n              Privacy Policy\n              <ExternalLink className=\"w-3 h-3 ml-auto\" />\n            </Button>\n            \n            <Button\n              variant=\"ghost\"\n              onClick={() => openLink(\"#\")}\n              className=\"w-full justify-start\"\n            >\n              <FileText className=\"w-4 h-4 mr-2\" />\n              Terms of Service\n              <ExternalLink className=\"w-3 h-3 ml-auto\" />\n            </Button>\n          </CardContent>\n        </Card>\n\n        {/* App Info */}\n        <Card className=\"border-subcircle-cyan/20 bg-subcircle-cyan/5\">\n          <CardContent className=\"p-4 text-center space-y-2\">\n            <div className=\"w-12 h-12 bg-white rounded-full mx-auto flex items-center justify-center p-2 shadow-sm\">\n              <img \n                src=\"/lovable-uploads/105cee16-9e7f-45ba-9b51-01a7a6f35377.png\" \n                alt=\"SubCircle Logo\" \n                className=\"w-full h-full object-contain\"\n              />\n            </div>\n            <div className=\"space-y-1\">\n              <h3 className=\"font-semibold\">SubCircle</h3>\n              <p className=\"text-xs text-muted-foreground\">\n                Version 1.0.0 • Track. Share. Never double-pay.\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </MobileLayout>\n  );\n}","size_bytes":9513},"src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"src/lib/logo-utils.ts":{"content":"// Centralized logo handling for all streaming services\n// This ensures consistent logo display across all components\n\ninterface StreamingService {\n  name?: string;\n  logo_url?: string | null;\n  website_url?: string | null;\n}\n\n// High-quality logo overrides for services with problematic database URLs\nconst LOGO_OVERRIDES: Record<string, string> = {\n  'Disney+': 'https://upload.wikimedia.org/wikipedia/commons/thumb/3/36/Disney%2B_logo.svg/512px-Disney%2B_logo.svg.png',\n  'Netflix': 'https://upload.wikimedia.org/wikipedia/commons/thumb/0/08/Netflix_2015_logo.svg/512px-Netflix_2015_logo.svg.png',\n  'Hulu': 'https://upload.wikimedia.org/wikipedia/commons/thumb/e/e4/Hulu_Logo.svg/512px-Hulu_Logo.svg.png',\n  'HBO Max': 'https://upload.wikimedia.org/wikipedia/commons/thumb/1/17/HBO_Max_Logo.svg/512px-HBO_Max_Logo.svg.png',\n  'Amazon Prime Video': 'https://upload.wikimedia.org/wikipedia/commons/thumb/f/f1/Prime_Video.png/512px-Prime_Video.png',\n  'Prime Video': 'https://upload.wikimedia.org/wikipedia/commons/thumb/f/f1/Prime_Video.png/512px-Prime_Video.png',\n  'Spotify': 'https://upload.wikimedia.org/wikipedia/commons/thumb/1/19/Spotify_logo_without_text.svg/512px-Spotify_logo_without_text.svg.png',\n  'Apple Music': 'https://upload.wikimedia.org/wikipedia/commons/thumb/5/5f/Apple_Music_icon.svg/512px-Apple_Music_icon.svg.png',\n  'Apple TV+': 'https://upload.wikimedia.org/wikipedia/commons/thumb/2/28/Apple_TV_Plus_Logo.svg/512px-Apple_TV_Plus_Logo.svg.png',\n  'YouTube Premium': 'https://upload.wikimedia.org/wikipedia/commons/thumb/0/09/YouTube_full-color_icon_%282017%29.svg/512px-YouTube_full-color_icon_%282017%29.svg.png',\n  'YouTube': 'https://upload.wikimedia.org/wikipedia/commons/thumb/0/09/YouTube_full-color_icon_%282017%29.svg/512px-YouTube_full-color_icon_%282017%29.svg.png',\n  'Crunchyroll': 'https://upload.wikimedia.org/wikipedia/commons/thumb/f/f6/Crunchyroll_Logo.svg/512px-Crunchyroll_Logo.svg.png',\n  'Shudder': 'https://upload.wikimedia.org/wikipedia/commons/thumb/5/51/Shudder_2017.svg/512px-Shudder_2017.svg.png',\n  'Kayo': 'https://icon.horse/icon/kayosports.com.au',\n  'Kayo Sports': 'https://icon.horse/icon/kayosports.com.au'\n};\n\n// Generate fallback logo from website domain using icon.horse\nconst getIconHorseLogo = (website_url?: string | null): string | undefined => {\n  try {\n    if (website_url) {\n      const hostname = new URL(website_url).hostname;\n      return `https://icon.horse/icon/${hostname}`;\n    }\n  } catch {}\n  return undefined;\n};\n\n// Main logo resolution function with fallback chain\nexport const getServiceLogo = (service: StreamingService): string => {\n  const serviceName = service.name || '';\n  \n  // Priority order:\n  // 1. High-quality override (for known problematic services)\n  // 2. Icon.horse from website_url\n  // 3. Database logo_url\n  // 4. Placeholder\n  \n  const override = LOGO_OVERRIDES[serviceName];\n  if (override) return override;\n  \n  const iconHorse = getIconHorseLogo(service.website_url);\n  if (iconHorse) return iconHorse;\n  \n  if (service.logo_url) return service.logo_url;\n  \n  return '/placeholder.svg';\n};\n\n// Error handling for img onError events\nexport const handleLogoError = (\n  event: React.SyntheticEvent<HTMLImageElement, Event>,\n  service: StreamingService\n) => {\n  const img = event.currentTarget;\n  const currentSrc = img.src;\n  \n  // Prevent infinite loops\n  if (img.dataset.errorHandled === 'true') {\n    img.src = '/placeholder.svg';\n    return;\n  }\n  \n  const serviceName = service.name || '';\n  const override = LOGO_OVERRIDES[serviceName];\n  const iconHorse = getIconHorseLogo(service.website_url);\n  const dbLogo = service.logo_url;\n  \n  // Try next fallback in order\n  if (currentSrc === override && iconHorse && iconHorse !== currentSrc) {\n    img.src = iconHorse;\n    return;\n  }\n  \n  if ((currentSrc === override || currentSrc === iconHorse) && dbLogo && dbLogo !== currentSrc) {\n    img.src = dbLogo;\n    return;\n  }\n  \n  // Final fallback - create a colored initial instead of placeholder.svg\n  img.dataset.errorHandled = 'true';\n  const fallbackName = service.name || 'S';\n  const canvas = document.createElement('canvas');\n  canvas.width = 64;\n  canvas.height = 64;\n  const ctx = canvas.getContext('2d');\n  if (ctx) {\n    // Create a gradient background\n    const gradient = ctx.createLinearGradient(0, 0, 64, 64);\n    gradient.addColorStop(0, '#3b82f6');\n    gradient.addColorStop(1, '#1d4ed8');\n    ctx.fillStyle = gradient;\n    ctx.fillRect(0, 0, 64, 64);\n    \n    // Add the initial\n    ctx.fillStyle = 'white';\n    ctx.font = 'bold 28px system-ui';\n    ctx.textAlign = 'center';\n    ctx.textBaseline = 'middle';\n    ctx.fillText(fallbackName.charAt(0).toUpperCase(), 32, 32);\n    \n    img.src = canvas.toDataURL();\n  } else {\n    img.src = '/placeholder.svg';\n  }\n};\n\n// Check if a service has a logo available\nexport const hasServiceLogo = (service: StreamingService): boolean => {\n  const serviceName = service.name || '';\n  // Always return true since we have fallback logic in getServiceLogo\n  return true;\n};","size_bytes":5036},"src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7295},"src/components/ui/notification-center.tsx":{"content":"import { useState } from 'react';\nimport { formatDistanceToNow } from 'date-fns';\nimport { Button } from '@/components/ui/button';\nimport { ScrollArea } from '@/components/ui/scroll-area';\nimport { Badge } from '@/components/ui/badge';\nimport { Separator } from '@/components/ui/separator';\nimport { Input } from '@/components/ui/input';\nimport { useNotifications } from '@/hooks/use-notifications';\nimport { \n  CheckCheck, \n  Users, \n  UserX, \n  UserCheck, \n  Shield, \n  CreditCard, \n  AlertTriangle, \n  Bell,\n  Trash2,\n  Search,\n  Filter,\n  X,\n  Key,\n  Calendar,\n  TrendingUp,\n  Settings\n} from 'lucide-react';\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from '@/components/ui/dropdown-menu';\n\nconst getNotificationIcon = (type: string, priority?: string) => {\n  const iconClass = `h-4 w-4 ${\n    priority === 'urgent' ? 'text-subcircle-error animate-pulse' :\n    priority === 'high' ? 'text-subcircle-error' :\n    priority === 'medium' ? 'text-subcircle-indigo' : \n    'text-muted-foreground'\n  }`;\n\n  switch (type) {\n    case 'partner_accepted':\n      return <UserCheck className={iconClass.replace('text-muted-foreground', 'text-emerald-500')} />;\n    case 'partner_connected':\n      return <Users className={iconClass.replace('text-muted-foreground', 'text-primary')} />;\n    case 'partner_rejected':\n      return <UserX className={iconClass.replace('text-muted-foreground', 'text-destructive')} />;\n    case 'partner_request':\n      return <Users className={iconClass.replace('text-muted-foreground', 'text-subcircle-indigo')} />;\n    case 'credential_shared':\n      return <Key className={iconClass.replace('text-muted-foreground', 'text-subcircle-cyan')} />;\n    case 'credential_accessed':\n      return <Shield className={iconClass.replace('text-muted-foreground', 'text-subcircle-teal')} />;\n    case 'subscription_renewal':\n      return <Calendar className={iconClass.replace('text-muted-foreground', 'text-amber-500')} />;\n    case 'subscription_cost_change':\n      return <TrendingUp className={iconClass.replace('text-muted-foreground', 'text-orange-500')} />;\n    case 'security':\n      return <Shield className={iconClass.replace('text-muted-foreground', 'text-subcircle-error')} />;\n    case 'system':\n      return <Settings className={iconClass.replace('text-muted-foreground', 'text-subcircle-indigo')} />;\n    default:\n      return <Bell className={iconClass} />;\n  }\n};\n\nconst getPriorityBadge = (priority?: string) => {\n  switch (priority) {\n    case 'urgent':\n      return <Badge className=\"bg-subcircle-error text-white animate-pulse\">Urgent</Badge>;\n    case 'high':\n      return <Badge className=\"bg-subcircle-error text-white\">High</Badge>;\n    case 'medium':\n      return <Badge className=\"bg-subcircle-indigo text-white\">Medium</Badge>;\n    case 'low':\n    default:\n      return null;\n  }\n};\n\nconst getCategoryColor = (category?: string) => {\n  switch (category) {\n    case 'partner':\n      return 'border-l-primary';\n    case 'subscription':\n      return 'border-l-subcircle-indigo';\n    case 'security':\n      return 'border-l-subcircle-error';\n    case 'system':\n      return 'border-l-subcircle-cyan';\n    default:\n      return 'border-l-muted';\n  }\n};\n\nexport const NotificationCenter = () => {\n  const { \n    notifications, \n    allNotifications,\n    loading, \n    unreadCount, \n    filter,\n    setFilter,\n    markAsRead, \n    markAllAsRead,\n    deleteNotification,\n    clearAllNotifications\n  } = useNotifications();\n  \n  const [searchQuery, setSearchQuery] = useState('');\n\n  const filteredNotifications = notifications.filter(notification =>\n    notification.title.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    notification.message.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n\n  const categoryTabs = [\n    { id: 'all', label: 'All', count: allNotifications.length },\n    { id: 'partner', label: 'Partners', count: allNotifications.filter(n => n.category === 'partner').length },\n    { id: 'subscription', label: 'Subscriptions', count: allNotifications.filter(n => n.category === 'subscription').length },\n    { id: 'security', label: 'Security', count: allNotifications.filter(n => n.category === 'security').length },\n    { id: 'system', label: 'System', count: allNotifications.filter(n => n.category === 'system').length },\n  ];\n\n  if (loading) {\n    return (\n      <div className=\"w-full max-w-2xl mx-auto\">\n        <div className=\"animate-pulse space-y-4 p-6\">\n          <div className=\"h-4 bg-muted rounded w-1/4\"></div>\n          <div className=\"space-y-3\">\n            {[...Array(3)].map((_, i) => (\n              <div key={i} className=\"h-16 bg-muted rounded\"></div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"w-full max-w-2xl mx-auto bg-card rounded-lg border shadow-card animate-fade-in\">\n      {/* Header */}\n      <div className=\"p-6 border-b bg-gradient-subtle\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <div className=\"flex items-center gap-3\">\n            <Bell className=\"h-6 w-6 text-primary\" />\n            <h2 className=\"text-xl font-semibold\">Notification Center</h2>\n            {unreadCount > 0 && (\n              <Badge className=\"bg-subcircle-error text-white\">\n                {unreadCount}\n              </Badge>\n            )}\n          </div>\n          \n          <div className=\"flex items-center gap-2\">\n            {unreadCount > 0 && (\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={markAllAsRead}\n                className=\"text-xs\"\n              >\n                <CheckCheck className=\"h-3 w-3 mr-1\" />\n                Mark all read\n              </Button>\n            )}\n            \n            <DropdownMenu>\n              <DropdownMenuTrigger asChild>\n                <Button variant=\"outline\" size=\"sm\">\n                  <Settings className=\"h-3 w-3\" />\n                </Button>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent align=\"end\">\n                <DropdownMenuItem onClick={clearAllNotifications}>\n                  <Trash2 className=\"h-4 w-4 mr-2\" />\n                  Clear all notifications\n                </DropdownMenuItem>\n              </DropdownMenuContent>\n            </DropdownMenu>\n          </div>\n        </div>\n\n        {/* Search */}\n        <div className=\"relative\">\n          <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n          <Input\n            placeholder=\"Search notifications...\"\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n            className=\"pl-10 pr-4\"\n          />\n          {searchQuery && (\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => setSearchQuery('')}\n              className=\"absolute right-1 top-1/2 transform -translate-y-1/2 h-6 w-6 p-0\"\n            >\n              <X className=\"h-3 w-3\" />\n            </Button>\n          )}\n        </div>\n\n        {/* Category Tabs */}\n        <div className=\"flex gap-2 mt-4 overflow-x-auto\">\n          {categoryTabs.map((tab) => (\n            <Button\n              key={tab.id}\n              variant={filter === tab.id ? \"default\" : \"outline\"}\n              size=\"sm\"\n              onClick={() => setFilter(tab.id)}\n              className=\"whitespace-nowrap\"\n            >\n              {tab.label}\n              {tab.count > 0 && (\n                <Badge variant=\"secondary\" className=\"ml-1 text-xs\">\n                  {tab.count}\n                </Badge>\n              )}\n            </Button>\n          ))}\n        </div>\n      </div>\n\n      {/* Notification List */}\n      <ScrollArea className=\"h-[500px]\">\n        {filteredNotifications.length === 0 ? (\n          <div className=\"p-8 text-center text-muted-foreground\">\n            <Bell className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n            <p className=\"text-lg mb-2\">\n              {searchQuery ? 'No matching notifications' : 'All caught up!'}\n            </p>\n            <p className=\"text-sm\">\n              {searchQuery ? 'Try adjusting your search terms.' : \"You don't have any notifications right now.\"}\n            </p>\n          </div>\n        ) : (\n          <div className=\"divide-y\">\n            {filteredNotifications.map((notification) => (\n              <div\n                key={notification.id}\n                className={`group relative p-4 hover:bg-accent/30 transition-all cursor-pointer border-l-4 ${getCategoryColor(notification.category)} ${\n                  !notification.read ? 'bg-accent/10' : ''\n                }`}\n                onClick={() => !notification.read && markAsRead(notification.id)}\n              >\n                {/* Priority indicator */}\n                {notification.priority === 'urgent' && (\n                  <div className=\"absolute top-2 right-2\">\n                    <div className=\"w-2 h-2 bg-subcircle-error rounded-full animate-pulse\"></div>\n                  </div>\n                )}\n\n                <div className=\"flex items-start gap-3\">\n                  <div className=\"mt-1\">\n                    {getNotificationIcon(notification.type, notification.priority)}\n                  </div>\n                  \n                  <div className=\"flex-1 min-w-0\">\n                    <div className=\"flex items-start justify-between gap-2 mb-2\">\n                      <div className=\"flex items-center gap-2 flex-wrap\">\n                        <h4 className=\"font-medium text-sm\">\n                          {notification.title}\n                        </h4>\n                        {!notification.read && (\n                          <Badge variant=\"secondary\" className=\"h-5 px-1.5 text-xs\">\n                            New\n                          </Badge>\n                        )}\n                        {getPriorityBadge(notification.priority)}\n                      </div>\n                      \n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={(e) => {\n                          e.stopPropagation();\n                          deleteNotification(notification.id);\n                        }}\n                        className=\"opacity-0 group-hover:opacity-100 transition-opacity h-6 w-6 p-0\"\n                      >\n                        <X className=\"h-3 w-3\" />\n                      </Button>\n                    </div>\n                    \n                    <p className=\"text-sm text-muted-foreground mb-3 leading-relaxed\">\n                      {notification.message}\n                    </p>\n                    \n                    <div className=\"flex items-center justify-between\">\n                      <p className=\"text-xs text-muted-foreground\">\n                        {formatDistanceToNow(new Date(notification.created_at), { addSuffix: true })}\n                      </p>\n                      \n                      {notification.action_url && (\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={(e) => {\n                            e.stopPropagation();\n                            // Handle action URL navigation\n                            window.location.href = notification.action_url!;\n                          }}\n                          className=\"text-xs h-7\"\n                        >\n                          View\n                        </Button>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        )}\n      </ScrollArea>\n    </div>\n  );\n};","size_bytes":11795},"src/hooks/use-push-notifications.ts":{"content":"import { useState, useEffect } from 'react';\nimport { useToast } from '@/hooks/use-toast';\n\nexport interface PushSubscription {\n  endpoint: string;\n  keys: {\n    auth: string;\n    p256dh: string;\n  };\n}\n\nexport const usePushNotifications = () => {\n  const [isSupported, setIsSupported] = useState(false);\n  const [isSubscribed, setIsSubscribed] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [registration, setRegistration] = useState<ServiceWorkerRegistration | null>(null);\n  const [subscription, setSubscription] = useState<PushSubscription | null>(null);\n  const [vapidPublicKey, setVapidPublicKey] = useState<string | null>(null);\n  const { toast } = useToast();\n\n  useEffect(() => {\n    checkSupport();\n    registerServiceWorker();\n    fetchVapidPublicKey();\n  }, []);\n\n  const checkSupport = () => {\n    const supported = 'serviceWorker' in navigator && 'PushManager' in window && 'Notification' in window;\n    setIsSupported(supported);\n    return supported;\n  };\n\n  const fetchVapidPublicKey = async () => {\n    try {\n      // TODO: Replace with actual backend API call\n      // For now, set a mock VAPID key to allow testing\n      const mockVapidKey = 'BCrMJj9_y5I0xqUWU3hN-OXX8cGQfU5bWDxpqKpbOOq-NJFT5IWZHKvKBXq5KxvKYXB_kKxgPQYBaQy1I0xqUWU';\n      setVapidPublicKey(mockVapidKey);\n      console.log('Mock VAPID public key set');\n    } catch (error) {\n      console.error('Error setting mock VAPID public key:', error);\n    }\n  };\n\n  const registerServiceWorker = async () => {\n    if (!checkSupport()) return;\n\n    try {\n      const reg = await navigator.serviceWorker.register('/sw.js');\n      setRegistration(reg);\n      \n      // Check if already subscribed\n      const existingSubscription = await reg.pushManager.getSubscription();\n      if (existingSubscription) {\n        setIsSubscribed(true);\n        const subscriptionData: PushSubscription = {\n          endpoint: existingSubscription.endpoint,\n          keys: {\n            auth: btoa(String.fromCharCode(...new Uint8Array(existingSubscription.getKey('auth')!))),\n            p256dh: btoa(String.fromCharCode(...new Uint8Array(existingSubscription.getKey('p256dh')!)))\n          }\n        };\n        setSubscription(subscriptionData);\n      }\n    } catch (error) {\n      console.error('Service worker registration failed:', error);\n      toast({\n        title: \"Service Worker Error\",\n        description: \"Failed to register service worker for push notifications.\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  const requestPermission = async (): Promise<NotificationPermission> => {\n    if (!isSupported) {\n      throw new Error('Push notifications are not supported');\n    }\n\n    // Check current permission status first\n    const currentPermission = Notification.permission;\n    console.log('Current notification permission:', currentPermission);\n\n    if (currentPermission === 'granted') {\n      return 'granted';\n    }\n\n    if (currentPermission === 'denied') {\n      throw new Error('Notifications are blocked. Please enable them in your browser settings.');\n    }\n\n    // Request permission\n    const permission = await Notification.requestPermission();\n    console.log('Permission request result:', permission);\n    return permission;\n  };\n\n  const subscribeToPushNotifications = async (): Promise<PushSubscription | null> => {\n    if (isLoading) return null;\n    \n    setIsLoading(true);\n    \n    try {\n      // Check if service worker is ready\n      if (!registration) {\n        throw new Error('Service worker not registered. Please refresh the page and try again.');\n      }\n\n      if (!vapidPublicKey) {\n        throw new Error('VAPID public key not available. Please try again later.');\n      }\n\n      console.log('Requesting notification permission...');\n      const permission = await requestPermission();\n      \n      if (permission !== 'granted') {\n        const message = permission === 'denied' \n          ? \"Notifications are blocked. Please enable them in your browser settings and refresh the page.\"\n          : \"Push notifications require permission to work. Please allow notifications when prompted.\";\n        \n        toast({\n          title: \"Permission Required\",\n          description: message,\n          variant: \"destructive\"\n        });\n        return null;\n      }\n\n      console.log('Subscribing to push manager...');\n      \n      // Convert VAPID key for browser compatibility\n      const urlBase64ToUint8Array = (base64String: string) => {\n        const padding = '='.repeat((4 - base64String.length % 4) % 4);\n        const base64 = (base64String + padding)\n          .replace(/-/g, '+')\n          .replace(/_/g, '/');\n\n        const rawData = window.atob(base64);\n        const outputArray = new Uint8Array(rawData.length);\n\n        for (let i = 0; i < rawData.length; ++i) {\n          outputArray[i] = rawData.charCodeAt(i);\n        }\n        return outputArray;\n      };\n\n      const pushSubscription = await registration.pushManager.subscribe({\n        userVisibleOnly: true,\n        applicationServerKey: urlBase64ToUint8Array(vapidPublicKey)\n      });\n\n      const subscriptionData: PushSubscription = {\n        endpoint: pushSubscription.endpoint,\n        keys: {\n          auth: btoa(String.fromCharCode(...new Uint8Array(pushSubscription.getKey('auth')!))),\n          p256dh: btoa(String.fromCharCode(...new Uint8Array(pushSubscription.getKey('p256dh')!)))\n        }\n      };\n\n      // TODO: Store subscription in backend\n      // For now, just log the subscription data\n      console.log('Mock subscription storage:', subscriptionData);\n\n      setIsSubscribed(true);\n      setSubscription(subscriptionData);\n\n      toast({\n        title: \"Push Notifications Enabled! 🔔\",\n        description: \"You'll now receive push notifications for important updates.\",\n      });\n\n      return subscriptionData;\n    } catch (error: any) {\n      console.error('Failed to subscribe to push notifications:', error);\n      toast({\n        title: \"Subscription Failed\",\n        description: error.message || \"Failed to enable push notifications. Please try again.\",\n        variant: \"destructive\"\n      });\n      return null;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const unsubscribeFromPushNotifications = async (): Promise<boolean> => {\n    if (isLoading) return false;\n    \n    setIsLoading(true);\n    \n    try {\n      if (!registration) {\n        throw new Error('Service worker not registered');\n      }\n\n      const pushSubscription = await registration.pushManager.getSubscription();\n      if (pushSubscription) {\n        // TODO: Remove from backend\n        // For now, just log the unsubscription\n        if (subscription?.endpoint) {\n          console.log('Mock subscription removal:', subscription.endpoint);\n        }\n\n        // Unsubscribe from browser\n        await pushSubscription.unsubscribe();\n      }\n\n      setIsSubscribed(false);\n      setSubscription(null);\n\n      toast({\n        title: \"Push Notifications Disabled\",\n        description: \"You will no longer receive push notifications.\",\n      });\n\n      return true;\n    } catch (error: any) {\n      console.error('Failed to unsubscribe from push notifications:', error);\n      toast({\n        title: \"Unsubscription Failed\",\n        description: error.message || \"Failed to disable push notifications. Please try again.\",\n        variant: \"destructive\"\n      });\n      return false;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const sendTestPushNotification = async () => {\n    if (!isSubscribed || !subscription) {\n      toast({\n        title: \"Not Subscribed\",\n        description: \"Please enable push notifications first.\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    if (isLoading) return;\n    setIsLoading(true);\n\n    try {\n      // TODO: Implement actual test notification sending\n      // For now, just show a mock success message\n      \n      toast({\n        title: \"Test Notification Sent! 🚀\",\n        description: \"Mock test notification sent. Check your notifications!\",\n      });\n    } catch (error: any) {\n      console.error('Failed to send test notification:', error);\n      toast({\n        title: \"Test Failed\",\n        description: \"Failed to send test notification (mock).\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return {\n    isSupported,\n    isSubscribed,\n    isLoading,\n    subscription,\n    registration,\n    vapidPublicKey,\n    requestPermission,\n    subscribeToPushNotifications,\n    unsubscribeFromPushNotifications,\n    sendTestPushNotification\n  };\n};","size_bytes":8617},"src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3\",\n        sm: \"h-9 px-2.5\",\n        lg: \"h-11 px-5\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1435},"src/pages/mobile/Link.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { MobileLayout } from \"@/components/mobile/MobileLayout\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Copy, Users, UserPlus, CheckCircle, Clock, X, Check } from \"lucide-react\";\n// Removed Supabase import - using backend API instead\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useNavigate } from \"react-router-dom\";\n\ninterface PartnerConnection {\n  id: string;\n  user_id: string;\n  partner_id: string;\n  status: string;\n  created_at: string;\n  isIncoming?: boolean;\n  profiles?: {\n    display_name?: string;\n    avatar_url?: string;\n  } | null;\n}\n\n// Demo data for showcasing link features\nconst demoConnections: PartnerConnection[] = [\n  {\n    id: 'demo-connection-1',\n    user_id: 'demo-user',\n    partner_id: 'demo-partner-sarah',\n    status: 'active',\n    created_at: '2024-01-15T10:00:00Z',\n    isIncoming: false,\n    profiles: {\n      display_name: 'Sarah Johnson',\n      avatar_url: null\n    }\n  },\n  {\n    id: 'demo-connection-2',\n    user_id: 'demo-user',\n    partner_id: 'demo-partner-alex',\n    status: 'pending',\n    created_at: '2024-01-20T14:30:00Z',\n    isIncoming: true,\n    profiles: {\n      display_name: 'Alex Smith',\n      avatar_url: null\n    }\n  }\n];\n\nconst demoCodes = [\n  { code: 'DEMO-SAR', name: 'Sarah Johnson' },\n  { code: 'DEMO-ALE', name: 'Alex Smith' },\n  { code: 'DEMO-MIK', name: 'Mike Wilson' }\n];\n\nexport default function Link() {\n  const [myLinkCode, setMyLinkCode] = useState(\"\");\n  const [partnerCode, setPartnerCode] = useState(\"\");\n  const [connections, setConnections] = useState<PartnerConnection[]>([]);\n  const [loading, setLoading] = useState(true);\n  const { user, isDemoMode } = useAuth();\n  const { toast } = useToast();\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    if (user) {\n      generateMyLinkCode();\n      fetchConnections();\n    } else {\n      setLoading(false);\n    }\n  }, [user]);\n\n  const generateMyLinkCode = () => {\n    if (!user) return;\n    \n    if (isDemoMode) {\n      // Use a different code for demo mode to avoid self-connection issues\n      setMyLinkCode('DEMO-YOU');\n    } else {\n      // Generate a simple link code based on user ID (first 8 characters)\n      const code = user.id.substring(0, 8).toUpperCase();\n      setMyLinkCode(code);\n    }\n  };\n\n  const fetchConnections = async () => {\n    if (!user) return;\n    \n    try {\n      if (isDemoMode) {\n        // Use demo data to showcase features\n        setTimeout(() => {\n          setConnections(demoConnections);\n          setLoading(false);\n        }, 800); // Simulate loading time\n      } else {\n        // TODO: Replace with actual backend API call\n        // For now, set empty connections to allow the app to build\n        setConnections([]);\n        setLoading(false);\n      }\n    } catch (error) {\n      console.error(\"Error fetching connections:\", error);\n      setLoading(false);\n    }\n  };\n\n  const copyLinkCode = async () => {\n    try {\n      await navigator.clipboard.writeText(myLinkCode);\n      toast({\n        title: \"Copied!\",\n        description: \"Your link code has been copied to clipboard\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to copy link code\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const sendPartnerRequest = async () => {\n    if (!user || !partnerCode.trim()) return;\n    \n    try {\n      setLoading(true);\n      \n      // Check for self-connection\n      const myCode = isDemoMode ? 'DEMO-YOU' : user.id.substring(0, 8).toUpperCase();\n      if (partnerCode === myCode) {\n        toast({\n          title: \"Invalid code\",\n          description: \"You cannot connect to yourself\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n      \n      // In demo mode, check if it's a valid demo code\n      if (isDemoMode) {\n        const validDemoCode = demoCodes.find(demo => demo.code === partnerCode);\n        if (!validDemoCode) {\n          toast({\n            title: \"Invalid demo code\",\n            description: \"Try DEMO-SAR, DEMO-ALE, or DEMO-MIK\",\n            variant: \"destructive\",\n          });\n          return;\n        }\n        \n        // Check if already connected\n        const alreadyConnected = connections.some(\n          conn => conn.profiles?.display_name === validDemoCode.name\n        );\n        if (alreadyConnected) {\n          toast({\n            title: \"Already connected\",\n            description: `You are already connected to ${validDemoCode.name}`,\n            variant: \"destructive\",\n          });\n          return;\n        }\n        \n        toast({\n          title: \"Demo connection created!\",\n          description: `Connected to ${validDemoCode.name} (demo mode)`,\n        });\n      } else {\n        // Simulate sending partner request for non-demo mode\n        toast({\n          title: \"Request sent!\",\n          description: `Connection request sent (simulated)`,\n        });\n      }\n      \n      setPartnerCode(\"\");\n      await fetchConnections(); // Refresh the list\n      \n    } catch (error) {\n      console.error(\"Error sending partner request:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to send connection request\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'active':\n        return <CheckCircle className=\"w-4 h-4 text-success-green\" />;\n      case 'pending':\n        return <Clock className=\"w-4 h-4 text-yellow-500\" />;\n      case 'declined':\n        return <X className=\"w-4 h-4 text-destructive\" />;\n      default:\n        return <Clock className=\"w-4 h-4 text-muted-foreground\" />;\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'active':\n        return 'bg-success-green/10 text-success-green border-success-green/20';\n      case 'pending':\n        return 'bg-yellow-500/10 text-yellow-600 border-yellow-500/20';\n      case 'declined':\n        return 'bg-destructive/10 text-destructive border-destructive/20';\n      default:\n        return 'bg-muted text-muted-foreground';\n    }\n  };\n\n  const handleConnectionAction = async (connectionId: string, action: 'accept' | 'decline') => {\n    try {\n      // TODO: Implement backend API call\n      // For now, just simulate success\n      \n      toast({\n        title: action === 'accept' ? \"Connection accepted!\" : \"Connection declined\",\n        description: action === 'accept' \n          ? \"You can now compare subscriptions with this partner\" \n          : \"Connection request has been declined\",\n      });\n      \n      await fetchConnections(); // Refresh the list\n      \n    } catch (error) {\n      console.error(\"Error updating connection:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to update connection\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  if (!user) {\n    return (\n      <MobileLayout>\n        <div className=\"p-mobile-padding\">\n          <div className=\"text-center py-12 space-y-4\">\n            <Users className=\"w-16 h-16 mx-auto text-muted-foreground\" />\n            <div className=\"space-y-2\">\n              <h2 className=\"text-xl font-semibold\">Partner Connections</h2>\n              <p className=\"text-muted-foreground\">\n                Please sign in to connect with family and friends\n              </p>\n            </div>\n            <Button onClick={() => navigate(\"/onboarding\")} className=\"bg-primary text-primary-foreground\">\n              Sign In\n            </Button>\n          </div>\n        </div>\n      </MobileLayout>\n    );\n  }\n\n  if (loading) {\n    return (\n      <MobileLayout>\n        <div className=\"p-mobile-padding\">\n          <div className=\"flex items-center justify-center h-64\">\n            <div className=\"animate-pulse text-muted-foreground\">Loading connections...</div>\n          </div>\n        </div>\n      </MobileLayout>\n    );\n  }\n\n  return (\n    <MobileLayout>\n      <div className=\"p-mobile-padding space-y-6\">\n        {/* Header */}\n        <div className=\"space-y-2\">\n          <h1 className=\"text-2xl font-bold text-foreground\">Link Partners</h1>\n          <p className=\"text-muted-foreground text-sm\">\n            Connect with family and friends to share subscriptions\n          </p>\n        </div>\n\n        {/* My Link Code */}\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-lg flex items-center gap-2\">\n              <Users className=\"w-5 h-5\" />\n              Your Link Code\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <p className=\"text-sm text-muted-foreground\">\n                Share this code with family or friends to connect\n              </p>\n              <div className=\"flex gap-2\">\n                <div className=\"flex-1 p-3 bg-muted rounded-lg text-center\">\n                  <span className=\"text-2xl font-bold font-mono tracking-wider\">\n                    {myLinkCode}\n                  </span>\n                </div>\n                <Button\n                  variant=\"outline\"\n                  size=\"icon\"\n                  onClick={copyLinkCode}\n                  className=\"shrink-0\"\n                >\n                  <Copy className=\"w-4 h-4\" />\n                </Button>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Enter Partner Code */}\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-lg flex items-center gap-2\">\n              <UserPlus className=\"w-5 h-5\" />\n              Connect with Partner\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <p className=\"text-sm text-muted-foreground\">\n                Enter your partner's link code to connect\n              </p>\n              <div className=\"flex gap-2\">\n                <Input\n                  placeholder=\"Enter partner code\"\n                  value={partnerCode}\n                  onChange={(e) => setPartnerCode(e.target.value.toUpperCase())}\n                  className=\"flex-1 text-center font-mono tracking-wider\"\n                  maxLength={8}\n                />\n                <Button\n                  onClick={sendPartnerRequest}\n                  disabled={!partnerCode.trim()}\n                  className=\"shrink-0 bg-accent text-accent-foreground\"\n                >\n                  Connect\n                </Button>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Active Connections */}\n        <div className=\"space-y-4\">\n          <h2 className=\"text-lg font-semibold flex items-center gap-2\">\n            <CheckCircle className=\"w-5 h-5 text-success-green\" />\n            Your Connections\n            {connections.length > 0 && (\n              <Badge variant=\"secondary\" className=\"ml-auto\">\n                {connections.length}\n              </Badge>\n            )}\n          </h2>\n\n          {connections.length > 0 ? (\n            <div className=\"space-y-3\">\n              {connections.map((connection) => (\n                <Card key={connection.id}>\n                  <CardContent className=\"p-4\">\n                     <div className=\"flex items-center justify-between\">\n                       <div className=\"flex items-center gap-3\">\n                         <div className=\"w-10 h-10 bg-gradient-primary rounded-full flex items-center justify-center text-white font-semibold\">\n                           {connection.profiles?.display_name?.charAt(0) || \"?\"}\n                         </div>\n                         <div>\n                           <h3 className=\"font-medium\">\n                             {connection.profiles?.display_name || \"Unknown User\"}\n                           </h3>\n                           <p className=\"text-xs text-muted-foreground\">\n                             {connection.status === 'pending' && connection.isIncoming \n                               ? \"Wants to connect with you\"\n                               : `Connected ${new Date(connection.created_at).toLocaleDateString()}`\n                             }\n                           </p>\n                         </div>\n                       </div>\n                       \n                       <div className=\"flex items-center gap-2\">\n                         {connection.status === 'pending' && connection.isIncoming ? (\n                           <div className=\"flex gap-1\">\n                             <Button\n                               size=\"sm\"\n                               variant=\"outline\"\n                               onClick={() => handleConnectionAction(connection.id, 'accept')}\n                               className=\"h-8 px-3\"\n                             >\n                               <Check className=\"w-3 h-3 mr-1\" />\n                               Accept\n                             </Button>\n                             <Button\n                               size=\"sm\"\n                               variant=\"outline\"\n                               onClick={() => handleConnectionAction(connection.id, 'decline')}\n                               className=\"h-8 px-3 text-destructive border-destructive/20 hover:bg-destructive/10\"\n                             >\n                               <X className=\"w-3 h-3 mr-1\" />\n                               Decline\n                             </Button>\n                           </div>\n                         ) : (\n                           <div className=\"flex items-center gap-2\">\n                             {getStatusIcon(connection.status)}\n                             <Badge\n                               variant=\"outline\"\n                               className={getStatusColor(connection.status)}\n                             >\n                               {connection.status.charAt(0).toUpperCase() + connection.status.slice(1)}\n                             </Badge>\n                           </div>\n                         )}\n                       </div>\n                     </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          ) : (\n            <Card>\n              <CardContent className=\"p-6 text-center space-y-3\">\n                <Users className=\"w-12 h-12 mx-auto text-muted-foreground\" />\n                <div className=\"space-y-1\">\n                  <h3 className=\"font-medium\">No connections yet</h3>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Share your link code or enter a partner's code to get started\n                  </p>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n        </div>\n\n        {/* Help section */}\n        <Card className=\"border-subcircle-cyan/20 bg-subcircle-cyan/5\">\n          <CardContent className=\"p-4\">\n            <div className=\"space-y-2\">\n              <h4 className=\"font-medium text-sm\">\n                {isDemoMode ? \"Try Demo Codes\" : \"How it works\"}\n              </h4>\n              {isDemoMode ? (\n                <ul className=\"text-xs text-muted-foreground space-y-1\">\n                  <li>• Try connecting with <strong>DEMO-SAR</strong> (Sarah Johnson)</li>\n                  <li>• Try connecting with <strong>DEMO-ALE</strong> (Alex Smith)</li>\n                  <li>• Try connecting with <strong>DEMO-MIK</strong> (Mike Wilson)</li>\n                  <li>• These demo codes show different connection statuses</li>\n                </ul>\n              ) : (\n                <ul className=\"text-xs text-muted-foreground space-y-1\">\n                  <li>• Share your link code with family or friends</li>\n                  <li>• Enter their code to send a connection request</li>\n                  <li>• Once connected, compare subscriptions to avoid duplicates</li>\n                  <li>• Save money by sharing streaming services</li>\n                </ul>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </MobileLayout>\n  );\n}","size_bytes":16459},"src/components/ui/share-subscription-dialog.tsx":{"content":"import { useState } from \"react\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Label } from \"@/components/ui/label\";\nimport { Share2, Shield, Eye, EyeOff, Users, Key, Plus } from \"lucide-react\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useSubscriptionSharing, ShareSettings } from \"@/hooks/use-subscription-sharing\";\nimport { CredentialInputDialog } from \"@/components/ui/credential-input-dialog\";\nimport { useCredentialManagement } from \"@/hooks/use-credential-management\";\n\ninterface ShareSubscriptionDialogProps {\n  subscriptionId: string;\n  serviceName: string;\n  currentSettings: ShareSettings;\n  onUpdate?: () => void;\n}\n\nexport const ShareSubscriptionDialog = ({\n  subscriptionId,\n  serviceName,\n  currentSettings,\n  onUpdate\n}: ShareSubscriptionDialogProps) => {\n  const [open, setOpen] = useState(false);\n  const [credentialDialogOpen, setCredentialDialogOpen] = useState(false);\n  const [settings, setSettings] = useState<ShareSettings>(currentSettings);\n  const [hasCredentials, setHasCredentials] = useState(false);\n  \n  const { loading, updateSharingSettings } = useSubscriptionSharing();\n  const { getCredentials } = useCredentialManagement();\n\n  const checkCredentials = async () => {\n    const credentials = await getCredentials(subscriptionId);\n    setHasCredentials(!!credentials);\n  };\n\n  const handleOpenChange = (newOpen: boolean) => {\n    setOpen(newOpen);\n    if (newOpen) {\n      checkCredentials();\n    }\n  };\n\n  const handleSave = async () => {\n    const result = await updateSharingSettings(subscriptionId, settings);\n    if (result.success) {\n      setOpen(false);\n      onUpdate?.();\n    }\n  };\n\n  const handleSettingChange = (key: keyof ShareSettings, value: boolean) => {\n    setSettings(prev => {\n      const newSettings = { ...prev, [key]: value };\n      // If sharing is disabled, also disable credential sharing\n      if (key === 'shared_with_partners' && !value) {\n        newSettings.share_credentials = false;\n      }\n      return newSettings;\n    });\n  };\n\n  return (\n    <>\n      <Dialog open={open} onOpenChange={handleOpenChange}>\n      <DialogTrigger asChild>\n        <Button\n          variant=\"outline\"\n          size=\"sm\"\n          className=\"shrink-0 hover:bg-accent hover:text-accent-foreground transition-colors\"\n        >\n          <Share2 className=\"w-4 h-4 mr-1\" />\n          {currentSettings.shared_with_partners ? (\n            <Badge variant=\"secondary\" className=\"ml-1 text-xs\">\n              <Users className=\"w-3 h-3 mr-1\" />\n              Shared\n            </Badge>\n          ) : (\n            \"Share\"\n          )}\n        </Button>\n      </DialogTrigger>\n      <DialogContent className=\"sm:max-w-md\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            <Share2 className=\"w-5 h-5 text-primary\" />\n            Share {serviceName}\n          </DialogTitle>\n          <DialogDescription>\n            Manage how this subscription is shared with your partners\n          </DialogDescription>\n        </DialogHeader>\n\n        <div className=\"space-y-6\">\n          {/* Share with Partners Toggle */}\n          <div className=\"space-y-3\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"space-y-1\">\n                <Label className=\"text-sm font-medium\">Share with Partners</Label>\n                <p className=\"text-xs text-muted-foreground\">\n                  Allow connected partners to see this subscription\n                </p>\n              </div>\n              <Switch\n                checked={settings.shared_with_partners}\n                onCheckedChange={(checked) => \n                  handleSettingChange('shared_with_partners', checked)\n                }\n              />\n            </div>\n\n            {settings.shared_with_partners && (\n              <div className=\"pl-4 border-l-2 border-primary/20 space-y-3\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"space-y-1\">\n                    <Label className=\"text-sm font-medium flex items-center gap-2\">\n                      <Shield className=\"w-4 h-4 text-subcircle-cyan\" />\n                      Share Credentials\n                      {hasCredentials && (\n                        <Badge variant=\"secondary\" className=\"text-xs\">\n                          <Key className=\"w-3 h-3 mr-1\" />\n                          Saved\n                        </Badge>\n                      )}\n                    </Label>\n                    <p className=\"text-xs text-muted-foreground\">\n                      Share encrypted login credentials for account sharing\n                    </p>\n                  </div>\n                  <Switch\n                    checked={settings.share_credentials}\n                    onCheckedChange={(checked) => \n                      handleSettingChange('share_credentials', checked)\n                    }\n                    disabled={!settings.shared_with_partners || !hasCredentials}\n                  />\n                </div>\n\n                {/* Credential Management */}\n                <div className=\"flex gap-2 pl-6\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => setCredentialDialogOpen(true)}\n                    className=\"text-xs h-8\"\n                  >\n                    <Key className=\"w-3 h-3 mr-1\" />\n                    {hasCredentials ? \"Manage\" : \"Add\"} Credentials\n                  </Button>\n                </div>\n\n                {/* Security Notice */}\n                <div className=\"bg-subcircle-cyan/5 border border-subcircle-cyan/20 rounded-md p-3\">\n                  <div className=\"flex gap-2\">\n                    <Shield className=\"w-4 h-4 text-subcircle-cyan shrink-0 mt-0.5\" />\n                    <div className=\"space-y-1\">\n                      <h4 className=\"text-xs font-medium\">Secure Sharing</h4>\n                      <p className=\"text-xs text-muted-foreground\">\n                        {settings.share_credentials \n                          ? \"Credentials will be encrypted end-to-end and only visible to connected partners\"\n                          : \"Only subscription details will be shared, no credentials\"\n                        }\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            )}\n          </div>\n\n          {/* Action Buttons */}\n          <div className=\"flex justify-end gap-2\">\n            <Button \n              variant=\"outline\" \n              onClick={() => setOpen(false)}\n              disabled={loading}\n            >\n              Cancel\n            </Button>\n            <Button \n              onClick={handleSave}\n              disabled={loading}\n              className=\"bg-primary text-primary-foreground hover:bg-primary/90\"\n            >\n              {loading ? \"Saving...\" : \"Save Changes\"}\n            </Button>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n\n    <CredentialInputDialog\n      open={credentialDialogOpen}\n      onOpenChange={setCredentialDialogOpen}\n      subscriptionId={subscriptionId}\n      serviceName={serviceName}\n      onCredentialsSaved={() => {\n        checkCredentials();\n        onUpdate?.();\n      }}\n    />\n    </>\n  );\n};","size_bytes":7522},"src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1230},"src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"src/contexts/AuthContext.tsx":{"content":"import React, { createContext, useContext, useState } from 'react';\nimport { useAuth as useReplitAuth } from '@/hooks/useAuth';\nimport type { User } from '../../shared/schema';\n\ninterface AuthContextType {\n  user: User | null | undefined;\n  loading: boolean;\n  isAuthenticated: boolean;\n  isDemoMode: boolean;\n  signInWithGoogle: () => void;\n  signInWithReplit: () => void;\n  enterDemoMode: () => void;\n  exitDemoMode: () => void;\n  signOut: () => void;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\n// Demo user data for showcasing features\nconst demoUser: User = {\n  id: 'demo-user',\n  email: 'demo@example.com',\n  firstName: 'Demo',\n  lastName: 'User',\n  profileImageUrl: 'https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=150&h=150&fit=crop&crop=face',\n  createdAt: new Date('2024-01-01'),\n  updatedAt: new Date()\n};\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\nexport const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const { user: realUser, isLoading, isAuthenticated: realIsAuthenticated } = useReplitAuth();\n  const [isDemoMode, setIsDemoMode] = useState(false);\n\n  // Replit Auth uses direct navigation to /api/login\n  const signInWithReplit = () => {\n    window.location.href = '/api/login';\n  };\n\n  // Keep Google auth for compatibility\n  const signInWithGoogle = () => {\n    window.location.href = '/api/login';\n  };\n\n  const enterDemoMode = () => {\n    setIsDemoMode(true);\n  };\n\n  const exitDemoMode = () => {\n    setIsDemoMode(false);\n  };\n\n  // Replit Auth uses direct navigation to /api/logout for sign out\n  const signOut = () => {\n    if (isDemoMode) {\n      setIsDemoMode(false);\n    } else {\n      window.location.href = '/api/logout';\n    }\n  };\n\n  const value = {\n    user: isDemoMode ? demoUser : (realUser as User),\n    loading: isLoading,\n    isAuthenticated: isDemoMode || realIsAuthenticated,\n    isDemoMode,\n    signInWithGoogle,\n    signInWithReplit,\n    enterDemoMode,\n    exitDemoMode,\n    signOut,\n  };\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n};","size_bytes":2241},"src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5046},"src/components/ui/sheet.tsx":{"content":"import * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\nimport * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n  VariantProps<typeof sheetVariants> { }\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet, SheetClose,\n  SheetContent, SheetDescription, SheetFooter, SheetHeader, SheetOverlay, SheetPortal, SheetTitle, SheetTrigger\n}\n\n","size_bytes":4250},"server/routes/push.ts":{"content":"import { Router, Request, Response } from 'express';\nimport { db } from '../db';\nimport { webPushSubscriptions } from '../../shared/schema';\nimport { eq, and } from 'drizzle-orm';\n\nconst router = Router();\n\n// Get VAPID public key\nrouter.get('/public-key', (req: Request, res: Response) => {\n  try {\n    const vapidPublicKey = process.env.VAPID_PUBLIC_KEY;\n    \n    if (!vapidPublicKey) {\n      console.error(\"VAPID_PUBLIC_KEY not configured\");\n      return res.status(500).json({ error: \"Push notifications not configured\" });\n    }\n\n    console.log(\"Returning VAPID public key\");\n    \n    res.json({ \n      publicKey: vapidPublicKey,\n      success: true \n    });\n  } catch (error: any) {\n    console.error(\"Error in push-get-public-key:\", error);\n    res.status(500).json({ error: error.message });\n  }\n});\n\n// Subscribe to push notifications\nrouter.post('/subscribe', async (req: Request, res: Response) => {\n  try {\n    // For now, we'll use a simple user ID from headers or body\n    // In a real app, this would come from JWT authentication\n    const userId = req.headers['x-user-id'] as string || req.body.userId;\n    \n    if (!userId) {\n      return res.status(401).json({ error: \"User ID required\" });\n    }\n\n    const { endpoint, keys, userAgent } = req.body;\n    \n    if (!endpoint || !keys?.auth || !keys?.p256dh) {\n      return res.status(400).json({ error: \"Missing required subscription data\" });\n    }\n\n    console.log(\"Storing push subscription for user:\", userId);\n\n    // Store subscription in database (upsert to handle multiple subscriptions)\n    const result = await db.insert(webPushSubscriptions)\n      .values({\n        userId,\n        endpoint,\n        p256dhKey: keys.p256dh,\n        authKey: keys.auth,\n        userAgent: userAgent || null,\n      })\n      .onConflictDoUpdate({\n        target: [webPushSubscriptions.userId, webPushSubscriptions.endpoint],\n        set: {\n          p256dhKey: keys.p256dh,\n          authKey: keys.auth,\n          userAgent: userAgent || null,\n          updatedAt: new Date(),\n        }\n      })\n      .returning();\n\n    console.log(\"Push subscription stored successfully:\", result[0].id);\n\n    res.json({ \n      success: true,\n      subscriptionId: result[0].id \n    });\n  } catch (error: any) {\n    console.error(\"Error in push-subscribe:\", error);\n    res.status(500).json({ error: error.message });\n  }\n});\n\n// Unsubscribe from push notifications\nrouter.post('/unsubscribe', async (req: Request, res: Response) => {\n  try {\n    const userId = req.headers['x-user-id'] as string || req.body.userId;\n    \n    if (!userId) {\n      return res.status(401).json({ error: \"User ID required\" });\n    }\n\n    const { endpoint } = req.body;\n    \n    if (!endpoint) {\n      return res.status(400).json({ error: \"Endpoint is required\" });\n    }\n\n    console.log(\"Removing push subscription for user:\", userId, \"endpoint:\", endpoint);\n\n    // Remove subscription from database\n    await db.delete(webPushSubscriptions)\n      .where(and(\n        eq(webPushSubscriptions.userId, userId),\n        eq(webPushSubscriptions.endpoint, endpoint)\n      ));\n\n    console.log(\"Push subscription removed successfully\");\n\n    res.json({ success: true });\n  } catch (error: any) {\n    console.error(\"Error in push-unsubscribe:\", error);\n    res.status(500).json({ error: error.message });\n  }\n});\n\n// Send test push notification\nrouter.post('/send-test', async (req: Request, res: Response) => {\n  try {\n    const userId = req.headers['x-user-id'] as string || req.body.userId;\n    \n    if (!userId) {\n      return res.status(401).json({ error: \"User ID required\" });\n    }\n\n    console.log(\"Sending test push notification to user:\", userId);\n\n    // Get user's push subscriptions\n    const subscriptions = await db.select()\n      .from(webPushSubscriptions)\n      .where(eq(webPushSubscriptions.userId, userId));\n\n    if (!subscriptions || subscriptions.length === 0) {\n      return res.status(404).json({ error: \"No push subscriptions found\" });\n    }\n\n    // For now, just return success without actually sending\n    // In a real implementation, you'd use a push notification service\n    console.log(`Found ${subscriptions.length} subscriptions for user ${userId}`);\n\n    res.json({\n      success: true,\n      sent: subscriptions.length,\n      failed: 0,\n      total: subscriptions.length\n    });\n  } catch (error: any) {\n    console.error(\"Error in push-send-test:\", error);\n    res.status(500).json({ error: error.message });\n  }\n});\n\nexport default router;","size_bytes":4496},"server/routes/api.ts":{"content":"import { Router } from 'express';\nimport pushRoutes from './push';\nimport notificationRoutes from './notifications';\nimport { isAuthenticated } from '../replitAuth';\nimport { storage } from '../storage';\n\nconst router = Router();\n\n// Auth routes\nrouter.get('/auth/user', isAuthenticated, async (req: any, res) => {\n  try {\n    const userId = req.user.claims.sub;\n    const user = await storage.getUser(userId);\n    res.json(user);\n  } catch (error) {\n    console.error(\"Error fetching user:\", error);\n    res.status(500).json({ message: \"Failed to fetch user\" });\n  }\n});\n\n// Push notification routes\nrouter.use('/push', pushRoutes);\n\n// Notification routes  \nrouter.use('/notifications', notificationRoutes);\n\nexport default router;","size_bytes":733},"src/pages/Partners.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Input } from '@/components/ui/input';\nimport { ArrowLeft, Users, Plus, UserCheck, UserX } from 'lucide-react';\nimport { useNavigate } from 'react-router-dom';\nimport { toast } from '@/hooks/use-toast';\n\ninterface PartnerConnection {\n  id: string;\n  partner_id: string;\n  status: string;\n  created_at: string;\n  profiles: {\n    display_name: string | null;\n  } | null;\n}\n\ninterface Profile {\n  user_id: string;\n  display_name: string | null;\n}\n\nconst Partners = () => {\n  const { user } = useAuth();\n  const navigate = useNavigate();\n  const [connections, setConnections] = useState<PartnerConnection[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [searchEmail, setSearchEmail] = useState('');\n  const [searching, setSearching] = useState(false);\n  const [foundProfile, setFoundProfile] = useState<Profile | null>(null);\n\n  useEffect(() => {\n    if (user) {\n      fetchConnections();\n    }\n  }, [user]);\n\n  const fetchConnections = async () => {\n    try {\n      // TODO: Replace with backend API call\n      // For now, use empty array to get app working\n      setConnections([]);\n    } catch (error) {\n      console.error('Error fetching connections:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const searchForUser = async () => {\n    if (!searchEmail.trim()) return;\n    \n    setSearching(true);\n    try {\n      // TODO: Replace with backend API call\n      // For now, just show \"not found\" to get app working\n      toast({\n        title: \"User not found\",\n        description: \"No user found with that display name (mock)\",\n        variant: \"destructive\"\n      });\n      setFoundProfile(null);\n    } catch (error) {\n      console.error('Error searching for user:', error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to search for user\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setSearching(false);\n    }\n  };\n\n  const sendConnectionRequest = async () => {\n    if (!foundProfile || !user) return;\n    \n    try {\n      // TODO: Replace with backend API call\n      // For now, just show success message\n      \n      toast({\n        title: \"Success\",\n        description: \"Connection request sent (mock)\"\n      });\n      \n      setFoundProfile(null);\n      setSearchEmail('');\n      fetchConnections();\n    } catch (error) {\n      console.error('Error sending connection request:', error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to send connection request\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  const updateConnectionStatus = async (connectionId: string, status: 'accepted' | 'rejected') => {\n    try {\n      // TODO: Replace with backend API call\n      // For now, just show success message\n      \n      toast({\n        title: \"Success\",\n        description: `Connection ${status} (mock)`\n      });\n      \n      fetchConnections();\n    } catch (error) {\n      console.error('Error updating connection:', error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to update connection\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gradient-subtle\">\n        <div className=\"text-center space-y-4\">\n          <div className=\"w-16 h-16 bg-white dark:bg-white rounded-2xl mx-auto flex items-center justify-center shadow-elegant animate-pulse p-3\">\n            <img \n              src=\"/lovable-uploads/105cee16-9e7f-45ba-9b51-01a7a6f35377.png\" \n              alt=\"SubCircle Logo\" \n              className=\"w-full h-full object-contain\"\n            />\n          </div>\n          <p className=\"text-muted-foreground\">Loading partner connections...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-subtle\">\n      {/* Header */}\n      <header className=\"border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60\">\n        <div className=\"container mx-auto px-4 py-4 flex items-center justify-between\">\n          <div className=\"flex items-center space-x-3\">\n            <Button variant=\"ghost\" size=\"sm\" onClick={() => navigate('/dashboard')}>\n              <ArrowLeft className=\"w-4 h-4\" />\n            </Button>\n            <h1 className=\"text-xl font-bold\">Partners</h1>\n          </div>\n        </div>\n      </header>\n\n      <main className=\"container mx-auto px-4 py-6 space-y-6\">\n        {/* Add Partner Section */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2\">\n              <Plus className=\"w-5 h-5\" />\n              <span>Connect with Partner</span>\n            </CardTitle>\n            <CardDescription>\n              Search for users by display name to send connection requests\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"flex space-x-2\">\n              <Input\n                placeholder=\"Enter display name...\"\n                value={searchEmail}\n                onChange={(e) => setSearchEmail(e.target.value)}\n                onKeyPress={(e) => e.key === 'Enter' && searchForUser()}\n              />\n              <Button onClick={searchForUser} disabled={searching}>\n                {searching ? 'Searching...' : 'Search'}\n              </Button>\n            </div>\n            \n            {foundProfile && (\n              <Card className=\"border-primary/20\">\n                <CardContent className=\"pt-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-3\">\n                      <div className=\"w-10 h-10 bg-gradient-primary rounded-lg flex items-center justify-center\">\n                        <Users className=\"w-5 h-5 text-white\" />\n                      </div>\n                      <div>\n                        <p className=\"font-medium\">{foundProfile.display_name || 'User'}</p>\n                        <p className=\"text-sm text-muted-foreground\">Found user</p>\n                      </div>\n                    </div>\n                    <Button onClick={sendConnectionRequest}>\n                      Send Request\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Partner Connections */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2\">\n              <Users className=\"w-5 h-5\" />\n              <span>Your Connections</span>\n            </CardTitle>\n            <CardDescription>\n              Manage your partner connections for subscription sharing\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            {connections.length === 0 ? (\n              <div className=\"text-center py-8 space-y-4\">\n                <Users className=\"w-12 h-12 text-muted-foreground mx-auto\" />\n                <div>\n                  <p className=\"text-muted-foreground\">No partner connections yet</p>\n                  <p className=\"text-sm text-muted-foreground\">Search for users above to get started</p>\n                </div>\n              </div>\n            ) : (\n              <div className=\"space-y-3\">\n                {connections.map((connection) => (\n                  <div key={connection.id} className=\"flex items-center justify-between p-3 bg-muted/50 rounded-lg\">\n                    <div className=\"flex items-center space-x-3\">\n                      <div className=\"w-10 h-10 bg-gradient-primary rounded-lg flex items-center justify-center\">\n                        <Users className=\"w-5 h-5 text-white\" />\n                      </div>\n                      <div>\n                        <p className=\"font-medium\">\n                          {connection.profiles?.display_name || 'Partner'}\n                        </p>\n                        <p className=\"text-sm text-muted-foreground\">\n                          {new Date(connection.created_at).toLocaleDateString()}\n                        </p>\n                      </div>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <Badge variant={\n                        connection.status === 'accepted' ? \"default\" : \n                        connection.status === 'pending' ? \"secondary\" : \n                        \"destructive\"\n                      }>\n                        {connection.status}\n                      </Badge>\n                      {connection.status === 'pending' && (\n                        <div className=\"flex space-x-1\">\n                          <Button\n                            size=\"sm\"\n                            variant=\"outline\"\n                            onClick={() => updateConnectionStatus(connection.id, 'accepted')}\n                          >\n                            <UserCheck className=\"w-4 h-4\" />\n                          </Button>\n                          <Button\n                            size=\"sm\"\n                            variant=\"outline\"\n                            onClick={() => updateConnectionStatus(connection.id, 'rejected')}\n                          >\n                            <UserX className=\"w-4 h-4\" />\n                          </Button>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                ))}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </main>\n    </div>\n  );\n};\n\nexport default Partners;","size_bytes":9880},"src/pages/Notifications.tsx":{"content":"import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { NotificationCenter } from '@/components/ui/notification-center';\nimport { NotificationSettings } from '@/components/ui/notification-settings';\nimport { Bell, Settings } from 'lucide-react';\n\nexport default function Notifications() {\n  return (\n    <div className=\"container mx-auto px-4 py-8 max-w-4xl\">\n      <Tabs defaultValue=\"center\" className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-2\">\n          <TabsTrigger value=\"center\" className=\"flex items-center gap-2\">\n            <Bell className=\"h-4 w-4\" />\n            Notification Center\n          </TabsTrigger>\n          <TabsTrigger value=\"settings\" className=\"flex items-center gap-2\">\n            <Settings className=\"h-4 w-4\" />\n            Settings\n          </TabsTrigger>\n        </TabsList>\n        \n        <TabsContent value=\"center\" className=\"mt-6\">\n          <NotificationCenter />\n        </TabsContent>\n        \n        <TabsContent value=\"settings\" className=\"mt-6\">\n          <NotificationSettings />\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":1137},"shared/schema.ts":{"content":"import { pgTable, varchar, text, boolean, decimal, timestamp, jsonb, uuid, serial, index } from 'drizzle-orm/pg-core';\nimport { sql } from 'drizzle-orm';\n\nexport const streamingServices = pgTable('streaming_services', {\n  id: uuid('id').primaryKey().default(sql`gen_random_uuid()`),\n  name: text('name').notNull().unique(),\n  logoUrl: text('logo_url'),\n  category: text('category'),\n  monthlyPrice: decimal('monthly_price', { precision: 8, scale: 2 }),\n  websiteUrl: text('website_url'),\n  description: text('description'),\n  createdAt: timestamp('created_at', { withTimezone: true }).notNull().default(sql`now()`),\n  updatedAt: timestamp('updated_at', { withTimezone: true }).notNull().default(sql`now()`)\n});\n\nexport const profiles = pgTable('profiles', {\n  id: uuid('id').primaryKey().default(sql`gen_random_uuid()`),\n  userId: text('user_id').notNull().unique(),\n  displayName: text('display_name'),\n  avatarUrl: text('avatar_url'),\n  createdAt: timestamp('created_at', { withTimezone: true }).notNull().default(sql`now()`),\n  updatedAt: timestamp('updated_at', { withTimezone: true }).notNull().default(sql`now()`)\n});\n\nexport const userSubscriptions = pgTable('user_subscriptions', {\n  id: uuid('id').primaryKey().default(sql`gen_random_uuid()`),\n  userId: text('user_id').notNull(),\n  serviceId: uuid('service_id').notNull(),\n  isActive: boolean('is_active').notNull().default(true),\n  sharedWithPartners: boolean('shared_with_partners').notNull().default(false),\n  shareCredentials: boolean('share_credentials').notNull().default(false),\n  createdAt: timestamp('created_at', { withTimezone: true }).notNull().default(sql`now()`),\n  updatedAt: timestamp('updated_at', { withTimezone: true }).notNull().default(sql`now()`)\n});\n\nexport const partnerConnections = pgTable('partner_connections', {\n  id: uuid('id').primaryKey().default(sql`gen_random_uuid()`),\n  userId: text('user_id').notNull(),\n  partnerId: text('partner_id').notNull(),\n  status: text('status').notNull().default('pending'),\n  createdAt: timestamp('created_at', { withTimezone: true }).notNull().default(sql`now()`),\n  updatedAt: timestamp('updated_at', { withTimezone: true }).notNull().default(sql`now()`)\n});\n\nexport const notifications = pgTable('notifications', {\n  id: uuid('id').primaryKey().default(sql`gen_random_uuid()`),\n  userId: text('user_id').notNull(),\n  type: text('type').notNull(),\n  title: text('title').notNull(),\n  message: text('message').notNull(),\n  data: jsonb('data'),\n  read: boolean('read').notNull().default(false),\n  priority: text('priority').default('low'),\n  category: text('category').default('partner'),\n  actionUrl: text('action_url'),\n  createdAt: timestamp('created_at', { withTimezone: true }).notNull().default(sql`now()`),\n  updatedAt: timestamp('updated_at', { withTimezone: true }).notNull().default(sql`now()`)\n});\n\nexport const notificationPreferences = pgTable('notification_preferences', {\n  id: uuid('id').primaryKey().default(sql`gen_random_uuid()`),\n  userId: text('user_id').notNull().unique(),\n  emailEnabled: boolean('email_enabled').notNull().default(true),\n  pushEnabled: boolean('push_enabled').notNull().default(true),\n  partnerNotifications: boolean('partner_notifications').notNull().default(true),\n  subscriptionNotifications: boolean('subscription_notifications').notNull().default(true),\n  securityNotifications: boolean('security_notifications').notNull().default(true),\n  systemNotifications: boolean('system_notifications').notNull().default(false),\n  emailFrequency: text('email_frequency').default('instant'),\n  quietHoursEnabled: boolean('quiet_hours_enabled').notNull().default(false),\n  quietHoursStart: text('quiet_hours_start').default('22:00'),\n  quietHoursEnd: text('quiet_hours_end').default('08:00'),\n  createdAt: timestamp('created_at', { withTimezone: true }).notNull().default(sql`now()`),\n  updatedAt: timestamp('updated_at', { withTimezone: true }).notNull().default(sql`now()`)\n});\n\nexport const subscriptionCredentials = pgTable('subscription_credentials', {\n  id: uuid('id').primaryKey().default(sql`gen_random_uuid()`),\n  subscriptionId: uuid('subscription_id').notNull().unique(),\n  userId: text('user_id').notNull(),\n  encryptedUsername: text('encrypted_username'),\n  encryptedPassword: text('encrypted_password'),\n  encryptedNotes: text('encrypted_notes'),\n  encryptionKeyHint: text('encryption_key_hint'),\n  createdAt: timestamp('created_at', { withTimezone: true }).notNull().default(sql`now()`),\n  updatedAt: timestamp('updated_at', { withTimezone: true }).notNull().default(sql`now()`)\n});\n\nexport const webPushSubscriptions = pgTable('web_push_subscriptions', {\n  id: uuid('id').primaryKey().default(sql`gen_random_uuid()`),\n  userId: text('user_id').notNull(),\n  endpoint: text('endpoint').notNull(),\n  p256dhKey: text('p256dh_key').notNull(),\n  authKey: text('auth_key').notNull(),\n  userAgent: text('user_agent'),\n  createdAt: timestamp('created_at', { withTimezone: true }).notNull().default(sql`now()`),\n  updatedAt: timestamp('updated_at', { withTimezone: true }).notNull().default(sql`now()`)\n});\n\n// Session storage table.\n// (IMPORTANT) This table is mandatory for Replit Auth, don't drop it.\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// User storage table.\n// (IMPORTANT) This table is mandatory for Replit Auth, don't drop it.\nexport const users = pgTable(\"users\", {\n  id: text(\"id\").primaryKey(),\n  email: varchar(\"email\").unique(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport type UpsertUser = typeof users.$inferInsert;\nexport type User = typeof users.$inferSelect;","size_bytes":5931},"src/components/ui/sonner.tsx":{"content":"import { useTheme } from \"next-themes\"\nimport { Toaster as Sonner, toast } from \"sonner\"\n\ntype ToasterProps = React.ComponentProps<typeof Sonner>\n\nconst Toaster = ({ ...props }: ToasterProps) => {\n  const { theme = \"system\" } = useTheme()\n\n  return (\n    <Sonner\n      theme={theme as ToasterProps[\"theme\"]}\n      className=\"toaster group\"\n      toastOptions={{\n        classNames: {\n          toast:\n            \"group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg\",\n          description: \"group-[.toast]:text-muted-foreground\",\n          actionButton:\n            \"group-[.toast]:bg-primary group-[.toast]:text-primary-foreground\",\n          cancelButton:\n            \"group-[.toast]:bg-muted group-[.toast]:text-muted-foreground\",\n        },\n      }}\n      {...props}\n    />\n  )\n}\n\nexport { Toaster, toast }\n","size_bytes":894},"src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\ninterface CommandDialogProps extends DialogProps {}\n\nconst CommandDialog = ({ children, ...props }: CommandDialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4879},"src/components/ui/partner-credential-access.tsx":{"content":"import { useState } from \"react\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Key, Eye, EyeOff, Copy, Shield, User } from \"lucide-react\";\nimport { useCredentialManagement, StoredCredentials } from \"@/hooks/use-credential-management\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface PartnerCredentialAccessProps {\n  subscriptionId: string;\n  serviceName: string;\n  partnerName: string;\n  hasCredentials: boolean;\n}\n\nexport const PartnerCredentialAccess = ({\n  subscriptionId,\n  serviceName,\n  partnerName,\n  hasCredentials\n}: PartnerCredentialAccessProps) => {\n  const [open, setOpen] = useState(false);\n  const [masterPassword, setMasterPassword] = useState(\"\");\n  const [showPassword, setShowPassword] = useState(false);\n  const [showMasterPassword, setShowMasterPassword] = useState(false);\n  const [decryptedData, setDecryptedData] = useState<any>(null);\n  const [credentials, setCredentials] = useState<StoredCredentials | null>(null);\n\n  const { loading, getCredentials, decryptCredentials } = useCredentialManagement();\n  const { toast } = useToast();\n\n  const handleOpenChange = (newOpen: boolean) => {\n    setOpen(newOpen);\n    if (!newOpen) {\n      // Reset state when closing\n      setMasterPassword(\"\");\n      setDecryptedData(null);\n      setCredentials(null);\n      setShowPassword(false);\n      setShowMasterPassword(false);\n    } else {\n      // Load credentials when opening\n      loadCredentials();\n    }\n  };\n\n  const loadCredentials = async () => {\n    const stored = await getCredentials(subscriptionId);\n    setCredentials(stored);\n  };\n\n  const handleDecrypt = async () => {\n    if (!credentials || !masterPassword) return;\n\n    const decrypted = await decryptCredentials(credentials, masterPassword);\n    if (decrypted) {\n      setDecryptedData(decrypted);\n    }\n  };\n\n  const copyToClipboard = async (text: string, label: string) => {\n    try {\n      await navigator.clipboard.writeText(text);\n      toast({\n        title: \"Copied\",\n        description: `${label} copied to clipboard`,\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to copy to clipboard\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  if (!hasCredentials) {\n    return (\n      <Button variant=\"outline\" size=\"sm\" disabled>\n        <Key className=\"w-4 h-4 mr-1\" />\n        No Credentials\n      </Button>\n    );\n  }\n\n  return (\n    <Dialog open={open} onOpenChange={handleOpenChange}>\n      <DialogTrigger asChild>\n        <Button\n          variant=\"outline\"\n          size=\"sm\"\n          className=\"text-subcircle-cyan border-subcircle-cyan/30 hover:bg-subcircle-cyan/10 hover:text-subcircle-cyan\"\n        >\n          <Key className=\"w-4 h-4 mr-1\" />\n          View Credentials\n        </Button>\n      </DialogTrigger>\n      <DialogContent className=\"sm:max-w-md\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            <User className=\"w-5 h-5 text-subcircle-cyan\" />\n            {serviceName} Credentials\n          </DialogTitle>\n          <DialogDescription>\n            Shared by {partnerName} • Enter their master password to decrypt\n          </DialogDescription>\n        </DialogHeader>\n\n        <div className=\"space-y-4\">\n          {/* Security Notice */}\n          <Alert>\n            <Shield className=\"h-4 w-4\" />\n            <AlertDescription>\n              These credentials are encrypted by {partnerName}. You need their master password to view them.\n            </AlertDescription>\n          </Alert>\n\n          {/* Show hint if available */}\n          {credentials?.encryption_key_hint && (\n            <div className=\"bg-muted/50 p-3 rounded-md\">\n              <p className=\"text-sm text-muted-foreground\">\n                <strong>Password Hint:</strong> {credentials.encryption_key_hint}\n              </p>\n            </div>\n          )}\n\n          {/* Master Password Input */}\n          {!decryptedData && (\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"partner-master-password\">Master Password</Label>\n              <div className=\"relative\">\n                <Input\n                  id=\"partner-master-password\"\n                  type={showMasterPassword ? \"text\" : \"password\"}\n                  value={masterPassword}\n                  onChange={(e) => setMasterPassword(e.target.value)}\n                  placeholder=\"Enter the master password\"\n                  className=\"pr-10\"\n                  onKeyDown={(e) => {\n                    if (e.key === 'Enter' && masterPassword) {\n                      handleDecrypt();\n                    }\n                  }}\n                />\n                <Button\n                  type=\"button\"\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                  onClick={() => setShowMasterPassword(!showMasterPassword)}\n                >\n                  {showMasterPassword ? (\n                    <EyeOff className=\"h-4 w-4\" />\n                  ) : (\n                    <Eye className=\"h-4 w-4\" />\n                  )}\n                </Button>\n              </div>\n            </div>\n          )}\n\n          {/* Decrypted Credentials */}\n          {decryptedData && (\n            <div className=\"space-y-3\">\n              <Card className=\"bg-gradient-subtle border-subcircle-cyan/20\">\n                <CardContent className=\"pt-4\">\n                  <div className=\"space-y-4\">\n                    <div className=\"space-y-2\">\n                      <Label className=\"text-xs font-medium text-muted-foreground\">USERNAME/EMAIL</Label>\n                      <div className=\"flex items-center gap-2\">\n                        <Input\n                          value={decryptedData.username}\n                          readOnly\n                          className=\"bg-background/50\"\n                        />\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => copyToClipboard(decryptedData.username, \"Username\")}\n                        >\n                          <Copy className=\"w-4 h-4\" />\n                        </Button>\n                      </div>\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <Label className=\"text-xs font-medium text-muted-foreground\">PASSWORD</Label>\n                      <div className=\"flex items-center gap-2\">\n                        <div className=\"relative flex-1\">\n                          <Input\n                            type={showPassword ? \"text\" : \"password\"}\n                            value={decryptedData.password}\n                            readOnly\n                            className=\"bg-background/50 pr-10\"\n                          />\n                          <Button\n                            type=\"button\"\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                            onClick={() => setShowPassword(!showPassword)}\n                          >\n                            {showPassword ? (\n                              <EyeOff className=\"h-4 w-4\" />\n                            ) : (\n                              <Eye className=\"h-4 w-4\" />\n                            )}\n                          </Button>\n                        </div>\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => copyToClipboard(decryptedData.password, \"Password\")}\n                        >\n                          <Copy className=\"w-4 h-4\" />\n                        </Button>\n                      </div>\n                    </div>\n\n                    {decryptedData.notes && (\n                      <div className=\"space-y-2\">\n                        <Label className=\"text-xs font-medium text-muted-foreground\">NOTES</Label>\n                        <div className=\"bg-muted/30 p-3 rounded-md\">\n                          <p className=\"text-sm\">{decryptedData.notes}</p>\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          )}\n\n          {/* Action Buttons */}\n          <div className=\"flex justify-end gap-2\">\n            <Button \n              variant=\"outline\" \n              onClick={() => setOpen(false)}\n            >\n              Close\n            </Button>\n            \n            {!decryptedData && (\n              <Button \n                onClick={handleDecrypt}\n                disabled={loading || !masterPassword}\n                className=\"bg-subcircle-cyan text-subcircle-cyan-foreground hover:bg-subcircle-cyan/90\"\n              >\n                {loading ? \"Decrypting...\" : \"Decrypt\"}\n              </Button>\n            )}\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n};","size_bytes":9480},"src/components/ui/form.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  ControllerProps,\n  FieldPath,\n  FieldValues,\n  FormProvider,\n  useFormContext,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message) : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4085},"src/components/ui/loading-skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\";\n\ninterface LoadingSkeletonProps {\n  className?: string;\n  variant?: \"card\" | \"service\" | \"vault\" | \"text\" | \"circle\";\n}\n\nexport function LoadingSkeleton({ className, variant = \"card\" }: LoadingSkeletonProps) {\n  const variants = {\n    card: \"h-32 w-full rounded-lg\",\n    service: \"h-44 w-full rounded-xl\",\n    vault: \"h-20 w-full rounded-lg\",\n    text: \"h-4 w-3/4 rounded\",\n    circle: \"h-12 w-12 rounded-full\"\n  };\n\n  return (\n    <div\n      className={cn(\n        \"bg-gradient-to-r from-muted via-muted/50 to-muted animate-shimmer bg-[length:200px_100%]\",\n        variants[variant],\n        className\n      )}\n    />\n  );\n}\n\nexport function ServiceCardSkeleton() {\n  return (\n    <div className=\"p-4 space-y-3 border border-border rounded-xl bg-card\">\n      <div className=\"space-y-2\">\n        <LoadingSkeleton variant=\"circle\" />\n        <div className=\"space-y-1\">\n          <LoadingSkeleton variant=\"text\" className=\"h-3 w-20\" />\n          <LoadingSkeleton variant=\"text\" className=\"h-3 w-16\" />\n        </div>\n      </div>\n      <div className=\"flex items-center justify-between\">\n        <LoadingSkeleton variant=\"text\" className=\"h-3 w-16\" />\n        <LoadingSkeleton className=\"h-5 w-9 rounded-full\" />\n      </div>\n    </div>\n  );\n}\n\nexport function VaultCardSkeleton() {\n  return (\n    <div className=\"p-4 border border-border rounded-lg bg-card\">\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center gap-3 flex-1\">\n          <LoadingSkeleton variant=\"circle\" />\n          <div className=\"flex-1 space-y-2\">\n            <LoadingSkeleton variant=\"text\" className=\"h-4 w-24\" />\n            <LoadingSkeleton variant=\"text\" className=\"h-3 w-16\" />\n            <LoadingSkeleton variant=\"text\" className=\"h-3 w-20\" />\n          </div>\n        </div>\n        <LoadingSkeleton className=\"h-8 w-20 rounded-md\" />\n      </div>\n    </div>\n  );\n}","size_bytes":1926},"src/pages/mobile/Catalog.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { MobileLayout } from \"@/components/mobile/MobileLayout\";\nimport { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger, DialogDescription } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport * as z from \"zod\";\nimport { Search, TrendingUp, Star, Zap, RefreshCw, HelpCircle, Check, Eye, BarChart3, Users, Plus } from \"lucide-react\";\nimport { Input } from \"@/components/ui/input\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { ServiceCardSkeleton } from \"@/components/ui/loading-skeleton\";\nimport { cn } from \"@/lib/utils\";\nimport { usePullRefresh } from \"@/hooks/use-pull-refresh\";\nimport { getServiceLogo, handleLogoError, hasServiceLogo } from \"@/lib/logo-utils\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\n\ninterface StreamingService {\n  id: string;\n  name: string;\n  logo_url?: string | null;\n  category?: string;\n  monthly_price?: number;\n  description?: string;\n  website_url?: string | null;\n}\n\ninterface UserSubscription {\n  id: string;\n  service_id: string;\n  is_active: boolean;\n}\n\nconst customServiceSchema = z.object({\n  name: z.string().min(1, \"Service name is required\"),\n  monthlyPrice: z.string().optional(),\n  category: z.string().min(1, \"Category is required\"),\n  description: z.string().optional(),\n  websiteUrl: z.string().optional(),\n});\n\ntype CustomServiceFormData = z.infer<typeof customServiceSchema>;\n\nexport default function Catalog() {\n  const [services, setServices] = useState<StreamingService[]>([]);\n  const [userSubscriptions, setUserSubscriptions] = useState<UserSubscription[]>([]);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [loading, setLoading] = useState(true);\n  const [showCustomDialog, setShowCustomDialog] = useState(false);\n  const { user, isDemoMode } = useAuth();\n  const { toast } = useToast();\n\n  const customForm = useForm<CustomServiceFormData>({\n    resolver: zodResolver(customServiceSchema),\n    defaultValues: {\n      name: \"\",\n      monthlyPrice: \"\",\n      category: \"streaming\",\n      description: \"\",\n      websiteUrl: \"\",\n    },\n  });\n\n  // Pull to refresh\n  const handleRefresh = async () => {\n    await Promise.all([fetchServices(), user && fetchUserSubscriptions()]);\n    toast({\n      title: \"Refreshed\",\n      description: \"Catalog updated successfully\",\n    });\n  };\n\n  const { isRefreshing, pullDistance, pullToRefreshProps } = usePullRefresh({\n    onRefresh: handleRefresh,\n    threshold: 80,\n    disabled: loading,\n  });\n\n  // Fetch streaming services\n  useEffect(() => {\n    fetchServices();\n    if (user) {\n      fetchUserSubscriptions();\n    } else {\n      setLoading(false);\n    }\n  }, [user]);\n\n  const fetchServices = async () => {\n    try {\n      // TODO: Replace with backend API call\n      // For now, provide mock services to get app working\n      const mockServices = [\n        {\n          id: '1',\n          name: 'Netflix',\n          logo_url: null,\n          category: 'streaming',\n          monthly_price: 15.99,\n          description: 'Stream TV shows and movies'\n        },\n        {\n          id: '2',\n          name: 'Spotify',\n          logo_url: null,\n          category: 'music',\n          monthly_price: 9.99,\n          description: 'Music streaming service'\n        },\n        {\n          id: '3',\n          name: 'Disney+',\n          logo_url: null,\n          category: 'streaming',\n          monthly_price: 7.99,\n          description: 'Disney content streaming'\n        },\n        {\n          id: '4',\n          name: 'Hulu',\n          logo_url: null,\n          category: 'streaming',\n          monthly_price: 5.99,\n          description: 'Watch current TV and movies'\n        },\n        {\n          id: '5',\n          name: 'Amazon Prime Video',\n          logo_url: null,\n          category: 'streaming',\n          monthly_price: 8.99,\n          description: 'Prime Video streaming service'\n        },\n        {\n          id: '6',\n          name: 'HBO Max',\n          logo_url: null,\n          category: 'streaming',\n          monthly_price: 14.99,\n          description: 'Premium content streaming'\n        },\n        {\n          id: '7',\n          name: 'Apple Music',\n          logo_url: null,\n          category: 'music',\n          monthly_price: 9.99,\n          description: 'Apple music streaming'\n        },\n        {\n          id: '8',\n          name: 'YouTube Premium',\n          logo_url: null,\n          category: 'streaming',\n          monthly_price: 11.99,\n          description: 'Ad-free YouTube experience'\n        },\n        {\n          id: '9',\n          name: 'Crunchyroll',\n          logo_url: null,\n          category: 'streaming',\n          monthly_price: 7.99,\n          description: 'Anime and manga streaming'\n        },\n        {\n          id: '10',\n          name: 'Shudder',\n          logo_url: null,\n          category: 'streaming',\n          monthly_price: 4.99,\n          description: 'Horror and thriller streaming'\n        },\n        {\n          id: '11',\n          name: 'Kayo',\n          logo_url: null,\n          category: 'streaming',\n          monthly_price: 25.00,\n          description: 'Australian sports streaming'\n        }\n      ];\n      setServices(mockServices);\n    } catch (error) {\n      console.error(\"Error fetching services:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to load streaming services\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const fetchUserSubscriptions = async () => {\n    if (!user) return;\n    \n    try {\n      if (isDemoMode) {\n        // Use demo subscriptions to match vault data\n        const demoSubs = [\n          { id: 'demo-sub-1', service_id: '1', is_active: true }, // Netflix\n          { id: 'demo-sub-2', service_id: '2', is_active: true }, // Spotify  \n          { id: 'demo-sub-3', service_id: '3', is_active: true }, // Disney+\n        ];\n        setUserSubscriptions(demoSubs);\n      } else {\n        // TODO: Replace with backend API call\n        // For now, use empty array to get app working\n        setUserSubscriptions([]);\n      }\n    } catch (error) {\n      console.error(\"Error fetching user subscriptions:\", error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const toggleSubscription = async (serviceId: string, hasSubscription: boolean) => {\n    if (!user) {\n      toast({\n        title: \"Authentication required\",\n        description: \"Please sign in to manage subscriptions\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    try {\n      if (hasSubscription) {\n        // TODO: Remove subscription via backend API\n        setUserSubscriptions(prev => \n          prev.filter(sub => sub.service_id !== serviceId)\n        );\n        toast({\n          title: \"Success\",\n          description: \"Subscription removed (mock)\",\n        });\n      } else {\n        // TODO: Add subscription via backend API\n        const newSub = { id: Date.now().toString(), service_id: serviceId, is_active: true };\n        setUserSubscriptions(prev => [...prev, newSub]);\n        toast({\n          title: \"Success\",\n          description: \"Subscription added (mock)\",\n        });\n      }\n    } catch (error) {\n      console.error(\"Error toggling subscription:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to update subscription\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleCreateCustomService = async (data: CustomServiceFormData) => {\n    if (!user) return;\n    \n    try {\n      // Create new custom service\n      const newService: StreamingService = {\n        id: `custom-${Date.now()}`,\n        name: data.name,\n        logo_url: null,\n        category: data.category,\n        monthly_price: data.monthlyPrice ? parseFloat(data.monthlyPrice) : undefined,\n        description: data.description || `Custom ${data.category} service`,\n        website_url: data.websiteUrl || null,\n      };\n\n      // Add to services list\n      setServices(prev => [...prev, newService]);\n\n      // Automatically add to user's subscriptions\n      const newSub = {\n        id: Math.random().toString(),\n        service_id: newService.id,\n        is_active: true\n      };\n      setUserSubscriptions(prev => [...prev, newSub]);\n\n      // Reset form and close dialog\n      customForm.reset();\n      setShowCustomDialog(false);\n      setSearchQuery(\"\"); // Clear search to show the new service\n\n      toast({\n        title: \"Success\",\n        description: `${data.name} has been added to your vault`,\n      });\n    } catch (error) {\n      console.error(\"Error creating custom service:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to create custom service\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleCustomDialogOpen = () => {\n    // Pre-fill the service name from search query if available\n    if (searchQuery.trim()) {\n      customForm.setValue(\"name\", searchQuery.trim());\n    }\n    setShowCustomDialog(true);\n  };\n\n  const filteredServices = services.filter(service =>\n    service.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    service.category?.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n\n  const categories = [...new Set(services.map(s => s.category).filter(Boolean))];\n\n  // Get suggested services (popular ones that user doesn't already have)\n  const suggestedServices = services.filter(service => {\n    const hasSubscription = userSubscriptions.some(sub => sub.service_id === service.id);\n    return !hasSubscription && ['1', '2', '3', '4', '5'].includes(service.id); // Netflix, Spotify, Disney+, Hulu, Prime Video\n  }).slice(0, 4);\n\n  if (loading) {\n    return (\n      <MobileLayout>\n        <div className=\"p-mobile-padding space-y-6\">\n          {/* Header skeleton */}\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"h-8 w-48 bg-muted rounded-lg animate-shimmer bg-gradient-to-r from-muted via-muted/50 to-muted bg-[length:200px_100%]\" />\n              <div className=\"h-7 w-16 bg-muted rounded-full animate-shimmer bg-gradient-to-r from-muted via-muted/50 to-muted bg-[length:200px_100%]\" />\n            </div>\n            <div className=\"h-10 w-full bg-muted rounded-lg animate-shimmer bg-gradient-to-r from-muted via-muted/50 to-muted bg-[length:200px_100%]\" />\n          </div>\n          \n          {/* Category filters skeleton */}\n          <div className=\"flex gap-2\">\n            {[1, 2, 3, 4].map((i) => (\n              <div key={i} className=\"h-8 w-16 bg-muted rounded-md animate-shimmer bg-gradient-to-r from-muted via-muted/50 to-muted bg-[length:200px_100%]\" />\n            ))}\n          </div>\n          \n          {/* Services grid skeleton */}\n          <div className=\"grid grid-cols-2 gap-4\">\n            {[1, 2, 3, 4, 5, 6].map((i) => (\n              <ServiceCardSkeleton key={i} />\n            ))}\n          </div>\n        </div>\n      </MobileLayout>\n    );\n  }\n\n  return (\n    <MobileLayout>\n      <div className=\"relative\">\n        {/* Pull to refresh indicator */}\n        {pullDistance > 0 && (\n          <div \n            className=\"absolute top-0 left-0 right-0 flex justify-center items-center bg-primary/10 backdrop-blur-sm z-50 transition-all duration-200\"\n            style={{ \n              height: `${Math.min(pullDistance, 80)}px`,\n              transform: `translateY(-${Math.max(0, 80 - pullDistance)}px)`\n            }}\n          >\n            <RefreshCw \n              className={cn(\n                \"text-primary transition-all duration-200\",\n                isRefreshing ? \"animate-spin\" : \"\",\n                pullDistance >= 80 ? \"scale-110\" : \"scale-90\"\n              )}\n              size={24}\n            />\n          </div>\n        )}\n        \n        <div className=\"p-mobile-padding space-y-6\" {...pullToRefreshProps}>\n        {/* Header */}\n        <div className=\"space-y-4 animate-fade-in\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h1 className=\"text-2xl font-bold text-foreground\">Discover</h1>\n              <p className=\"text-sm text-muted-foreground\">Find your perfect streaming services</p>\n            </div>\n            <Dialog>\n              <DialogTrigger asChild>\n                <Button \n                  variant=\"ghost\" \n                  size=\"sm\" \n                  className=\"w-10 h-10 rounded-full hover:bg-primary/10\"\n                  data-testid=\"button-help-tutorial\"\n                >\n                  <HelpCircle className=\"w-5 h-5 text-muted-foreground hover:text-primary\" />\n                </Button>\n              </DialogTrigger>\n              <DialogContent className=\"max-w-md mx-auto\">\n                <DialogHeader>\n                  <DialogTitle className=\"flex items-center gap-2\">\n                    <HelpCircle className=\"w-5 h-5 text-primary\" />\n                    How to Use SubCircle\n                  </DialogTitle>\n                </DialogHeader>\n                <div className=\"space-y-4 py-4\">\n                  <div className=\"space-y-4\">\n                    {/* Step 1 */}\n                    <div className=\"flex gap-3\">\n                      <div className=\"w-8 h-8 bg-primary rounded-full flex items-center justify-center flex-shrink-0\">\n                        <Check className=\"w-4 h-4 text-white\" />\n                      </div>\n                      <div>\n                        <h4 className=\"font-semibold text-sm\">Discover Services</h4>\n                        <p className=\"text-sm text-muted-foreground\">\n                          Browse streaming services and toggle switches to add them to your vault\n                        </p>\n                      </div>\n                    </div>\n                    \n                    {/* Step 2 */}\n                    <div className=\"flex gap-3\">\n                      <div className=\"w-8 h-8 bg-primary rounded-full flex items-center justify-center flex-shrink-0\">\n                        <Eye className=\"w-4 h-4 text-white\" />\n                      </div>\n                      <div>\n                        <h4 className=\"font-semibold text-sm\">Manage Your Vault</h4>\n                        <p className=\"text-sm text-muted-foreground\">\n                          Store and organize your subscriptions with secure credential sharing\n                        </p>\n                      </div>\n                    </div>\n                    \n                    {/* Step 3 */}\n                    <div className=\"flex gap-3\">\n                      <div className=\"w-8 h-8 bg-primary rounded-full flex items-center justify-center flex-shrink-0\">\n                        <Users className=\"w-4 h-4 text-white\" />\n                      </div>\n                      <div>\n                        <h4 className=\"font-semibold text-sm\">Connect with Partners</h4>\n                        <p className=\"text-sm text-muted-foreground\">\n                          Link with friends or family to share subscriptions and avoid double-paying\n                        </p>\n                      </div>\n                    </div>\n                    \n                    {/* Step 4 */}\n                    <div className=\"flex gap-3\">\n                      <div className=\"w-8 h-8 bg-primary rounded-full flex items-center justify-center flex-shrink-0\">\n                        <BarChart3 className=\"w-4 h-4 text-white\" />\n                      </div>\n                      <div>\n                        <h4 className=\"font-semibold text-sm\">Compare & Save</h4>\n                        <p className=\"text-sm text-muted-foreground\">\n                          See which services you and your partners share to maximize savings\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"pt-4 border-t\">\n                    <p className=\"text-xs text-muted-foreground text-center\">\n                      💡 Use the bottom navigation to explore all features\n                    </p>\n                  </div>\n                </div>\n              </DialogContent>\n            </Dialog>\n          </div>\n          \n          {/* Search */}\n          <div className=\"relative\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n            <Input\n              placeholder=\"Search services...\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              className=\"pl-10 rounded-lg\"\n            />\n          </div>\n        </div>\n\n        {/* Suggested Services */}\n        {suggestedServices.length > 0 && searchQuery === \"\" && (\n          <div className=\"space-y-3\">\n            <div className=\"flex items-center gap-2\">\n              <h3 className=\"text-lg font-semibold text-foreground\">Suggested for You</h3>\n              <Badge variant=\"secondary\" className=\"text-xs px-2 py-0.5 bg-gradient-accent text-white border-0\">\n                <TrendingUp className=\"w-3 h-3 mr-1\" />\n                Popular\n              </Badge>\n            </div>\n            <div className=\"flex gap-3 overflow-x-auto pb-2\">\n              {suggestedServices.map((service) => {\n                const hasSubscription = userSubscriptions.some(\n                  sub => sub.service_id === service.id\n                );\n                \n                return (\n                  <Card\n                    key={service.id}\n                    className=\"group relative overflow-hidden border-0 bg-gradient-card hover:shadow-card-hover hover:scale-[1.02] transition-all duration-300 ease-bounce flex-shrink-0 w-40\"\n                  >\n                    <div className=\"p-3 space-y-2 relative z-10\">\n                      {/* Service icon */}\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"w-12 h-12 bg-background border border-border/20 rounded-xl flex items-center justify-center p-2 shadow-service group-hover:shadow-service group-hover:scale-110 transition-all duration-300\">\n                          <img\n                            src={getServiceLogo(service)}\n                            alt={`${service.name} logo`}\n                            className=\"w-full h-full object-contain\"\n                            loading=\"lazy\"\n                            referrerPolicy=\"no-referrer\"\n                            onError={(e) => handleLogoError(e, service)}\n                          />\n                        </div>\n                        <Switch\n                          checked={hasSubscription}\n                          onCheckedChange={() => {\n                            toggleSubscription(service.id, hasSubscription);\n                            if (navigator.vibrate) {\n                              navigator.vibrate(hasSubscription ? [50] : [50, 50, 50]);\n                            }\n                          }}\n                          className=\"scale-75\"\n                        />\n                      </div>\n                      \n                      <div className=\"space-y-1\">\n                        <h4 className=\"font-semibold text-sm leading-tight group-hover:text-primary transition-colors\">\n                          {service.name}\n                        </h4>\n                        {service.monthly_price && (\n                          <p className=\"text-primary font-medium text-xs\">\n                            ${service.monthly_price}/mo\n                          </p>\n                        )}\n                      </div>\n                    </div>\n                    \n                    {/* Gradient overlay */}\n                    <div className=\"absolute inset-0 bg-gradient-to-br from-transparent via-transparent to-primary/5 opacity-0 group-hover:opacity-100 transition-opacity duration-300\" />\n                  </Card>\n                );\n              })}\n            </div>\n          </div>\n        )}\n\n\n        {/* Services grid */}\n        <div className=\"grid grid-cols-2 gap-4\">\n          {filteredServices.map((service, index) => {\n            const hasSubscription = userSubscriptions.some(\n              sub => sub.service_id === service.id\n            );\n            \n            return (\n              <Card\n                key={service.id}\n                className={cn(\n                  \"group relative overflow-hidden border-0 bg-gradient-card\",\n                  \"hover:shadow-card-hover hover:scale-[1.02] transition-all duration-300 ease-bounce\",\n                  \"animate-slide-up\",\n                  hasSubscription && \"ring-2 ring-primary/20 shadow-service\"\n                )}\n                style={{ animationDelay: `${index * 50}ms` }}\n              >\n                {/* Service card content */}\n                <div className=\"p-4 space-y-3 relative z-10\">\n                  {/* Service icon and badges */}\n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"w-14 h-14 bg-background border border-border/20 rounded-xl flex items-center justify-center p-2.5 shadow-service group-hover:shadow-service group-hover:scale-110 transition-all duration-300\">\n                        <img\n                          src={getServiceLogo(service)}\n                          alt={`${service.name} logo`}\n                          className=\"w-full h-full object-contain\"\n                          loading=\"lazy\"\n                          referrerPolicy=\"no-referrer\"\n                          onError={(e) => handleLogoError(e, service)}\n                        />\n                      </div>\n                      \n                      {/* Popular badge (show on some services as example) */}\n                      {index < 3 && (\n                        <Badge variant=\"secondary\" className=\"text-xs px-2 py-0.5 bg-gradient-accent text-white border-0\">\n                          <TrendingUp className=\"w-3 h-3 mr-1\" />\n                          Popular\n                        </Badge>\n                      )}\n                    </div>\n                    \n                    <div className=\"space-y-1\">\n                      <h3 className=\"font-semibold text-sm leading-tight group-hover:text-primary transition-colors\">\n                        {service.name}\n                      </h3>\n                      <div className=\"flex items-center justify-between\">\n                        {service.monthly_price && (\n                          <p className=\"text-primary font-medium text-sm\">\n                            ${service.monthly_price}/mo\n                          </p>\n                        )}\n                        {service.category && (\n                          <Badge variant=\"outline\" className=\"text-xs\">\n                            {service.category}\n                          </Badge>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Quick action button */}\n                  <div className=\"flex items-center justify-between pt-1\">\n                    <span className=\"text-xs text-muted-foreground flex items-center gap-1\">\n                      {hasSubscription ? (\n                        <>\n                          <Zap className=\"w-3 h-3 text-primary\" />\n                          In your vault\n                        </>\n                      ) : (\n                        \"Add to vault\"\n                      )}\n                    </span>\n                    <Switch\n                      checked={hasSubscription}\n                      onCheckedChange={() => {\n                        toggleSubscription(service.id, hasSubscription);\n                        // Add haptic feedback for mobile\n                        if (navigator.vibrate) {\n                          navigator.vibrate(hasSubscription ? [50] : [50, 50, 50]);\n                        }\n                      }}\n                      className=\"scale-90\"\n                    />\n                  </div>\n                </div>\n\n                {/* Gradient overlay for visual depth */}\n                <div className=\"absolute inset-0 bg-gradient-to-br from-transparent via-transparent to-primary/5 opacity-0 group-hover:opacity-100 transition-opacity duration-300\" />\n              </Card>\n            );\n          })}\n        </div>\n\n        {/* Empty state with custom service option */}\n        {filteredServices.length === 0 && (\n          <div className=\"text-center py-12 space-y-4\">\n            <p className=\"text-muted-foreground\">No services found</p>\n            <p className=\"text-sm text-muted-foreground\">\n              {searchQuery ? `Can't find \"${searchQuery}\"?` : \"Try adjusting your search\"}\n            </p>\n            {searchQuery && user && (\n              <Button\n                onClick={handleCustomDialogOpen}\n                className=\"mt-4\"\n                data-testid=\"button-add-custom-service\"\n              >\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Add Custom Service\n              </Button>\n            )}\n          </div>\n        )}\n        </div>\n      </div>\n\n      {/* Custom Service Dialog */}\n      <Dialog open={showCustomDialog} onOpenChange={setShowCustomDialog}>\n        <DialogContent className=\"max-w-md mx-auto\">\n          <DialogHeader>\n            <DialogTitle>Add Custom Service</DialogTitle>\n            <DialogDescription>\n              Create a custom subscription service that's not in our catalog\n            </DialogDescription>\n          </DialogHeader>\n          <Form {...customForm}>\n            <form onSubmit={customForm.handleSubmit(handleCreateCustomService)} className=\"space-y-4\">\n              <FormField\n                control={customForm.control}\n                name=\"name\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Service Name *</FormLabel>\n                    <FormControl>\n                      <Input \n                        placeholder=\"e.g. My Streaming Service\" \n                        {...field} \n                        data-testid=\"input-custom-service-name\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={customForm.control}\n                name=\"category\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Category *</FormLabel>\n                    <Select onValueChange={field.onChange} defaultValue={field.value}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-custom-service-category\">\n                          <SelectValue placeholder=\"Select a category\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"streaming\">Streaming</SelectItem>\n                        <SelectItem value=\"music\">Music</SelectItem>\n                        <SelectItem value=\"gaming\">Gaming</SelectItem>\n                        <SelectItem value=\"software\">Software</SelectItem>\n                        <SelectItem value=\"news\">News & Media</SelectItem>\n                        <SelectItem value=\"fitness\">Fitness</SelectItem>\n                        <SelectItem value=\"other\">Other</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={customForm.control}\n                name=\"monthlyPrice\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Monthly Price (optional)</FormLabel>\n                    <FormControl>\n                      <Input \n                        type=\"number\" \n                        step=\"0.01\" \n                        placeholder=\"0.00\" \n                        {...field} \n                        data-testid=\"input-custom-service-price\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={customForm.control}\n                name=\"websiteUrl\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Website URL (optional)</FormLabel>\n                    <FormControl>\n                      <Input \n                        type=\"url\" \n                        placeholder=\"https://example.com\" \n                        {...field} \n                        data-testid=\"input-custom-service-url\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={customForm.control}\n                name=\"description\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Description (optional)</FormLabel>\n                    <FormControl>\n                      <Input \n                        placeholder=\"Brief description of the service\" \n                        {...field} \n                        data-testid=\"input-custom-service-description\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <div className=\"flex gap-2 pt-4\">\n                <Button \n                  type=\"button\" \n                  variant=\"outline\" \n                  onClick={() => setShowCustomDialog(false)}\n                  className=\"flex-1\"\n                  data-testid=\"button-cancel-custom-service\"\n                >\n                  Cancel\n                </Button>\n                <Button \n                  type=\"submit\" \n                  className=\"flex-1\"\n                  data-testid=\"button-create-custom-service\"\n                >\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Add Service\n                </Button>\n              </div>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n    </MobileLayout>\n  );\n}","size_bytes":30930},"src/App.tsx":{"content":"import { Toaster } from \"@/components/ui/toaster\";\nimport { Toaster as Sonner } from \"@/components/ui/sonner\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { QueryClient, QueryClientProvider } from \"@tanstack/react-query\";\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\nimport { AuthProvider } from \"@/contexts/AuthContext\";\nimport { ThemeProvider } from \"@/contexts/ThemeProvider\";\n\n// Mobile-first pages\nimport Onboarding from \"./pages/mobile/Onboarding\";\nimport Catalog from \"./pages/mobile/Catalog\";\nimport Vault from \"./pages/mobile/Vault\";\nimport Link from \"./pages/mobile/Link\";\nimport Compare from \"./pages/mobile/Compare\";\nimport MobileSettings from \"./pages/mobile/MobileSettings\";\n\n// Legacy pages (kept for compatibility)\nimport Index from \"./pages/Index\";\nimport Auth from \"./pages/Auth\";\nimport Dashboard from \"./pages/Dashboard\";\nimport AddSubscription from \"./pages/AddSubscription\";\nimport Partners from \"./pages/Partners\";\nimport Settings from \"./pages/Settings\";\nimport NotFound from \"./pages/NotFound\";\nimport Notifications from \"./pages/Notifications\";\n\nconst queryClient = new QueryClient();\n\nconst App = () => (\n  <QueryClientProvider client={queryClient}>\n    <ThemeProvider defaultTheme=\"system\" storageKey=\"subcircle-theme\">\n      <TooltipProvider>\n        <Toaster />\n        <Sonner />\n        <AuthProvider>\n          <BrowserRouter>\n            <Routes>\n              {/* Mobile-first routes */}\n              <Route path=\"/\" element={<Catalog />} />\n              <Route path=\"/onboarding\" element={<Onboarding />} />\n              <Route path=\"/vault\" element={<Vault />} />\n              <Route path=\"/link\" element={<Link />} />\n              <Route path=\"/compare\" element={<Compare />} />\n              <Route path=\"/notifications\" element={<Notifications />} />\n              <Route path=\"/settings\" element={<MobileSettings />} />\n              \n              {/* Legacy routes for compatibility */}\n              <Route path=\"/legacy\" element={<Index />} />\n              <Route path=\"/auth\" element={<Auth />} />\n              <Route path=\"/dashboard\" element={<Dashboard />} />\n              <Route path=\"/subscriptions/add\" element={<AddSubscription />} />\n              <Route path=\"/partners\" element={<Partners />} />\n              <Route path=\"/legacy-settings\" element={<Settings />} />\n              \n              {/* ADD ALL CUSTOM ROUTES ABOVE THE CATCH-ALL \"*\" ROUTE */}\n              <Route path=\"*\" element={<NotFound />} />\n            </Routes>\n          </BrowserRouter>\n        </AuthProvider>\n      </TooltipProvider>\n    </ThemeProvider>\n  </QueryClientProvider>\n);\n\nexport default App;","size_bytes":2685},"src/components/ui/partner-subscriptions-view.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Users, Shield, Eye, ExternalLink, Key } from \"lucide-react\";\nimport { useSubscriptionSharing } from \"@/hooks/use-subscription-sharing\";\nimport { VaultCardSkeleton } from \"@/components/ui/loading-skeleton\";\nimport { getServiceLogo, handleLogoError, hasServiceLogo } from \"@/lib/logo-utils\";\nimport { cn } from \"@/lib/utils\";\nimport { PartnerCredentialAccess } from \"@/components/ui/partner-credential-access\";\n\ninterface PartnerSubscription {\n  id: string;\n  service_id: string;\n  shared_with_partners: boolean;\n  share_credentials: boolean;\n  streaming_services: {\n    name: string;\n    logo_url?: string | null;\n    monthly_price?: number;\n    website_url?: string | null;\n  };\n}\n\ninterface PartnerSubscriptionsViewProps {\n  partnerId: string;\n  partnerName: string;\n}\n\nexport const PartnerSubscriptionsView = ({ \n  partnerId, \n  partnerName \n}: PartnerSubscriptionsViewProps) => {\n  const [subscriptions, setSubscriptions] = useState<PartnerSubscription[]>([]);\n  const [loading, setLoading] = useState(true);\n  const { getPartnerSubscriptions } = useSubscriptionSharing();\n\n  useEffect(() => {\n    fetchPartnerSubscriptions();\n  }, [partnerId]);\n\n  const fetchPartnerSubscriptions = async () => {\n    setLoading(true);\n    const { data, error } = await getPartnerSubscriptions(partnerId);\n    if (!error && data) {\n      setSubscriptions(data);\n    }\n    setLoading(false);\n  };\n\n  if (loading) {\n    return (\n      <div className=\"space-y-3\">\n        <div className=\"flex items-center gap-2\">\n          <Users className=\"w-5 h-5 text-muted-foreground\" />\n          <h3 className=\"font-semibold text-foreground\">\n            {partnerName}'s Shared Subscriptions\n          </h3>\n        </div>\n        {[1, 2].map((i) => (\n          <VaultCardSkeleton key={i} />\n        ))}\n      </div>\n    );\n  }\n\n  if (subscriptions.length === 0) {\n    return (\n      <Card className=\"border-dashed\">\n        <CardContent className=\"p-6 text-center\">\n          <Users className=\"w-8 h-8 mx-auto text-muted-foreground mb-2\" />\n          <h3 className=\"font-medium text-foreground mb-1\">No Shared Subscriptions</h3>\n          <p className=\"text-sm text-muted-foreground\">\n            {partnerName} hasn't shared any subscriptions with you yet\n          </p>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center gap-2\">\n          <Users className=\"w-5 h-5 text-primary\" />\n          <h3 className=\"font-semibold text-foreground\">\n            {partnerName}'s Shared Subscriptions\n          </h3>\n        </div>\n        <Badge variant=\"outline\" className=\"text-xs\">\n          <Shield className=\"w-3 h-3 mr-1\" />\n          {subscriptions.length} shared\n        </Badge>\n      </div>\n\n      <div className=\"space-y-3\">\n        {subscriptions.map((subscription, index) => (\n          <Card \n            key={subscription.id} \n            className={cn(\n              \"group overflow-hidden border bg-gradient-to-r from-subcircle-teal/5 to-subcircle-indigo/5\",\n              \"hover:shadow-card-hover transition-all duration-300 ease-bounce hover:scale-[1.01]\",\n              \"animate-slide-up\"\n            )}\n            style={{ animationDelay: `${index * 100}ms` }}\n          >\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center justify-between\">\n                {/* Service info */}\n                <div className=\"flex items-center gap-4 flex-1\">\n                  <div className=\"w-12 h-12 bg-white dark:bg-white rounded-lg flex items-center justify-center p-2 shadow-service shrink-0 group-hover:shadow-vault group-hover:scale-105 transition-all duration-300\">\n                    {hasServiceLogo(subscription.streaming_services) ? (\n                      <img\n                        src={getServiceLogo(subscription.streaming_services)}\n                        alt={`${subscription.streaming_services?.name || \"Service\"} logo`}\n                        className=\"w-full h-full object-contain\"\n                        loading=\"lazy\"\n                        referrerPolicy=\"no-referrer\"\n                        onError={(e) => handleLogoError(e, subscription.streaming_services)}\n                      />\n                    ) : (\n                      <div className=\"w-full h-full bg-gradient-primary rounded-lg flex items-center justify-center text-xs font-bold text-white\">\n                        {subscription.streaming_services?.name?.charAt(0) || \"?\"}\n                      </div>\n                    )}\n                  </div>\n                  \n                  <div className=\"flex-1 min-w-0 space-y-2\">\n                    <div className=\"flex items-start justify-between\">\n                      <div>\n                        <h4 className=\"font-medium text-sm leading-tight group-hover:text-primary transition-colors\">\n                          {subscription.streaming_services?.name || \"Unknown Service\"}\n                        </h4>\n                        {subscription.streaming_services?.monthly_price && (\n                          <p className=\"text-primary font-medium text-xs\">\n                            ${subscription.streaming_services.monthly_price}/month\n                          </p>\n                        )}\n                      </div>\n                      <Badge variant=\"outline\" className=\"text-xs bg-subcircle-teal/10 text-subcircle-teal border-subcircle-teal/20\">\n                        <Users className=\"w-3 h-3 mr-1\" />\n                        Shared by {partnerName}\n                      </Badge>\n                    </div>\n                    \n                    {/* Sharing status and credentials */}\n                    <div className=\"flex items-center gap-2\">\n                      <Badge \n                        variant=\"outline\" \n                        className={cn(\n                          \"text-xs\",\n                          subscription.share_credentials \n                            ? \"bg-green-50 text-green-700 border-green-200\"\n                            : \"bg-blue-50 text-blue-700 border-blue-200\"\n                        )}\n                      >\n                        <Eye className=\"w-3 h-3 mr-1\" />\n                        {subscription.share_credentials ? \"Full Access\" : \"View Only\"}\n                      </Badge>\n                      \n                      {subscription.share_credentials && (\n                        <Badge variant=\"secondary\" className=\"text-xs\">\n                          <Shield className=\"w-3 h-3 mr-1\" />\n                          Credentials Available\n                        </Badge>\n                      )}\n                    </div>\n                  </div>\n                </div>\n\n                {/* Actions */}\n                <div className=\"flex items-center gap-2\">\n                  {subscription.share_credentials ? (\n                    <PartnerCredentialAccess\n                      subscriptionId={subscription.id}\n                      serviceName={subscription.streaming_services?.name || \"Service\"}\n                      partnerName={partnerName}\n                      hasCredentials={true}\n                    />\n                  ) : (\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      className=\"shrink-0 hover:bg-primary hover:text-primary-foreground transition-colors\"\n                    >\n                      <Eye className=\"w-4 h-4 mr-1\" />\n                      View Details\n                    </Button>\n                  )}\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n    </div>\n  );\n};","size_bytes":7962},"src/pages/mobile/Vault.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { MobileLayout } from \"@/components/mobile/MobileLayout\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ChartContainer } from \"@/components/ui/chart\";\nimport { PieChart, Pie, Cell, ResponsiveContainer } from \"recharts\";\nimport { \n  Shield, \n  ShieldCheck, \n  Plus, \n  Edit, \n  TrendingUp, \n  Star, \n  Calendar, \n  DollarSign, \n  Users,\n  Settings,\n  ExternalLink,\n  Lock,\n  CheckCircle\n} from \"lucide-react\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useNavigate } from \"react-router-dom\";\nimport { VaultCardSkeleton } from \"@/components/ui/loading-skeleton\";\nimport { cn } from \"@/lib/utils\";\nimport { getServiceLogo, handleLogoError, hasServiceLogo } from \"@/lib/logo-utils\";\nimport { ShareSubscriptionDialog } from \"@/components/ui/share-subscription-dialog\";\nimport { PartnerSubscriptionsView } from \"@/components/ui/partner-subscriptions-view\";\n\ninterface VaultSubscription {\n  id: string;\n  service_id: string;\n  is_active: boolean;\n  shared_with_partners: boolean;\n  share_credentials: boolean;\n  streaming_services: {\n    name: string;\n    logo_url?: string | null;\n    monthly_price?: number;\n    website_url?: string | null;\n  };\n}\n\ninterface PartnerConnection {\n  id: string;\n  partner_id: string;\n  status: string;\n  profiles: {\n    display_name: string | null;\n  } | null;\n}\n\n// Demo data for showcasing vault features\nconst demoSubscriptions: VaultSubscription[] = [\n  {\n    id: 'demo-sub-1',\n    service_id: 'netflix',\n    is_active: true,\n    shared_with_partners: true,\n    share_credentials: true,\n    streaming_services: {\n      name: 'Netflix',\n      logo_url: 'https://upload.wikimedia.org/wikipedia/commons/thumb/0/08/Netflix_2015_logo.svg/1920px-Netflix_2015_logo.svg.png',\n      monthly_price: 15.99,\n      website_url: 'https://netflix.com'\n    }\n  },\n  {\n    id: 'demo-sub-2',\n    service_id: 'spotify',\n    is_active: true,\n    shared_with_partners: false,\n    share_credentials: false,\n    streaming_services: {\n      name: 'Spotify Premium',\n      logo_url: 'https://upload.wikimedia.org/wikipedia/commons/thumb/1/19/Spotify_logo_without_text.svg/2048px-Spotify_logo_without_text.svg.png',\n      monthly_price: 9.99,\n      website_url: 'https://spotify.com'\n    }\n  },\n  {\n    id: 'demo-sub-3',\n    service_id: 'disney',\n    is_active: true,\n    shared_with_partners: true,\n    share_credentials: false,\n    streaming_services: {\n      name: 'Disney+',\n      logo_url: null,\n      monthly_price: 7.99,\n      website_url: 'https://disneyplus.com'\n    }\n  },\n  {\n    id: 'demo-sub-4',\n    service_id: 'hulu',\n    is_active: false,\n    shared_with_partners: false,\n    share_credentials: false,\n    streaming_services: {\n      name: 'Hulu',\n      logo_url: null,\n      monthly_price: 5.99,\n      website_url: 'https://hulu.com'\n    }\n  }\n];\n\nconst demoPartners: PartnerConnection[] = [\n  {\n    id: 'demo-partner-1',\n    partner_id: 'partner-1',\n    status: 'connected',\n    profiles: {\n      display_name: 'Sarah Johnson'\n    }\n  },\n  {\n    id: 'demo-partner-2',\n    partner_id: 'partner-2',\n    status: 'connected',\n    profiles: {\n      display_name: 'Alex Smith'\n    }\n  }\n];\n\n// Demo partner shared subscriptions (services user gets access to for free)\nconst demoPartnerSharedSubscriptions = [\n  {\n    id: 'partner-netflix',\n    name: 'Netflix',\n    monthly_price: 15.99,\n    partner_name: 'Sarah Johnson'\n  },\n  {\n    id: 'partner-apple-music',\n    name: 'Apple Music', \n    monthly_price: 9.99,\n    partner_name: 'Sarah Johnson'\n  },\n  {\n    id: 'partner-hbo-max',\n    name: 'HBO Max',\n    monthly_price: 14.99,\n    partner_name: 'Alex Smith'\n  },\n  {\n    id: 'partner-youtube-premium',\n    name: 'YouTube Premium',\n    monthly_price: 11.99,\n    partner_name: 'Alex Smith'\n  }\n];\n\nexport default function Vault() {\n  const [subscriptions, setSubscriptions] = useState<VaultSubscription[]>([]);\n  const [partners, setPartners] = useState<PartnerConnection[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [isAnnualView, setIsAnnualView] = useState(false);\n  const { user, isDemoMode } = useAuth();\n  const { toast } = useToast();\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    if (user) {\n      fetchVaultData();\n    } else {\n      setLoading(false);\n    }\n  }, [user]);\n\n  const fetchVaultData = async () => {\n    if (!user) return;\n    \n    try {\n      if (isDemoMode) {\n        // Use demo data to showcase features\n        setTimeout(() => {\n          setSubscriptions(demoSubscriptions);\n          setPartners(demoPartners);\n          setLoading(false);\n        }, 1000); // Simulate loading time\n      } else {\n        // TODO: Replace with backend API calls\n        // For now, use empty arrays to get app working\n        setSubscriptions([]);\n        setPartners([]);\n        setLoading(false);\n      }\n    } catch (error) {\n      console.error(\"Error fetching vault data:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to load your vault\",\n        variant: \"destructive\",\n      });\n      setLoading(false);\n    }\n  };\n\n  const handleSharingUpdate = () => {\n    fetchVaultData();\n  };\n\n  const totalMonthlyCost = subscriptions.reduce((total, sub) => {\n    return total + (sub.streaming_services?.monthly_price || 0);\n  }, 0);\n\n  // Calculate total savings from partner shared subscriptions (in demo mode)\n  const totalMonthlySavings = isDemoMode \n    ? demoPartnerSharedSubscriptions.reduce((total, service) => total + service.monthly_price, 0)\n    : 0;\n\n  // Prepare chart data\n  const chartData = subscriptions.map((sub, index) => ({\n    name: sub.streaming_services?.name || 'Unknown',\n    monthly: sub.streaming_services?.monthly_price || 0,\n    annual: (sub.streaming_services?.monthly_price || 0) * 12,\n    color: `hsl(${(index * 137.5) % 360}, 70%, 50%)` // Generate unique colors\n  }));\n\n  const chartConfig = {\n    monthly: {\n      label: \"Monthly Cost\",\n    },\n    annual: {\n      label: \"Annual Cost\", \n    },\n  };\n\n  if (!user) {\n    return (\n      <MobileLayout>\n        <div className=\"min-h-screen bg-background\">\n          <div className=\"p-6\">\n            <div className=\"flex flex-col items-center justify-center min-h-[60vh] space-y-6\">\n              <div className=\"relative\">\n                <Shield className=\"w-20 h-20 text-muted-foreground opacity-50\" />\n                <div className=\"absolute inset-0 bg-gradient-to-r from-primary/20 to-accent/20 rounded-full blur-xl\"></div>\n              </div>\n              <div className=\"text-center space-y-3 max-w-sm\">\n                <h2 className=\"text-2xl font-bold text-foreground\">Secure Vault</h2>\n                <p className=\"text-muted-foreground leading-relaxed\">\n                  Please sign in to access your secure subscription vault and manage your streaming services\n                </p>\n              </div>\n              <Button \n                onClick={() => navigate(\"/onboarding\")} \n                className=\"bg-primary hover:bg-primary/90 text-primary-foreground px-8 py-3 rounded-xl font-medium shadow-lg hover:shadow-xl transition-all duration-300\"\n                data-testid=\"button-signin\"\n              >\n                Sign In to Continue\n              </Button>\n            </div>\n          </div>\n        </div>\n      </MobileLayout>\n    );\n  }\n\n  if (loading) {\n    return (\n      <MobileLayout>\n        <div className=\"min-h-screen bg-background\">\n          <div className=\"p-6 space-y-8\">\n            {/* Header skeleton */}\n            <div className=\"space-y-6\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"space-y-3\">\n                  <div className=\"h-8 w-40 bg-muted rounded-lg animate-pulse\" />\n                  <div className=\"h-4 w-32 bg-muted rounded animate-pulse\" />\n                </div>\n                <div className=\"h-10 w-24 bg-muted rounded-xl animate-pulse\" />\n              </div>\n              \n              {/* Summary card skeleton */}\n              <div className=\"h-32 w-full bg-gradient-to-br from-muted to-muted/80 rounded-2xl animate-pulse\" />\n            </div>\n            \n            {/* Subscription cards skeleton */}\n            <div className=\"space-y-4\">\n              <div className=\"h-6 w-48 bg-muted rounded animate-pulse\" />\n              <div className=\"space-y-4\">\n                {[1, 2, 3].map((i) => (\n                  <VaultCardSkeleton key={i} />\n                ))}\n              </div>\n            </div>\n          </div>\n        </div>\n      </MobileLayout>\n    );\n  }\n\n  return (\n    <MobileLayout>\n      <div className=\"min-h-screen bg-background\">\n        <div className=\"p-6 space-y-8\">\n          {/* Enhanced Header Section */}\n          <div className=\"space-y-6 animate-fade-in\">\n            <div className=\"flex items-start justify-between\">\n              <div className=\"space-y-2\">\n                <h1 className=\"text-3xl font-bold text-foreground\">My Vault</h1>\n                <p className=\"text-base text-muted-foreground\">\n                  Secure management for all your subscriptions\n                </p>\n              </div>\n              <Button \n                size=\"default\" \n                onClick={() => navigate(\"/\")}\n                className=\"bg-accent hover:bg-accent/90 text-accent-foreground px-6 py-2.5 rounded-xl font-medium shadow-lg hover:shadow-xl transition-all duration-300 hover:scale-105\"\n                data-testid=\"button-add-subscription\"\n              >\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Add Service\n              </Button>\n            </div>\n          \n            {/* Enhanced Cost Overview Chart */}\n            {subscriptions.length > 0 ? (\n              <Card className=\"relative overflow-hidden border-0 shadow-elegant bg-gradient-to-br from-background via-background to-muted/30\">\n                <CardContent className=\"p-6\">\n                  <div className=\"space-y-6\">\n                    {/* Header with Toggle */}\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <h3 className=\"text-lg font-semibold text-foreground\">Subscription Overview</h3>\n                        <p className=\"text-sm text-muted-foreground\">\n                          {isAnnualView ? 'Annual' : 'Monthly'} cost breakdown\n                        </p>\n                      </div>\n                      <div className=\"flex items-center gap-2 bg-muted/50 rounded-full p-1\">\n                        <Button\n                          variant={!isAnnualView ? \"default\" : \"ghost\"}\n                          size=\"sm\"\n                          onClick={() => setIsAnnualView(false)}\n                          className=\"rounded-full px-4 h-8 text-xs\"\n                        >\n                          Monthly\n                        </Button>\n                        <Button\n                          variant={isAnnualView ? \"default\" : \"ghost\"}\n                          size=\"sm\"\n                          onClick={() => setIsAnnualView(true)}\n                          className=\"rounded-full px-4 h-8 text-xs\"\n                        >\n                          Annual\n                        </Button>\n                      </div>\n                    </div>\n\n                    <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 items-center\">\n                      {/* Chart */}\n                      <div className=\"relative\">\n                        <ChartContainer config={chartConfig} className=\"aspect-square max-w-[250px] mx-auto\">\n                          <PieChart>\n                            <Pie\n                              data={chartData}\n                              cx=\"50%\"\n                              cy=\"50%\"\n                              innerRadius={60}\n                              outerRadius={100}\n                              paddingAngle={2}\n                              dataKey={isAnnualView ? \"annual\" : \"monthly\"}\n                            >\n                              {chartData.map((entry, index) => (\n                                <Cell key={`cell-${index}`} fill={entry.color} />\n                              ))}\n                            </Pie>\n                          </PieChart>\n                        </ChartContainer>\n                        \n                        {/* Center Logo */}\n                        <div className=\"absolute inset-0 flex items-center justify-center\">\n                          <div className=\"w-16 h-16 bg-white rounded-full flex items-center justify-center shadow-lg\">\n                            <img \n                              src=\"/lovable-uploads/105cee16-9e7f-45ba-9b51-01a7a6f35377.png\" \n                              alt=\"SubCircle\" \n                              className=\"w-10 h-10 object-contain\"\n                            />\n                          </div>\n                        </div>\n                      </div>\n\n                      {/* Summary */}\n                      <div className=\"space-y-4\">\n                        <div className=\"text-center lg:text-left\">\n                          <p className=\"text-sm text-muted-foreground uppercase tracking-wide\">\n                            Total {isAnnualView ? 'Annual' : 'Monthly'} Cost\n                          </p>\n                          <p className=\"text-3xl font-bold text-foreground\" data-testid=\"text-total-cost\">\n                            ${isAnnualView ? (totalMonthlyCost * 12).toFixed(2) : totalMonthlyCost.toFixed(2)}\n                          </p>\n                          <p className=\"text-sm text-muted-foreground\">\n                            {subscriptions.length} active {subscriptions.length === 1 ? 'subscription' : 'subscriptions'}\n                          </p>\n                        </div>\n\n                        {/* Savings from partner shared services */}\n                        {totalMonthlySavings > 0 && (\n                          <div className=\"text-center lg:text-left p-4 bg-green-50 dark:bg-green-900/20 rounded-lg border border-green-200 dark:border-green-800\">\n                            <p className=\"text-sm text-green-700 dark:text-green-300 uppercase tracking-wide font-medium\">\n                              💰 Total {isAnnualView ? 'Annual' : 'Monthly'} Savings\n                            </p>\n                            <p className=\"text-2xl font-bold text-green-700 dark:text-green-300\" data-testid=\"text-total-savings\">\n                              ${isAnnualView ? (totalMonthlySavings * 12).toFixed(2) : totalMonthlySavings.toFixed(2)}\n                            </p>\n                            <p className=\"text-xs text-green-600 dark:text-green-400\">\n                              From {demoPartnerSharedSubscriptions.length} partner-shared {demoPartnerSharedSubscriptions.length === 1 ? 'service' : 'services'}\n                            </p>\n                          </div>\n                        )}\n\n                        {/* Service Breakdown */}\n                        <div className=\"space-y-2\">\n                          {chartData.map((service, index) => (\n                            <div key={service.name} className=\"flex items-center justify-between p-2 rounded-lg hover:bg-muted/50 transition-colors\">\n                              <div className=\"flex items-center gap-3\">\n                                <div \n                                  className=\"w-3 h-3 rounded-full\"\n                                  style={{ backgroundColor: service.color }}\n                                />\n                                <span className=\"text-sm font-medium text-foreground\">{service.name}</span>\n                              </div>\n                              <span className=\"text-sm font-semibold text-foreground\">\n                                ${isAnnualView ? service.annual.toFixed(2) : service.monthly.toFixed(2)}\n                              </span>\n                            </div>\n                          ))}\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ) : (\n              // Fallback summary for empty state\n              <Card className=\"relative overflow-hidden bg-gradient-primary border-0 shadow-elegant\">\n                <div className=\"absolute inset-0 bg-gradient-to-br from-white/10 via-transparent to-transparent\" />\n                <CardContent className=\"relative p-8\">\n                  <div className=\"text-center space-y-4\">\n                    <div className=\"space-y-2\">\n                      <div className=\"flex items-center justify-center gap-3\">\n                        <div className=\"p-2 bg-white/20 rounded-lg\">\n                          <DollarSign className=\"w-5 h-5 text-white\" />\n                        </div>\n                        <p className=\"text-white/90 text-sm font-medium uppercase tracking-wide\">Monthly Total</p>\n                      </div>\n                      <p className=\"text-4xl font-bold text-white\">$0.00</p>\n                      <p className=\"text-white/80 text-sm\">Add subscriptions to see your spending</p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n        </div>\n\n          {/* Enhanced Subscriptions Section */}\n          {subscriptions.length > 0 ? (\n            <div className=\"space-y-6\">\n              <div className=\"flex items-center justify-between\">\n                <h2 className=\"text-xl font-bold text-foreground\">Your Subscriptions</h2>\n                <Badge variant=\"outline\" className=\"px-3 py-1 text-sm font-medium bg-muted/50 border-muted-foreground/20\">\n                  <CheckCircle className=\"w-3 h-3 mr-2 text-green-600\" />\n                  {subscriptions.length} Active\n                </Badge>\n              </div>\n              \n              <div className=\"space-y-4\">\n                {subscriptions.map((subscription, index) => (\n                  <Card \n                    key={subscription.id} \n                    className={cn(\n                      \"group overflow-hidden border border-border/50 bg-card hover:bg-card/80\",\n                      \"transition-all duration-300 ease-out hover:shadow-card-hover hover:scale-[1.01]\",\n                      \"animate-slide-up\"\n                    )}\n                    style={{ animationDelay: `${index * 100}ms` }}\n                    data-testid={`card-subscription-${subscription.id}`}\n                  >\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-start gap-6\">\n                        {/* Service Logo */}\n                        <div className=\"shrink-0\">\n                          <div className=\"w-16 h-16 bg-background border border-border/20 rounded-2xl flex items-center justify-center p-3 shadow-sm group-hover:shadow-md transition-shadow duration-300\">\n                            {hasServiceLogo(subscription.streaming_services) ? (\n                              <img\n                                src={getServiceLogo(subscription.streaming_services)}\n                                alt={`${subscription.streaming_services?.name || \"Service\"} logo`}\n                                className=\"w-full h-full object-contain\"\n                                loading=\"lazy\"\n                                referrerPolicy=\"no-referrer\"\n                                onError={(e) => handleLogoError(e, subscription.streaming_services)}\n                                data-testid={`img-service-logo-${subscription.id}`}\n                              />\n                            ) : (\n                              <div className=\"w-full h-full bg-gradient-primary rounded-xl flex items-center justify-center text-lg font-bold text-white\">\n                                {subscription.streaming_services?.name?.charAt(0) || \"?\"}\n                              </div>\n                            )}\n                          </div>\n                        </div>\n                        \n                        {/* Service Info */}\n                        <div className=\"flex-1 min-w-0 space-y-4\">\n                          <div className=\"space-y-2\">\n                            <div className=\"flex items-start justify-between gap-3\">\n                              <h3 className=\"font-bold text-lg text-foreground leading-tight group-hover:text-primary transition-colors duration-300\" data-testid={`text-service-name-${subscription.id}`}>\n                                {subscription.streaming_services?.name || \"Unknown Service\"}\n                              </h3>\n                              {subscription.streaming_services?.monthly_price && (\n                                <div className=\"text-right shrink-0\">\n                                  <p className=\"text-2xl font-bold text-primary\" data-testid={`text-service-price-${subscription.id}`}>\n                                    ${subscription.streaming_services.monthly_price}\n                                  </p>\n                                  <p className=\"text-xs text-muted-foreground\">per month</p>\n                                </div>\n                              )}\n                            </div>\n                            \n                            {/* Status Badges */}\n                            <div className=\"flex items-center gap-2 flex-wrap\">\n                              <Badge variant=\"outline\" className=\"px-2 py-1 text-xs bg-green-50 dark:bg-green-900/20 text-green-700 dark:text-green-300 border-green-200 dark:border-green-800\">\n                                <CheckCircle className=\"w-3 h-3 mr-1\" />\n                                Active\n                              </Badge>\n                              <Badge variant=\"outline\" className=\"px-2 py-1 text-xs bg-orange-50 dark:bg-orange-900/20 text-orange-700 dark:text-orange-300 border-orange-200 dark:border-orange-800\">\n                                <Lock className=\"w-3 h-3 mr-1\" />\n                                Credentials Needed\n                              </Badge>\n                            </div>\n                          </div>\n\n                          {/* Action Buttons */}\n                          <div className=\"flex items-center justify-between pt-2\">\n                            <div className=\"flex items-center gap-2\">\n                              {subscription.streaming_services?.website_url && (\n                                <Button\n                                  variant=\"outline\"\n                                  size=\"sm\"\n                                  className=\"px-3 py-1.5 h-auto text-xs font-medium hover:bg-accent hover:text-accent-foreground\"\n                                  onClick={() => window.open(subscription.streaming_services?.website_url || '', '_blank')}\n                                  data-testid={`button-visit-website-${subscription.id}`}\n                                >\n                                  <ExternalLink className=\"w-3 h-3 mr-1\" />\n                                  Visit Site\n                                </Button>\n                              )}\n                            </div>\n                            <ShareSubscriptionDialog\n                              subscriptionId={subscription.id}\n                              serviceName={subscription.streaming_services?.name || \"Unknown Service\"}\n                              currentSettings={{\n                                shared_with_partners: subscription.shared_with_partners,\n                                share_credentials: subscription.share_credentials,\n                              }}\n                              onUpdate={handleSharingUpdate}\n                            />\n                          </div>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            </div>\n          ) : (\n            // Enhanced Empty State\n            <div className=\"flex flex-col items-center justify-center py-16 space-y-6\">\n              <div className=\"relative\">\n                <Shield className=\"w-24 h-24 text-muted-foreground opacity-30\" />\n                <div className=\"absolute inset-0 bg-gradient-to-r from-primary/10 to-accent/10 rounded-full blur-2xl\"></div>\n              </div>\n              <div className=\"text-center space-y-3 max-w-md\">\n                <h2 className=\"text-2xl font-bold text-foreground\">Your Vault Awaits</h2>\n                <p className=\"text-muted-foreground leading-relaxed\">\n                  Start building your secure subscription vault by adding streaming services from our catalog\n                </p>\n              </div>\n              <Button \n                onClick={() => navigate(\"/\")} \n                className=\"bg-primary hover:bg-primary/90 text-primary-foreground px-8 py-3 rounded-xl font-medium shadow-lg hover:shadow-xl transition-all duration-300 hover:scale-105\"\n                data-testid=\"button-browse-catalog\"\n              >\n                <Star className=\"w-4 h-4 mr-2\" />\n                Browse Catalog\n              </Button>\n            </div>\n          )}\n\n          {/* Enhanced Partner Subscriptions */}\n          {partners.length > 0 && (\n            <div className=\"space-y-6\">\n              <div className=\"flex items-center gap-3\">\n                <div className=\"p-2 bg-accent/10 rounded-lg\">\n                  <Users className=\"w-5 h-5 text-accent\" />\n                </div>\n                <h2 className=\"text-xl font-bold text-foreground\">Partner Subscriptions</h2>\n              </div>\n              <div className=\"space-y-6\">\n                {partners.map((partner) => (\n                  <PartnerSubscriptionsView\n                    key={partner.id}\n                    partnerId={partner.partner_id}\n                    partnerName={partner.profiles?.display_name || \"Unknown Partner\"}\n                  />\n                ))}\n              </div>\n            </div>\n          )}\n\n          {/* Enhanced Security Note */}\n          <Card className=\"border-subcircle-cyan/30 dark:border-subcircle-cyan/20 bg-subcircle-cyan/5 dark:bg-subcircle-cyan/10\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex gap-4\">\n                <div className=\"p-2 bg-subcircle-cyan/10 rounded-lg shrink-0\">\n                  <ShieldCheck className=\"w-6 h-6 text-subcircle-cyan\" />\n                </div>\n                <div className=\"space-y-2\">\n                  <h4 className=\"font-semibold text-foreground\">Bank-Level Security</h4>\n                  <p className=\"text-sm text-muted-foreground leading-relaxed\">\n                    Your subscription data is protected with end-to-end encryption. \n                    SubCircle never stores your passwords or payment information.\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </MobileLayout>\n  );\n}","size_bytes":27285},"src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"capacitor.config.ts":{"content":"import { CapacitorConfig } from '@capacitor/cli';\n\nconst config: CapacitorConfig = {\n  appId: 'app.lovable.b72833b54def46e18b84b2073fb5be53',\n  appName: 'subcircle-shared-vault',\n  webDir: 'dist',\n  bundledWebRuntime: false,\n  server: {\n    url: \"https://b72833b5-4def-46e1-8b84-b2073fb5be53.lovableproject.com?forceHideBadge=true\",\n    cleartext: true\n  },\n  plugins: {\n    SplashScreen: {\n      launchShowDuration: 0,\n      launchAutoHide: true,\n      androidScaleType: 'CENTER_CROP',\n      splashImmersive: true,\n      splashFullScreen: true,\n    },\n    PushNotifications: {\n      presentationOptions: [\"badge\", \"sound\", \"alert\"]\n    },\n    LocalNotifications: {\n      smallIcon: \"ic_stat_icon_config_sample\",\n      iconColor: \"#488AFF\"\n    },\n    StatusBar: {\n      style: 'default',\n      backgroundColor: '#000000'\n    }\n  },\n};\n\nexport default config;","size_bytes":858},"src/pages/AddSubscription.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { ArrowLeft, Tv, Search } from 'lucide-react';\nimport { useNavigate } from 'react-router-dom';\nimport { toast } from '@/hooks/use-toast';\nimport { Input } from '@/components/ui/input';\nimport { ThemeToggle } from '@/components/ThemeToggle';\nimport { getServiceLogo, handleLogoError, hasServiceLogo } from '@/lib/logo-utils';\nimport { MobileLayout } from '@/components/mobile/MobileLayout';\n\ninterface StreamingService {\n  id: string;\n  name: string;\n  logo_url: string | null;\n  monthly_price: number | null;\n  category: string | null;\n  description: string | null;\n  website_url?: string | null;\n}\n\n// Logo handling moved to centralized utility\nconst AddSubscription = () => {\n  const { user } = useAuth();\n  const navigate = useNavigate();\n  const [services, setServices] = useState<StreamingService[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [addingService, setAddingService] = useState<string | null>(null);\n\n  useEffect(() => {\n    fetchServices();\n  }, []);\n\n  const fetchServices = async () => {\n    try {\n      // TODO: Replace with backend API call\n      // For now, provide some mock services to get app working\n      const mockServices = [\n        {\n          id: '1',\n          name: 'Netflix',\n          logo_url: null,\n          monthly_price: 15.99,\n          category: 'streaming',\n          description: 'Stream TV shows and movies'\n        },\n        {\n          id: '2',\n          name: 'Spotify',\n          logo_url: null,\n          monthly_price: 9.99,\n          category: 'music',\n          description: 'Music streaming service'\n        }\n      ];\n      setServices(mockServices);\n    } catch (error) {\n      console.error('Error fetching services:', error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to load streaming services\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleAddSubscription = async (serviceId: string) => {\n    if (!user) return;\n    \n    setAddingService(serviceId);\n    try {\n      // TODO: Replace with backend API call\n      // For now, just show success message\n      \n      toast({\n        title: \"Success\",\n        description: \"Subscription added successfully (mock)\"\n      });\n      \n      navigate('/');\n    } catch (error) {\n      console.error('Error adding subscription:', error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to add subscription\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setAddingService(null);\n    }\n  };\n\n  const filteredServices = services.filter(service =>\n    service.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    service.category?.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n\n  if (loading) {\n    return (\n      <MobileLayout>\n        <div className=\"min-h-screen flex items-center justify-center bg-gradient-subtle\">\n          <div className=\"text-center space-y-4\">\n            <div className=\"w-16 h-16 bg-gradient-primary rounded-2xl mx-auto flex items-center justify-center shadow-elegant animate-pulse\">\n              <Tv className=\"w-8 h-8 text-white\" />\n            </div>\n            <p className=\"text-muted-foreground\">Loading streaming services...</p>\n          </div>\n        </div>\n      </MobileLayout>\n    );\n  }\n\n  return (\n    <MobileLayout showHeader={false}>\n      <div className=\"min-h-screen bg-gradient-subtle\">\n        {/* Header */}\n        <header className=\"border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60\">\n          <div className=\"container mx-auto px-4 py-4 flex items-center justify-between\">\n            <div className=\"flex items-center space-x-3\">\n              {/* Logo */}\n              <div className=\"flex items-center gap-3\">\n                <div className=\"w-8 h-8 bg-white rounded-full flex items-center justify-center shadow-sm\">\n                  <img \n                    src=\"/lovable-uploads/105cee16-9e7f-45ba-9b51-01a7a6f35377.png\" \n                    alt=\"SubCircle\" \n                    className=\"w-6 h-6 object-contain\"\n                  />\n                </div>\n              </div>\n              <ThemeToggle />\n              <Button variant=\"ghost\" size=\"sm\" onClick={() => navigate('/')}>\n                <ArrowLeft className=\"w-4 h-4\" />\n              </Button>\n              <h1 className=\"text-xl font-bold\">Add Service</h1>\n            </div>\n          </div>\n        </header>\n\n        <main className=\"container mx-auto px-4 py-6 space-y-6\">\n        {/* Search */}\n        <div className=\"relative\">\n          <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n          <Input\n            placeholder=\"Search streaming services...\"\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n            className=\"pl-10\"\n          />\n        </div>\n\n        {/* Services Grid */}\n        <div className=\"space-y-4\">\n          {filteredServices.length === 0 ? (\n            <Card>\n              <CardContent className=\"py-8 text-center\">\n                <Tv className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                <p className=\"text-muted-foreground\">\n                  {searchQuery ? 'No services found matching your search' : 'No streaming services available'}\n                </p>\n              </CardContent>\n            </Card>\n          ) : (\n            filteredServices.map((service) => (\n              <Card key={service.id} className=\"overflow-hidden\">\n                <CardContent className=\"p-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-4\">\n                      <div className=\"w-12 h-12 bg-white dark:bg-white border border-border p-2 rounded-lg flex items-center justify-center overflow-hidden shadow-sm\">\n                        {hasServiceLogo(service) ? (\n                          <img \n                            src={getServiceLogo(service)}\n                            alt={`${service.name} logo`}\n                            className=\"w-full h-full object-contain\"\n                            loading=\"lazy\"\n                            referrerPolicy=\"no-referrer\"\n                            onError={(e) => handleLogoError(e, service)}\n                          />\n                        ) : null}\n                        <Tv className={`w-6 h-6 text-muted-foreground ${hasServiceLogo(service) ? 'hidden' : ''}`} />\n                      </div>\n                      <div className=\"flex-1\">\n                        <h3 className=\"font-semibold\">{service.name}</h3>\n                        <p className=\"text-sm text-muted-foreground\">\n                          {service.monthly_price ? `$${service.monthly_price}/month` : 'Pricing varies'}\n                        </p>\n                        {service.category && (\n                          <p className=\"text-xs text-muted-foreground capitalize\">\n                            {service.category}\n                          </p>\n                        )}\n                      </div>\n                    </div>\n                    <Button\n                      onClick={() => handleAddSubscription(service.id)}\n                      disabled={addingService === service.id}\n                      size=\"sm\"\n                    >\n                      {addingService === service.id ? 'Adding...' : 'Add'}\n                    </Button>\n                  </div>\n                  {service.description && (\n                    <p className=\"text-sm text-muted-foreground mt-3 ml-16\">\n                      {service.description}\n                    </p>\n                  )}\n                </CardContent>\n              </Card>\n            ))\n          )}\n        </div>\n        </main>\n      </div>\n    </MobileLayout>\n  );\n};\n\nexport default AddSubscription;","size_bytes":8191}},"version":2}